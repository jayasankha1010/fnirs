
Simple _combined_central_hf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d04  08003d04  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003d04  08003d04  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d04  08003d04  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000074  08003d80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08003d80  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013028  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d1  00000000  00000000  000330c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00036c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019287  00000000  00000000  00037d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f25  00000000  00000000  00051017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e28  00000000  00000000  00063f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  000f5db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c78 	.word	0x08003c78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003c78 	.word	0x08003c78

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc1d 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f87d 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9c7 	bl	80004fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f8f5 	bl	800035c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f977 	bl	8000464 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000176:	f000 f99f 	bl	80004b8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800017a:	f000 f925 	bl	80003c8 <MX_TIM2_Init>
  MX_RTC_Init();
 800017e:	f000 f8d1 	bl	8000324 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //to reset the the j9 optode
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2101      	movs	r1, #1
 8000186:	482f      	ldr	r0, [pc, #188]	; (8000244 <main+0xe8>)
 8000188:	f000 ff98 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2102      	movs	r1, #2
 8000190:	482c      	ldr	r0, [pc, #176]	; (8000244 <main+0xe8>)
 8000192:	f000 ff93 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	482a      	ldr	r0, [pc, #168]	; (8000244 <main+0xe8>)
 800019c:	f000 ff8e 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_Delay(1500);
 80001a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80001a4:	f000 fc5e 	bl	8000a64 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2102      	movs	r1, #2
 80001ac:	4825      	ldr	r0, [pc, #148]	; (8000244 <main+0xe8>)
 80001ae:	f000 ff85 	bl	80010bc <HAL_GPIO_WritePin>

  //to select the j9 slave ooptode
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b8:	4823      	ldr	r0, [pc, #140]	; (8000248 <main+0xec>)
 80001ba:	f000 ff7f 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c4:	4820      	ldr	r0, [pc, #128]	; (8000248 <main+0xec>)
 80001c6:	f000 ff79 	bl	80010bc <HAL_GPIO_WritePin>
//          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//          HAL_Delay(100);
//      }


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d0:	481d      	ldr	r0, [pc, #116]	; (8000248 <main+0xec>)
 80001d2:	f000 ff73 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001dc:	481a      	ldr	r0, [pc, #104]	; (8000248 <main+0xec>)
 80001de:	f000 ff6d 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	4817      	ldr	r0, [pc, #92]	; (8000248 <main+0xec>)
 80001ea:	f000 ff67 	bl	80010bc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ee:	b672      	cpsid	i
}
 80001f0:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __disable_irq();
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aTxBuffer, (uint8_t *)&reading , sizeof(reading), HAL_MAX_DELAY);
 80001f2:	f04f 33ff 	mov.w	r3, #4294967295
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2302      	movs	r3, #2
 80001fa:	4a14      	ldr	r2, [pc, #80]	; (800024c <main+0xf0>)
 80001fc:	4914      	ldr	r1, [pc, #80]	; (8000250 <main+0xf4>)
 80001fe:	4815      	ldr	r0, [pc, #84]	; (8000254 <main+0xf8>)
 8000200:	f001 ffb9 	bl	8002176 <HAL_SPI_TransmitReceive>

	  sprintf(msg, "%hu\r\n", (int)reading);
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <main+0xf0>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	4913      	ldr	r1, [pc, #76]	; (8000258 <main+0xfc>)
 800020c:	4813      	ldr	r0, [pc, #76]	; (800025c <main+0x100>)
 800020e:	f003 f8f9 	bl	8003404 <siprintf>

		//HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
	  if((reading<4096)&&(reading>300)){
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <main+0xf0>)
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800021a:	d20f      	bcs.n	800023c <main+0xe0>
 800021c:	4b0b      	ldr	r3, [pc, #44]	; (800024c <main+0xf0>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000224:	d90a      	bls.n	800023c <main+0xe0>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000226:	480d      	ldr	r0, [pc, #52]	; (800025c <main+0x100>)
 8000228:	f7ff ff90 	bl	800014c <strlen>
 800022c:	4603      	mov	r3, r0
 800022e:	b29a      	uxth	r2, r3
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	4909      	ldr	r1, [pc, #36]	; (800025c <main+0x100>)
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <main+0x104>)
 8000238:	f002 fee7 	bl	800300a <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 800023c:	b662      	cpsie	i
}
 800023e:	bf00      	nop
	  __disable_irq();
 8000240:	e7d5      	b.n	80001ee <main+0x92>
 8000242:	bf00      	nop
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010800 	.word	0x40010800
 800024c:	20000000 	.word	0x20000000
 8000250:	200004c0 	.word	0x200004c0
 8000254:	200000f0 	.word	0x200000f0
 8000258:	08003c90 	.word	0x08003c90
 800025c:	2000009c 	.word	0x2000009c
 8000260:	20000190 	.word	0x20000190

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	; 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 f8be 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000294:	2309      	movs	r3, #9
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f82c 	bl	800131c <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ca:	f000 f991 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2101      	movs	r1, #1
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fa96 	bl	800181c <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002f6:	f000 f97b 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002fa:	2311      	movs	r3, #17
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000302:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000308:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f001 fc21 	bl	8001b54 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000318:	f000 f96a 	bl	80005f0 <Error_Handler>
  }
}
 800031c:	bf00      	nop
 800031e:	3750      	adds	r7, #80	; 0x50
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <MX_RTC_Init+0x30>)
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <MX_RTC_Init+0x34>)
 800032c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_RTC_Init+0x30>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295
 8000334:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <MX_RTC_Init+0x30>)
 8000338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800033c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_RTC_Init+0x30>)
 8000340:	f001 fd82 	bl	8001e48 <HAL_RTC_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800034a:	f000 f951 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000bc 	.word	0x200000bc
 8000358:	40002800 	.word	0x40002800

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */
  //__HAL_RCC_SPI1_CLK_ENABLE; // I added this ******************************************************
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000362:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <MX_SPI1_Init+0x68>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_SPI1_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000382:	2201      	movs	r2, #1
 8000384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000390:	2208      	movs	r2, #8
 8000392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_SPI1_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003a8:	220a      	movs	r2, #10
 80003aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003ae:	f001 fe5e 	bl	800206e <HAL_SPI_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003b8:	f000 f91a 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000f0 	.word	0x200000f0
 80003c4:	40013000 	.word	0x40013000

080003c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003e4:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <MX_TIM2_Init+0x98>)
 80003e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_TIM2_Init+0x98>)
 80003ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_TIM2_Init+0x98>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000;
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_TIM2_Init+0x98>)
 80003fc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000400:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_TIM2_Init+0x98>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_TIM2_Init+0x98>)
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800040e:	4814      	ldr	r0, [pc, #80]	; (8000460 <MX_TIM2_Init+0x98>)
 8000410:	f002 f9fe 	bl	8002810 <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800041a:	f000 f8e9 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000422:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	4619      	mov	r1, r3
 800042a:	480d      	ldr	r0, [pc, #52]	; (8000460 <MX_TIM2_Init+0x98>)
 800042c:	f002 fb47 	bl	8002abe <HAL_TIM_ConfigClockSource>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000436:	f000 f8db 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043a:	2300      	movs	r3, #0
 800043c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000442:	463b      	mov	r3, r7
 8000444:	4619      	mov	r1, r3
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <MX_TIM2_Init+0x98>)
 8000448:	f002 fd22 	bl	8002e90 <HAL_TIMEx_MasterConfigSynchronization>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000452:	f000 f8cd 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000148 	.word	0x20000148

08000464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000468:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_USART2_UART_Init+0x48>)
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 800046c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USART2_UART_Init+0x48>)
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <MX_USART2_UART_Init+0x50>)
 8000472:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <MX_USART2_UART_Init+0x48>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART2_UART_Init+0x48>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_USART2_UART_Init+0x48>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART2_UART_Init+0x48>)
 8000488:	220c      	movs	r2, #12
 800048a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_USART2_UART_Init+0x48>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART2_UART_Init+0x48>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_USART2_UART_Init+0x48>)
 800049a:	f002 fd69 	bl	8002f70 <HAL_UART_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80004a4:	f000 f8a4 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000190 	.word	0x20000190
 80004b0:	40004400 	.word	0x40004400
 80004b4:	000f4240 	.word	0x000f4240

080004b8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <MX_USB_PCD_Init+0x40>)
 80004c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004e2:	f000 fe03 	bl	80010ec <HAL_PCD_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004ec:	f000 f880 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200001d4 	.word	0x200001d4
 80004f8:	40005c00 	.word	0x40005c00

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a33      	ldr	r2, [pc, #204]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|A20_Pin|A21_Pin|A22_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f240 7101 	movw	r1, #1793	; 0x701
 8000576:	481c      	ldr	r0, [pc, #112]	; (80005e8 <MX_GPIO_Init+0xec>)
 8000578:	f000 fda0 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A12_Pin|A10_Pin|A11_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2107      	movs	r1, #7
 8000580:	481a      	ldr	r0, [pc, #104]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000582:	f000 fd9b 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	2303      	movs	r3, #3
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <MX_GPIO_Init+0xec>)
 800059e:	f000 fc09 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A12_Pin A10_Pin A11_Pin */
  GPIO_InitStruct.Pin = A12_Pin|A10_Pin|A11_Pin;
 80005a2:	2307      	movs	r3, #7
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <MX_GPIO_Init+0xf0>)
 80005ba:	f000 fbfb 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A20_Pin A21_Pin A22_Pin */
  GPIO_InitStruct.Pin = A20_Pin|A21_Pin|A22_Pin;
 80005be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0xec>)
 80005d8:	f000 fbec 	bl	8000db4 <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_MspInit+0x5c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_MspInit+0x5c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x5c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <HAL_MspInit+0x5c>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x60>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_MspInit+0x60>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000
 800065c:	40010000 	.word	0x40010000

08000660 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <HAL_RTC_MspInit+0x3c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d110      	bne.n	8000694 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000672:	f000 fe47 	bl	8001304 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_RTC_MspInit+0x40>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <HAL_RTC_MspInit+0x40>)
 800067c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <HAL_RTC_MspInit+0x40>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_RTC_MspInit+0x44>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40002800 	.word	0x40002800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	4242043c 	.word	0x4242043c

080006a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <HAL_SPI_MspInit+0x98>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d137      	bne.n	8000738 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <HAL_SPI_MspInit+0x9c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <HAL_SPI_MspInit+0x9c>)
 80006ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_SPI_MspInit+0x9c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_SPI_MspInit+0x9c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <HAL_SPI_MspInit+0x9c>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_SPI_MspInit+0x9c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006f8:	23a0      	movs	r3, #160	; 0xa0
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <HAL_SPI_MspInit+0xa0>)
 800070c:	f000 fb52 	bl	8000db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000710:	2340      	movs	r3, #64	; 0x40
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <HAL_SPI_MspInit+0xa0>)
 8000724:	f000 fb46 	bl	8000db4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2023      	movs	r0, #35	; 0x23
 800072e:	f000 fa94 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000732:	2023      	movs	r0, #35	; 0x23
 8000734:	f000 faad 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40013000 	.word	0x40013000
 8000744:	40021000 	.word	0x40021000
 8000748:	40010800 	.word	0x40010800

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800075c:	d113      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_TIM_Base_MspInit+0x44>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <HAL_TIM_Base_MspInit+0x44>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_TIM_Base_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	201c      	movs	r0, #28
 800077c:	f000 fa6d 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000780:	201c      	movs	r0, #28
 8000782:	f000 fa86 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a1b      	ldr	r2, [pc, #108]	; (800081c <HAL_UART_MspInit+0x88>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d12f      	bne.n	8000814 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <HAL_UART_MspInit+0x8c>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a19      	ldr	r2, [pc, #100]	; (8000820 <HAL_UART_MspInit+0x8c>)
 80007ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007be:	61d3      	str	r3, [r2, #28]
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x8c>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_UART_MspInit+0x8c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_UART_MspInit+0x8c>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_UART_MspInit+0x8c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e4:	2304      	movs	r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <HAL_UART_MspInit+0x90>)
 80007f8:	f000 fadc 	bl	8000db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007fc:	2308      	movs	r3, #8
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_UART_MspInit+0x90>)
 8000810:	f000 fad0 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004400 	.word	0x40004400
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800

08000828 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <HAL_PCD_MspInit+0x34>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10b      	bne.n	8000852 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_PCD_MspInit+0x38>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_PCD_MspInit+0x38>)
 8000840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_PCD_MspInit+0x38>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40005c00 	.word	0x40005c00
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008aa:	f000 f8bf 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <TIM2_IRQHandler+0x10>)
 80008ba:	f001 fff8 	bl	80028ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000148 	.word	0x20000148

080008c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <SPI1_IRQHandler+0x10>)
 80008ce:	f001 fdf5 	bl	80024bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000f0 	.word	0x200000f0

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f002 fd48 	bl	80033a0 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20005000 	.word	0x20005000
 800093c:	00000400 	.word	0x00000400
 8000940:	20000090 	.word	0x20000090
 8000944:	200004e8 	.word	0x200004e8

08000948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097a:	f7ff ffe5 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 fd15 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fbeb 	bl	800015c <main>
  bx lr
 8000986:	4770      	bx	lr
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000990:	08003d0c 	.word	0x08003d0c
  ldr r2, =_sbss
 8000994:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000998:	200004e4 	.word	0x200004e4

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f947 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe1e 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f95f 	bl	8000cae <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f927 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000004 	.word	0x20000004
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	20000008 	.word	0x20000008

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	2000000c 	.word	0x2000000c
 8000a4c:	200004d0 	.word	0x200004d0

08000a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	200004d0 	.word	0x200004d0

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff fff0 	bl	8000a50 <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffe0 	bl	8000a50 <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <__NVIC_EnableIRQ+0x34>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff90 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff2d 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff42 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff90 	bl	8000b9c <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5f 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff35 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffa2 	bl	8000c00 <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d005      	beq.n	8000cea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e051      	b.n	8000d8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 020e 	bic.w	r2, r2, #14
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0201 	bic.w	r2, r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <HAL_DMA_Abort_IT+0xd0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d029      	beq.n	8000d68 <HAL_DMA_Abort_IT+0xa0>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <HAL_DMA_Abort_IT+0xd4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d022      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x9c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_DMA_Abort_IT+0xd8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d01a      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x96>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_DMA_Abort_IT+0xdc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d012      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x90>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_DMA_Abort_IT+0xe0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00a      	beq.n	8000d52 <HAL_DMA_Abort_IT+0x8a>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_DMA_Abort_IT+0xe4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d102      	bne.n	8000d4c <HAL_DMA_Abort_IT+0x84>
 8000d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d4a:	e00e      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d50:	e00b      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d56:	e008      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	e005      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	e002      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d64:	2310      	movs	r3, #16
 8000d66:	e000      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <HAL_DMA_Abort_IT+0xe8>)
 8000d6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3
    } 
  }
  return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020008 	.word	0x40020008
 8000d9c:	4002001c 	.word	0x4002001c
 8000da0:	40020030 	.word	0x40020030
 8000da4:	40020044 	.word	0x40020044
 8000da8:	40020058 	.word	0x40020058
 8000dac:	4002006c 	.word	0x4002006c
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e169      	b.n	800109c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8158 	bne.w	8001096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4a9a      	ldr	r2, [pc, #616]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d05e      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000df0:	4a98      	ldr	r2, [pc, #608]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d875      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000df6:	4a98      	ldr	r2, [pc, #608]	; (8001058 <HAL_GPIO_Init+0x2a4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d058      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000dfc:	4a96      	ldr	r2, [pc, #600]	; (8001058 <HAL_GPIO_Init+0x2a4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d86f      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e02:	4a96      	ldr	r2, [pc, #600]	; (800105c <HAL_GPIO_Init+0x2a8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d052      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000e08:	4a94      	ldr	r2, [pc, #592]	; (800105c <HAL_GPIO_Init+0x2a8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d869      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e0e:	4a94      	ldr	r2, [pc, #592]	; (8001060 <HAL_GPIO_Init+0x2ac>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d04c      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000e14:	4a92      	ldr	r2, [pc, #584]	; (8001060 <HAL_GPIO_Init+0x2ac>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d863      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e1a:	4a92      	ldr	r2, [pc, #584]	; (8001064 <HAL_GPIO_Init+0x2b0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d046      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000e20:	4a90      	ldr	r2, [pc, #576]	; (8001064 <HAL_GPIO_Init+0x2b0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d85d      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e26:	2b12      	cmp	r3, #18
 8000e28:	d82a      	bhi.n	8000e80 <HAL_GPIO_Init+0xcc>
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d859      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <HAL_GPIO_Init+0x80>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000e89 	.word	0x08000e89
 8000e3c:	08000e9b 	.word	0x08000e9b
 8000e40:	08000edd 	.word	0x08000edd
 8000e44:	08000ee3 	.word	0x08000ee3
 8000e48:	08000ee3 	.word	0x08000ee3
 8000e4c:	08000ee3 	.word	0x08000ee3
 8000e50:	08000ee3 	.word	0x08000ee3
 8000e54:	08000ee3 	.word	0x08000ee3
 8000e58:	08000ee3 	.word	0x08000ee3
 8000e5c:	08000ee3 	.word	0x08000ee3
 8000e60:	08000ee3 	.word	0x08000ee3
 8000e64:	08000ee3 	.word	0x08000ee3
 8000e68:	08000ee3 	.word	0x08000ee3
 8000e6c:	08000ee3 	.word	0x08000ee3
 8000e70:	08000ee3 	.word	0x08000ee3
 8000e74:	08000ee3 	.word	0x08000ee3
 8000e78:	08000e91 	.word	0x08000e91
 8000e7c:	08000ea5 	.word	0x08000ea5
 8000e80:	4a79      	ldr	r2, [pc, #484]	; (8001068 <HAL_GPIO_Init+0x2b4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e86:	e02c      	b.n	8000ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e029      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	3304      	adds	r3, #4
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	e024      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e01f      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	330c      	adds	r3, #12
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e01a      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e013      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d105      	bne.n	8000ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	611a      	str	r2, [r3, #16]
          break;
 8000ece:	e009      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	615a      	str	r2, [r3, #20]
          break;
 8000eda:	e003      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          break;
 8000ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	2bff      	cmp	r3, #255	; 0xff
 8000ee8:	d801      	bhi.n	8000eee <HAL_GPIO_Init+0x13a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	e001      	b.n	8000ef2 <HAL_GPIO_Init+0x13e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2bff      	cmp	r3, #255	; 0xff
 8000ef8:	d802      	bhi.n	8000f00 <HAL_GPIO_Init+0x14c>
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x152>
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3b08      	subs	r3, #8
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	401a      	ands	r2, r3
 8000f18:	6a39      	ldr	r1, [r7, #32]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 80b1 	beq.w	8001096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f34:	4b4d      	ldr	r3, [pc, #308]	; (800106c <HAL_GPIO_Init+0x2b8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x2b8>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b4a      	ldr	r3, [pc, #296]	; (800106c <HAL_GPIO_Init+0x2b8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_GPIO_Init+0x2bc>)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a40      	ldr	r2, [pc, #256]	; (8001074 <HAL_GPIO_Init+0x2c0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d013      	beq.n	8000fa0 <HAL_GPIO_Init+0x1ec>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a3f      	ldr	r2, [pc, #252]	; (8001078 <HAL_GPIO_Init+0x2c4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d00d      	beq.n	8000f9c <HAL_GPIO_Init+0x1e8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3e      	ldr	r2, [pc, #248]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d007      	beq.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3d      	ldr	r2, [pc, #244]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d101      	bne.n	8000f94 <HAL_GPIO_Init+0x1e0>
 8000f90:	2303      	movs	r3, #3
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x1ee>
 8000f94:	2304      	movs	r3, #4
 8000f96:	e004      	b.n	8000fa2 <HAL_GPIO_Init+0x1ee>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0x1ee>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <HAL_GPIO_Init+0x1ee>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	f002 0203 	and.w	r2, r2, #3
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	4093      	lsls	r3, r2
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb2:	492f      	ldr	r1, [pc, #188]	; (8001070 <HAL_GPIO_Init+0x2bc>)
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	492c      	ldr	r1, [pc, #176]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4928      	ldr	r1, [pc, #160]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4922      	ldr	r1, [pc, #136]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	491e      	ldr	r1, [pc, #120]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 800100c:	4013      	ands	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	4918      	ldr	r1, [pc, #96]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4914      	ldr	r1, [pc, #80]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d021      	beq.n	8001088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
 8001050:	e021      	b.n	8001096 <HAL_GPIO_Init+0x2e2>
 8001052:	bf00      	nop
 8001054:	10320000 	.word	0x10320000
 8001058:	10310000 	.word	0x10310000
 800105c:	10220000 	.word	0x10220000
 8001060:	10210000 	.word	0x10210000
 8001064:	10120000 	.word	0x10120000
 8001068:	10110000 	.word	0x10110000
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	40010800 	.word	0x40010800
 8001078:	40010c00 	.word	0x40010c00
 800107c:	40011000 	.word	0x40011000
 8001080:	40011400 	.word	0x40011400
 8001084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	43db      	mvns	r3, r3
 8001090:	4909      	ldr	r1, [pc, #36]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001092:	4013      	ands	r3, r2
 8001094:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	3301      	adds	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	fa22 f303 	lsr.w	r3, r2, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f47f ae8e 	bne.w	8000dc8 <HAL_GPIO_Init+0x14>
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	372c      	adds	r7, #44	; 0x2c
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	611a      	str	r2, [r3, #16]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b08b      	sub	sp, #44	; 0x2c
 80010f0:	af06      	add	r7, sp, #24
 80010f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0fd      	b.n	80012fa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fb88 	bl	8000828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f002 f8eb 	bl	8003300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	687e      	ldr	r6, [r7, #4]
 8001132:	466d      	mov	r5, sp
 8001134:	f106 0410 	add.w	r4, r6, #16
 8001138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	1d33      	adds	r3, r6, #4
 8001142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f002 f8cb 	bl	80032e0 <USB_CoreInit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0ce      	b.n	80012fa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f8e6 	bl	8003334 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e04c      	b.n	8001208 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	3301      	adds	r3, #1
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	b298      	uxth	r0, r3
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	3336      	adds	r3, #54	; 0x36
 80011ac:	4602      	mov	r2, r0
 80011ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	3303      	adds	r3, #3
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	3338      	adds	r3, #56	; 0x38
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	333c      	adds	r3, #60	; 0x3c
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	3340      	adds	r3, #64	; 0x40
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	3301      	adds	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3ad      	bcc.n	800116e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e044      	b.n	80012a2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	f203 1369 	addw	r3, r3, #361	; 0x169
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	440b      	add	r3, r1
 8001268:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	3301      	adds	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3b5      	bcc.n	8001218 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	687e      	ldr	r6, [r7, #4]
 80012b4:	466d      	mov	r5, sp
 80012b6:	f106 0410 	add.w	r4, r6, #16
 80012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	602b      	str	r3, [r5, #0]
 80012c2:	1d33      	adds	r3, r6, #4
 80012c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f002 f840 	bl	800334c <USB_DevInit>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2202      	movs	r2, #2
 80012d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00d      	b.n	80012fa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f84a 	bl	800338c <USB_DevDisconnect>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001304 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_PWR_EnableBkUpAccess+0x14>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	420e0020 	.word	0x420e0020

0800131c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e26c      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8087 	beq.w	800144a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800133c:	4b92      	ldr	r3, [pc, #584]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b04      	cmp	r3, #4
 8001346:	d00c      	beq.n	8001362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001348:	4b8f      	ldr	r3, [pc, #572]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b08      	cmp	r3, #8
 8001352:	d112      	bne.n	800137a <HAL_RCC_OscConfig+0x5e>
 8001354:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d10b      	bne.n	800137a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001362:	4b89      	ldr	r3, [pc, #548]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d06c      	beq.n	8001448 <HAL_RCC_OscConfig+0x12c>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d168      	bne.n	8001448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e246      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x76>
 8001384:	4b80      	ldr	r3, [pc, #512]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a7f      	ldr	r2, [pc, #508]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 800138a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	e02e      	b.n	80013f0 <HAL_RCC_OscConfig+0xd4>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x98>
 800139a:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a7a      	ldr	r2, [pc, #488]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b78      	ldr	r3, [pc, #480]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a77      	ldr	r2, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e01d      	b.n	80013f0 <HAL_RCC_OscConfig+0xd4>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0xbc>
 80013be:	4b72      	ldr	r3, [pc, #456]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a71      	ldr	r2, [pc, #452]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b6f      	ldr	r3, [pc, #444]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6e      	ldr	r2, [pc, #440]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0xd4>
 80013d8:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a6a      	ldr	r2, [pc, #424]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a67      	ldr	r2, [pc, #412]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb2a 	bl	8000a50 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fb26 	bl	8000a50 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1fa      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0xe4>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb16 	bl	8000a50 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fb12 	bl	8000a50 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1e6      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x10c>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001456:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b08      	cmp	r3, #8
 800146c:	d11c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x18c>
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_RCC_OscConfig+0x176>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1ba      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4939      	ldr	r1, [pc, #228]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	e03a      	b.n	800151e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b0:	4b36      	ldr	r3, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff facb 	bl	8000a50 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fac7 	bl	8000a50 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e19b      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4927      	ldr	r1, [pc, #156]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff faaa 	bl	8000a50 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff faa6 	bl	8000a50 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e17a      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d03a      	beq.n	80015a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d019      	beq.n	8001566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_RCC_OscConfig+0x274>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fa8a 	bl	8000a50 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fa86 	bl	8000a50 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e15a      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_RCC_OscConfig+0x26c>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f000 fada 	bl	8001b18 <RCC_Delay>
 8001564:	e01c      	b.n	80015a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_RCC_OscConfig+0x274>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff fa70 	bl	8000a50 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001572:	e00f      	b.n	8001594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fa6c 	bl	8000a50 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d908      	bls.n	8001594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e140      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	42420000 	.word	0x42420000
 8001590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e9      	bne.n	8001574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a6 	beq.w	80016fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b2:	4b97      	ldr	r3, [pc, #604]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10d      	bne.n	80015da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b94      	ldr	r3, [pc, #592]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a93      	ldr	r2, [pc, #588]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b91      	ldr	r3, [pc, #580]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	4b8e      	ldr	r3, [pc, #568]	; (8001814 <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d118      	bne.n	8001618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x4f8>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa2d 	bl	8000a50 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fa:	f7ff fa29 	bl	8000a50 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b64      	cmp	r3, #100	; 0x64
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0fd      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x4f8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x312>
 8001620:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e02d      	b.n	800168a <HAL_RCC_OscConfig+0x36e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x334>
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a75      	ldr	r2, [pc, #468]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b73      	ldr	r3, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a72      	ldr	r2, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	e01c      	b.n	800168a <HAL_RCC_OscConfig+0x36e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d10c      	bne.n	8001672 <HAL_RCC_OscConfig+0x356>
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a6c      	ldr	r2, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a69      	ldr	r2, [pc, #420]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e00b      	b.n	800168a <HAL_RCC_OscConfig+0x36e>
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a66      	ldr	r2, [pc, #408]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b64      	ldr	r3, [pc, #400]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a63      	ldr	r2, [pc, #396]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d015      	beq.n	80016be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff f9dd 	bl	8000a50 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7ff f9d9 	bl	8000a50 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e0ab      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	4b57      	ldr	r3, [pc, #348]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ee      	beq.n	800169a <HAL_RCC_OscConfig+0x37e>
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff f9c7 	bl	8000a50 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff f9c3 	bl	8000a50 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e095      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1ee      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d105      	bne.n	80016fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ee:	4b48      	ldr	r3, [pc, #288]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a47      	ldr	r2, [pc, #284]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8081 	beq.w	8001806 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001704:	4b42      	ldr	r3, [pc, #264]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d061      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d146      	bne.n	80017a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x4fc>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff f997 	bl	8000a50 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff f993 	bl	8000a50 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e067      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d108      	bne.n	8001760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	492d      	ldr	r1, [pc, #180]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a19      	ldr	r1, [r3, #32]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	430b      	orrs	r3, r1
 8001772:	4927      	ldr	r1, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x4fc>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff f967 	bl	8000a50 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff f963 	bl	8000a50 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e037      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x46a>
 80017a4:	e02f      	b.n	8001806 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_RCC_OscConfig+0x4fc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f950 	bl	8000a50 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f94c 	bl	8000a50 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e020      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x498>
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e013      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40007000 	.word	0x40007000
 8001818:	42420060 	.word	0x42420060

0800181c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0d0      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d910      	bls.n	8001860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0207 	bic.w	r2, r3, #7
 8001846:	4965      	ldr	r1, [pc, #404]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800189a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d040      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d115      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e073      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06b      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4936      	ldr	r1, [pc, #216]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff f8a0 	bl	8000a50 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff f89c 	bl	8000a50 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e053      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d210      	bcs.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4922      	ldr	r1, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1cc>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1d0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fffe 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08003cb8 	.word	0x08003cb8
 80019e8:	20000004 	.word	0x20000004
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b490      	push	{r4, r7}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019f8:	1d3c      	adds	r4, r7, #4
 80019fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a00:	f240 2301 	movw	r3, #513	; 0x201
 8001a04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x40>
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x46>
 8001a2e:	e02d      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a32:	623b      	str	r3, [r7, #32]
      break;
 8001a34:	e02d      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	0c9b      	lsrs	r3, r3, #18
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a42:	4413      	add	r3, r2
 8001a44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0c5b      	lsrs	r3, r3, #17
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a62:	4413      	add	r3, r2
 8001a64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6e:	fb02 f203 	mul.w	r2, r2, r3
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	e004      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	623b      	str	r3, [r7, #32]
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a8e:	623b      	str	r3, [r7, #32]
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	6a3b      	ldr	r3, [r7, #32]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc90      	pop	{r4, r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	08003c98 	.word	0x08003c98
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	003d0900 	.word	0x003d0900
 8001ab0:	007a1200 	.word	0x007a1200

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff2 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08003cc8 	.word	0x08003cc8

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0adb      	lsrs	r3, r3, #11
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08003cc8 	.word	0x08003cc8

08001b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <RCC_Delay+0x34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <RCC_Delay+0x38>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0a5b      	lsrs	r3, r3, #9
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b34:	bf00      	nop
  }
  while (Delay --);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	60fa      	str	r2, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <RCC_Delay+0x1c>
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	10624dd3 	.word	0x10624dd3

08001b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d07d      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	4a4b      	ldr	r2, [pc, #300]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	61d3      	str	r3, [r2, #28]
 8001b8c:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d118      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba8:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a42      	ldr	r2, [pc, #264]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb4:	f7fe ff4c 	bl	8000a50 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	e008      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7fe ff48 	bl	8000a50 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e06d      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d02e      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d027      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c0e:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d014      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7fe ff17 	bl	8000a50 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7fe ff13 	bl	8000a50 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e036      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4917      	ldr	r1, [pc, #92]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	490b      	ldr	r1, [pc, #44]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420440 	.word	0x42420440

08001cc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b08d      	sub	sp, #52	; 0x34
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001cca:	f107 040c 	add.w	r4, r7, #12
 8001cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cd4:	f240 2301 	movw	r3, #513	; 0x201
 8001cd8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	f200 8090 	bhi.w	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d04c      	beq.n	8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d07b      	beq.n	8001e00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d08:	e088      	b.n	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8081 	beq.w	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d30:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d018      	beq.n	8001d6e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c5b      	lsrs	r3, r3, #17
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00d      	beq.n	8001d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d5c:	4a36      	ldr	r2, [pc, #216]	; (8001e38 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6c:	e004      	b.n	8001d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d84:	d102      	bne.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d8a:	e049      	b.n	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          frequency = (pllclk * 2) / 3;
 8001d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d9a:	e041      	b.n	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      temp_reg = RCC->BDCR;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	e01e      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dca:	d109      	bne.n	8001de0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001dd8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dde:	e00e      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dea:	d11b      	bne.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        frequency = HSE_VALUE / 128U;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001dfc:	e012      	b.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8001dfe:	e011      	b.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e00:	f7ff fe76 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0b9b      	lsrs	r3, r3, #14
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	3301      	adds	r3, #1
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e1a:	e004      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e002      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8001e24:	bf00      	nop
    }
  }
  return (frequency);
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3734      	adds	r7, #52	; 0x34
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	08003ca8 	.word	0x08003ca8
 8001e34:	40021000 	.word	0x40021000
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	003d0900 	.word	0x003d0900
 8001e40:	aaaaaaab 	.word	0xaaaaaaab
 8001e44:	0001e848 	.word	0x0001e848

08001e48 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e084      	b.n	8001f68 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7c5b      	ldrb	r3, [r3, #17]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fbf6 	bl	8000660 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f87a 	bl	8001f74 <HAL_RTC_WaitForSynchro>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e06b      	b.n	8001f68 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f89c 	bl	8001fce <RTC_EnterInitMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e060      	b.n	8001f68 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0207 	bic.w	r2, r2, #7
 8001eb4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_RTC_Init+0x128>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_RTC_Init+0x128>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RTC_Init+0x128>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4926      	ldr	r1, [pc, #152]	; (8001f70 <HAL_RTC_Init+0x128>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d003      	beq.n	8001eee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e00e      	b.n	8001f0c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff fee6 	bl	8001cc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ef4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d104      	bne.n	8001f06 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2204      	movs	r2, #4
 8001f00:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e030      	b.n	8001f68 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 010f 	bic.w	r1, r3, #15
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0c1a      	lsrs	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b291      	uxth	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f870 	bl	800201e <RTC_ExitInitMode>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00c      	b.n	8001f68 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40006c00 	.word	0x40006c00

08001f74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01d      	b.n	8001fc6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0208 	bic.w	r2, r2, #8
 8001f98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f9a:	f7fe fd59 	bl	8000a50 <HAL_GetTick>
 8001f9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fa0:	e009      	b.n	8001fb6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fa2:	f7fe fd55 	bl	8000a50 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e007      	b.n	8001fc6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ee      	beq.n	8001fa2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001fda:	f7fe fd39 	bl	8000a50 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fe0:	e009      	b.n	8001ff6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fe2:	f7fe fd35 	bl	8000a50 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ff0:	d901      	bls.n	8001ff6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e00f      	b.n	8002016 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ee      	beq.n	8001fe2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0210 	orr.w	r2, r2, #16
 8002012:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0210 	bic.w	r2, r2, #16
 8002038:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800203a:	f7fe fd09 	bl	8000a50 <HAL_GetTick>
 800203e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002040:	e009      	b.n	8002056 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002042:	f7fe fd05 	bl	8000a50 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002050:	d901      	bls.n	8002056 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e007      	b.n	8002066 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e076      	b.n	800216e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b00      	cmp	r3, #0
 8002086:	d108      	bne.n	800209a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002090:	d009      	beq.n	80020a6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
 8002098:	e005      	b.n	80020a6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe faf1 	bl	80006a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	ea42 0103 	orr.w	r1, r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	0c1a      	lsrs	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f002 0204 	and.w	r2, r2, #4
 800214c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b08c      	sub	sp, #48	; 0x30
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002184:	2301      	movs	r3, #1
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_SPI_TransmitReceive+0x26>
 8002198:	2302      	movs	r3, #2
 800219a:	e18a      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x33c>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a4:	f7fe fc54 	bl	8000a50 <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d00f      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x70>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021cc:	d107      	bne.n	80021de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <HAL_SPI_TransmitReceive+0x68>
 80021d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d003      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021e4:	e15b      	b.n	800249e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0x82>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0x82>
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021fe:	e14e      	b.n	800249e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b04      	cmp	r3, #4
 800220a:	d003      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	887a      	ldrh	r2, [r7, #2]
 800222a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	887a      	ldrh	r2, [r7, #2]
 8002236:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d007      	beq.n	8002268 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002270:	d178      	bne.n	8002364 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x10a>
 800227a:	8b7b      	ldrh	r3, [r7, #26]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d166      	bne.n	800234e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	1c9a      	adds	r2, r3, #2
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022a4:	e053      	b.n	800234e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d11b      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x176>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x176>
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d113      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	881a      	ldrh	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	1c9a      	adds	r2, r3, #2
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d119      	bne.n	800232e <HAL_SPI_TransmitReceive+0x1b8>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d014      	beq.n	800232e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	b292      	uxth	r2, r2
 8002310:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800232a:	2301      	movs	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800232e:	f7fe fb8f 	bl	8000a50 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800233a:	429a      	cmp	r2, r3
 800233c:	d807      	bhi.n	800234e <HAL_SPI_TransmitReceive+0x1d8>
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d003      	beq.n	800234e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800234c:	e0a7      	b.n	800249e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1a6      	bne.n	80022a6 <HAL_SPI_TransmitReceive+0x130>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1a1      	bne.n	80022a6 <HAL_SPI_TransmitReceive+0x130>
 8002362:	e07c      	b.n	800245e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x1fc>
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d16b      	bne.n	800244a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002398:	e057      	b.n	800244a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d11c      	bne.n	80023e2 <HAL_SPI_TransmitReceive+0x26c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d017      	beq.n	80023e2 <HAL_SPI_TransmitReceive+0x26c>
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d114      	bne.n	80023e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d119      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x2ae>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d014      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002424:	f7fe fb14 	bl	8000a50 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002430:	429a      	cmp	r2, r3
 8002432:	d803      	bhi.n	800243c <HAL_SPI_TransmitReceive+0x2c6>
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d102      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2cc>
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002448:	e029      	b.n	800249e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1a2      	bne.n	800239a <HAL_SPI_TransmitReceive+0x224>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d19d      	bne.n	800239a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800245e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f9b6 	bl	80027d4 <SPI_EndRxTxTransaction>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800247a:	e010      	b.n	800249e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	e000      	b.n	800249e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800249c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3730      	adds	r7, #48	; 0x30
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10f      	bne.n	8002500 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
    return;
 80024fe:	e0be      	b.n	800267e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_SPI_IRQHandler+0x66>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	09db      	lsrs	r3, r3, #7
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
    return;
 8002520:	e0ad      	b.n	800267e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_SPI_IRQHandler+0x80>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80a1 	beq.w	800267e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 809a 	beq.w	800267e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d023      	beq.n	800259e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b03      	cmp	r3, #3
 8002560:	d011      	beq.n	8002586 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f043 0204 	orr.w	r2, r3, #4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	e00b      	b.n	800259e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
        return;
 800259c:	e06f      	b.n	800267e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d014      	beq.n	80025d4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d04f      	beq.n	800267c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_SPI_IRQHandler+0x14c>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d034      	beq.n	8002672 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0203 	bic.w	r2, r2, #3
 8002616:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d011      	beq.n	8002644 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_SPI_IRQHandler+0x1c8>)
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fb4b 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002648:	2b00      	cmp	r3, #0
 800264a:	d016      	beq.n	800267a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <HAL_SPI_IRQHandler+0x1c8>)
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fb35 	bl	8000cc8 <HAL_DMA_Abort_IT>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002670:	e003      	b.n	800267a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f808 	bl	8002688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002678:	e000      	b.n	800267c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800267a:	bf00      	nop
    return;
 800267c:	bf00      	nop
  }
}
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800269b 	.word	0x0800269b

08002688 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ffe7 	bl	8002688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d4:	f7fe f9bc 	bl	8000a50 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e4:	f7fe f9b4 	bl	8000a50 <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	015b      	lsls	r3, r3, #5
 80026f0:	0d1b      	lsrs	r3, r3, #20
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fa:	e054      	b.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d050      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002704:	f7fe f9a4 	bl	8000a50 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	d902      	bls.n	800271a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d13d      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002732:	d111      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273c:	d004      	beq.n	8002748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d107      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002760:	d10f      	bne.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e017      	b.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d19b      	bne.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000004 	.word	0x20000004

080027d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff ff6a 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e000      	b.n	8002808 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e041      	b.n	80028a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fd ff88 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f000 fa26 	bl	8002ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d122      	bne.n	800290a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0202 	mvn.w	r2, #2
 80028da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f9ba 	bl	8002c6a <HAL_TIM_IC_CaptureCallback>
 80028f6:	e005      	b.n	8002904 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9ad 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9bc 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d122      	bne.n	800295e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d11b      	bne.n	800295e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0204 	mvn.w	r2, #4
 800292e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f990 	bl	8002c6a <HAL_TIM_IC_CaptureCallback>
 800294a:	e005      	b.n	8002958 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f983 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f992 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b08      	cmp	r3, #8
 800296a:	d122      	bne.n	80029b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11b      	bne.n	80029b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f06f 0208 	mvn.w	r2, #8
 8002982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2204      	movs	r2, #4
 8002988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f966 	bl	8002c6a <HAL_TIM_IC_CaptureCallback>
 800299e:	e005      	b.n	80029ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f959 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f968 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d122      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d11b      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f06f 0210 	mvn.w	r2, #16
 80029d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2208      	movs	r2, #8
 80029dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f93c 	bl	8002c6a <HAL_TIM_IC_CaptureCallback>
 80029f2:	e005      	b.n	8002a00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f92f 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f93e 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10e      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f06f 0201 	mvn.w	r2, #1
 8002a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f90a 	bl	8002c46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d10e      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa80 	bl	8002f5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d10e      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d107      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f902 	bl	8002c8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d10e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0220 	mvn.w	r2, #32
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fa4b 	bl	8002f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_ConfigClockSource+0x18>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0b3      	b.n	8002c3e <HAL_TIM_ConfigClockSource+0x180>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002af4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002afc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	d03e      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xd0>
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b14:	f200 8087 	bhi.w	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	f000 8085 	beq.w	8002c2a <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d87f      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b26:	2b70      	cmp	r3, #112	; 0x70
 8002b28:	d01a      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0xa2>
 8002b2a:	2b70      	cmp	r3, #112	; 0x70
 8002b2c:	d87b      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b2e:	2b60      	cmp	r3, #96	; 0x60
 8002b30:	d050      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0x116>
 8002b32:	2b60      	cmp	r3, #96	; 0x60
 8002b34:	d877      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b36:	2b50      	cmp	r3, #80	; 0x50
 8002b38:	d03c      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0xf6>
 8002b3a:	2b50      	cmp	r3, #80	; 0x50
 8002b3c:	d873      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d058      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0x136>
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d86f      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b46:	2b30      	cmp	r3, #48	; 0x30
 8002b48:	d064      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x156>
 8002b4a:	2b30      	cmp	r3, #48	; 0x30
 8002b4c:	d86b      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d060      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x156>
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d867      	bhi.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d05c      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x156>
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d05a      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b5e:	e062      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f000 f96f 	bl	8002e52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e04e      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 f958 	bl	8002e52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb0:	609a      	str	r2, [r3, #8]
      break;
 8002bb2:	e03b      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f000 f8cf 	bl	8002d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2150      	movs	r1, #80	; 0x50
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f926 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002bd2:	e02b      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f000 f8ed 	bl	8002dc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2160      	movs	r1, #96	; 0x60
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f916 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002bf2:	e01b      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 f8af 	bl	8002d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f906 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002c12:	e00b      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 f8fd 	bl	8002e1e <TIM_ITRx_SetConfig>
        break;
 8002c24:	e002      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <TIM_Base_SetConfig+0xb8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x30>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x30>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <TIM_Base_SetConfig+0xbc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x30>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <TIM_Base_SetConfig+0xb8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_Base_SetConfig+0x62>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0x62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <TIM_Base_SetConfig+0xbc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d108      	bne.n	8002d14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <TIM_Base_SetConfig+0xb8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800

08002d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 030a 	bic.w	r3, r3, #10
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 0210 	bic.w	r2, r3, #16
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	031b      	lsls	r3, r3, #12
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	621a      	str	r2, [r3, #32]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f043 0307 	orr.w	r3, r3, #7
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	021a      	lsls	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e046      	b.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d009      	beq.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10c      	bne.n	8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800

08002f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e03f      	b.n	8003002 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fbfc 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f905 	bl	80031c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b08a      	sub	sp, #40	; 0x28
 800300e:	af02      	add	r7, sp, #8
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	d17c      	bne.n	8003124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_UART_Transmit+0x2c>
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e075      	b.n	8003126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_UART_Transmit+0x3e>
 8003044:	2302      	movs	r3, #2
 8003046:	e06e      	b.n	8003126 <HAL_UART_Transmit+0x11c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2221      	movs	r2, #33	; 0x21
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305e:	f7fd fcf7 	bl	8000a50 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d108      	bne.n	800308c <HAL_UART_Transmit+0x82>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	e003      	b.n	8003094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800309c:	e02a      	b.n	80030f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f840 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e036      	b.n	8003126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3302      	adds	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e007      	b.n	80030e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3301      	adds	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1cf      	bne.n	800309e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2140      	movs	r1, #64	; 0x40
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f810 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e006      	b.n	8003126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313e:	e02c      	b.n	800319a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d028      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x30>
 800314e:	f7fd fc7f 	bl	8000a50 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	429a      	cmp	r2, r3
 800315c:	d21d      	bcs.n	800319a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800316c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e00f      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d0c3      	beq.n	8003140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031fe:	f023 030c 	bic.w	r3, r3, #12
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	430b      	orrs	r3, r1
 800320a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <UART_SetConfig+0x114>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7fe fc60 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	e002      	b.n	800323a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7fe fc48 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8003238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009a      	lsls	r2, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	4a22      	ldr	r2, [pc, #136]	; (80032dc <UART_SetConfig+0x118>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	0119      	lsls	r1, r3, #4
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <UART_SetConfig+0x118>)
 8003272:	fba3 0302 	umull	r0, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2064      	movs	r0, #100	; 0x64
 800327a:	fb00 f303 	mul.w	r3, r0, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	3332      	adds	r3, #50	; 0x32
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <UART_SetConfig+0x118>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003290:	4419      	add	r1, r3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <UART_SetConfig+0x118>)
 80032aa:	fba3 0302 	umull	r0, r3, r3, r2
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2064      	movs	r0, #100	; 0x64
 80032b2:	fb00 f303 	mul.w	r3, r0, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	3332      	adds	r3, #50	; 0x32
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <UART_SetConfig+0x118>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	440a      	add	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40013800 	.word	0x40013800
 80032dc:	51eb851f 	.word	0x51eb851f

080032e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032e0:	b084      	sub	sp, #16
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	f107 0014 	add.w	r0, r7, #20
 80032ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	b004      	add	sp, #16
 80032fe:	4770      	bx	lr

08003300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003308:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800330c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	b29b      	uxth	r3, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	b29b      	uxth	r3, r3
 800331e:	4013      	ands	r3, r2
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800334c:	b084      	sub	sp, #16
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	f107 0014 	add.w	r0, r7, #20
 800335a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	b004      	add	sp, #16
 800338a:	4770      	bx	lr

0800338c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000010 	.word	0x20000010

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	2600      	movs	r6, #0
 80033b0:	4d0c      	ldr	r5, [pc, #48]	; (80033e4 <__libc_init_array+0x38>)
 80033b2:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	f000 fc5c 	bl	8003c78 <_init>
 80033c0:	2600      	movs	r6, #0
 80033c2:	4d0a      	ldr	r5, [pc, #40]	; (80033ec <__libc_init_array+0x40>)
 80033c4:	4c0a      	ldr	r4, [pc, #40]	; (80033f0 <__libc_init_array+0x44>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08003d04 	.word	0x08003d04
 80033e8:	08003d04 	.word	0x08003d04
 80033ec:	08003d04 	.word	0x08003d04
 80033f0:	08003d08 	.word	0x08003d08

080033f4 <memset>:
 80033f4:	4603      	mov	r3, r0
 80033f6:	4402      	add	r2, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <siprintf>:
 8003404:	b40e      	push	{r1, r2, r3}
 8003406:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800340a:	b500      	push	{lr}
 800340c:	b09c      	sub	sp, #112	; 0x70
 800340e:	ab1d      	add	r3, sp, #116	; 0x74
 8003410:	9002      	str	r0, [sp, #8]
 8003412:	9006      	str	r0, [sp, #24]
 8003414:	9107      	str	r1, [sp, #28]
 8003416:	9104      	str	r1, [sp, #16]
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <siprintf+0x38>)
 800341a:	4909      	ldr	r1, [pc, #36]	; (8003440 <siprintf+0x3c>)
 800341c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	6800      	ldr	r0, [r0, #0]
 8003424:	a902      	add	r1, sp, #8
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	f000 f868 	bl	80034fc <_svfiprintf_r>
 800342c:	2200      	movs	r2, #0
 800342e:	9b02      	ldr	r3, [sp, #8]
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	b01c      	add	sp, #112	; 0x70
 8003434:	f85d eb04 	ldr.w	lr, [sp], #4
 8003438:	b003      	add	sp, #12
 800343a:	4770      	bx	lr
 800343c:	20000010 	.word	0x20000010
 8003440:	ffff0208 	.word	0xffff0208

08003444 <__ssputs_r>:
 8003444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	688e      	ldr	r6, [r1, #8]
 800344a:	4682      	mov	sl, r0
 800344c:	429e      	cmp	r6, r3
 800344e:	460c      	mov	r4, r1
 8003450:	4690      	mov	r8, r2
 8003452:	461f      	mov	r7, r3
 8003454:	d838      	bhi.n	80034c8 <__ssputs_r+0x84>
 8003456:	898a      	ldrh	r2, [r1, #12]
 8003458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800345c:	d032      	beq.n	80034c4 <__ssputs_r+0x80>
 800345e:	6825      	ldr	r5, [r4, #0]
 8003460:	6909      	ldr	r1, [r1, #16]
 8003462:	3301      	adds	r3, #1
 8003464:	eba5 0901 	sub.w	r9, r5, r1
 8003468:	6965      	ldr	r5, [r4, #20]
 800346a:	444b      	add	r3, r9
 800346c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003474:	106d      	asrs	r5, r5, #1
 8003476:	429d      	cmp	r5, r3
 8003478:	bf38      	it	cc
 800347a:	461d      	movcc	r5, r3
 800347c:	0553      	lsls	r3, r2, #21
 800347e:	d531      	bpl.n	80034e4 <__ssputs_r+0xa0>
 8003480:	4629      	mov	r1, r5
 8003482:	f000 fb53 	bl	8003b2c <_malloc_r>
 8003486:	4606      	mov	r6, r0
 8003488:	b950      	cbnz	r0, 80034a0 <__ssputs_r+0x5c>
 800348a:	230c      	movs	r3, #12
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	f8ca 3000 	str.w	r3, [sl]
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349a:	81a3      	strh	r3, [r4, #12]
 800349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a0:	464a      	mov	r2, r9
 80034a2:	6921      	ldr	r1, [r4, #16]
 80034a4:	f000 face 	bl	8003a44 <memcpy>
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	6126      	str	r6, [r4, #16]
 80034b6:	444e      	add	r6, r9
 80034b8:	6026      	str	r6, [r4, #0]
 80034ba:	463e      	mov	r6, r7
 80034bc:	6165      	str	r5, [r4, #20]
 80034be:	eba5 0509 	sub.w	r5, r5, r9
 80034c2:	60a5      	str	r5, [r4, #8]
 80034c4:	42be      	cmp	r6, r7
 80034c6:	d900      	bls.n	80034ca <__ssputs_r+0x86>
 80034c8:	463e      	mov	r6, r7
 80034ca:	4632      	mov	r2, r6
 80034cc:	4641      	mov	r1, r8
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f000 fac6 	bl	8003a60 <memmove>
 80034d4:	68a3      	ldr	r3, [r4, #8]
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	1b9b      	subs	r3, r3, r6
 80034da:	4432      	add	r2, r6
 80034dc:	2000      	movs	r0, #0
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	6022      	str	r2, [r4, #0]
 80034e2:	e7db      	b.n	800349c <__ssputs_r+0x58>
 80034e4:	462a      	mov	r2, r5
 80034e6:	f000 fb7b 	bl	8003be0 <_realloc_r>
 80034ea:	4606      	mov	r6, r0
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d1e1      	bne.n	80034b4 <__ssputs_r+0x70>
 80034f0:	4650      	mov	r0, sl
 80034f2:	6921      	ldr	r1, [r4, #16]
 80034f4:	f000 face 	bl	8003a94 <_free_r>
 80034f8:	e7c7      	b.n	800348a <__ssputs_r+0x46>
	...

080034fc <_svfiprintf_r>:
 80034fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003500:	4698      	mov	r8, r3
 8003502:	898b      	ldrh	r3, [r1, #12]
 8003504:	4607      	mov	r7, r0
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	460d      	mov	r5, r1
 800350a:	4614      	mov	r4, r2
 800350c:	b09d      	sub	sp, #116	; 0x74
 800350e:	d50e      	bpl.n	800352e <_svfiprintf_r+0x32>
 8003510:	690b      	ldr	r3, [r1, #16]
 8003512:	b963      	cbnz	r3, 800352e <_svfiprintf_r+0x32>
 8003514:	2140      	movs	r1, #64	; 0x40
 8003516:	f000 fb09 	bl	8003b2c <_malloc_r>
 800351a:	6028      	str	r0, [r5, #0]
 800351c:	6128      	str	r0, [r5, #16]
 800351e:	b920      	cbnz	r0, 800352a <_svfiprintf_r+0x2e>
 8003520:	230c      	movs	r3, #12
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	e0d1      	b.n	80036ce <_svfiprintf_r+0x1d2>
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	616b      	str	r3, [r5, #20]
 800352e:	2300      	movs	r3, #0
 8003530:	9309      	str	r3, [sp, #36]	; 0x24
 8003532:	2320      	movs	r3, #32
 8003534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003538:	2330      	movs	r3, #48	; 0x30
 800353a:	f04f 0901 	mov.w	r9, #1
 800353e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036e8 <_svfiprintf_r+0x1ec>
 8003546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800354a:	4623      	mov	r3, r4
 800354c:	469a      	mov	sl, r3
 800354e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003552:	b10a      	cbz	r2, 8003558 <_svfiprintf_r+0x5c>
 8003554:	2a25      	cmp	r2, #37	; 0x25
 8003556:	d1f9      	bne.n	800354c <_svfiprintf_r+0x50>
 8003558:	ebba 0b04 	subs.w	fp, sl, r4
 800355c:	d00b      	beq.n	8003576 <_svfiprintf_r+0x7a>
 800355e:	465b      	mov	r3, fp
 8003560:	4622      	mov	r2, r4
 8003562:	4629      	mov	r1, r5
 8003564:	4638      	mov	r0, r7
 8003566:	f7ff ff6d 	bl	8003444 <__ssputs_r>
 800356a:	3001      	adds	r0, #1
 800356c:	f000 80aa 	beq.w	80036c4 <_svfiprintf_r+0x1c8>
 8003570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003572:	445a      	add	r2, fp
 8003574:	9209      	str	r2, [sp, #36]	; 0x24
 8003576:	f89a 3000 	ldrb.w	r3, [sl]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a2 	beq.w	80036c4 <_svfiprintf_r+0x1c8>
 8003580:	2300      	movs	r3, #0
 8003582:	f04f 32ff 	mov.w	r2, #4294967295
 8003586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800358a:	f10a 0a01 	add.w	sl, sl, #1
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	9307      	str	r3, [sp, #28]
 8003592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003596:	931a      	str	r3, [sp, #104]	; 0x68
 8003598:	4654      	mov	r4, sl
 800359a:	2205      	movs	r2, #5
 800359c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a0:	4851      	ldr	r0, [pc, #324]	; (80036e8 <_svfiprintf_r+0x1ec>)
 80035a2:	f000 fa41 	bl	8003a28 <memchr>
 80035a6:	9a04      	ldr	r2, [sp, #16]
 80035a8:	b9d8      	cbnz	r0, 80035e2 <_svfiprintf_r+0xe6>
 80035aa:	06d0      	lsls	r0, r2, #27
 80035ac:	bf44      	itt	mi
 80035ae:	2320      	movmi	r3, #32
 80035b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035b4:	0711      	lsls	r1, r2, #28
 80035b6:	bf44      	itt	mi
 80035b8:	232b      	movmi	r3, #43	; 0x2b
 80035ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035be:	f89a 3000 	ldrb.w	r3, [sl]
 80035c2:	2b2a      	cmp	r3, #42	; 0x2a
 80035c4:	d015      	beq.n	80035f2 <_svfiprintf_r+0xf6>
 80035c6:	4654      	mov	r4, sl
 80035c8:	2000      	movs	r0, #0
 80035ca:	f04f 0c0a 	mov.w	ip, #10
 80035ce:	9a07      	ldr	r2, [sp, #28]
 80035d0:	4621      	mov	r1, r4
 80035d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035d6:	3b30      	subs	r3, #48	; 0x30
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d94e      	bls.n	800367a <_svfiprintf_r+0x17e>
 80035dc:	b1b0      	cbz	r0, 800360c <_svfiprintf_r+0x110>
 80035de:	9207      	str	r2, [sp, #28]
 80035e0:	e014      	b.n	800360c <_svfiprintf_r+0x110>
 80035e2:	eba0 0308 	sub.w	r3, r0, r8
 80035e6:	fa09 f303 	lsl.w	r3, r9, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	46a2      	mov	sl, r4
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	e7d2      	b.n	8003598 <_svfiprintf_r+0x9c>
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	9103      	str	r1, [sp, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bfbb      	ittet	lt
 80035fe:	425b      	neglt	r3, r3
 8003600:	f042 0202 	orrlt.w	r2, r2, #2
 8003604:	9307      	strge	r3, [sp, #28]
 8003606:	9307      	strlt	r3, [sp, #28]
 8003608:	bfb8      	it	lt
 800360a:	9204      	strlt	r2, [sp, #16]
 800360c:	7823      	ldrb	r3, [r4, #0]
 800360e:	2b2e      	cmp	r3, #46	; 0x2e
 8003610:	d10c      	bne.n	800362c <_svfiprintf_r+0x130>
 8003612:	7863      	ldrb	r3, [r4, #1]
 8003614:	2b2a      	cmp	r3, #42	; 0x2a
 8003616:	d135      	bne.n	8003684 <_svfiprintf_r+0x188>
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	3402      	adds	r4, #2
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9203      	str	r2, [sp, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	bfb8      	it	lt
 8003626:	f04f 33ff 	movlt.w	r3, #4294967295
 800362a:	9305      	str	r3, [sp, #20]
 800362c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036f8 <_svfiprintf_r+0x1fc>
 8003630:	2203      	movs	r2, #3
 8003632:	4650      	mov	r0, sl
 8003634:	7821      	ldrb	r1, [r4, #0]
 8003636:	f000 f9f7 	bl	8003a28 <memchr>
 800363a:	b140      	cbz	r0, 800364e <_svfiprintf_r+0x152>
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	eba0 000a 	sub.w	r0, r0, sl
 8003642:	fa03 f000 	lsl.w	r0, r3, r0
 8003646:	9b04      	ldr	r3, [sp, #16]
 8003648:	3401      	adds	r4, #1
 800364a:	4303      	orrs	r3, r0
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003652:	2206      	movs	r2, #6
 8003654:	4825      	ldr	r0, [pc, #148]	; (80036ec <_svfiprintf_r+0x1f0>)
 8003656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365a:	f000 f9e5 	bl	8003a28 <memchr>
 800365e:	2800      	cmp	r0, #0
 8003660:	d038      	beq.n	80036d4 <_svfiprintf_r+0x1d8>
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <_svfiprintf_r+0x1f4>)
 8003664:	bb1b      	cbnz	r3, 80036ae <_svfiprintf_r+0x1b2>
 8003666:	9b03      	ldr	r3, [sp, #12]
 8003668:	3307      	adds	r3, #7
 800366a:	f023 0307 	bic.w	r3, r3, #7
 800366e:	3308      	adds	r3, #8
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003674:	4433      	add	r3, r6
 8003676:	9309      	str	r3, [sp, #36]	; 0x24
 8003678:	e767      	b.n	800354a <_svfiprintf_r+0x4e>
 800367a:	460c      	mov	r4, r1
 800367c:	2001      	movs	r0, #1
 800367e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003682:	e7a5      	b.n	80035d0 <_svfiprintf_r+0xd4>
 8003684:	2300      	movs	r3, #0
 8003686:	f04f 0c0a 	mov.w	ip, #10
 800368a:	4619      	mov	r1, r3
 800368c:	3401      	adds	r4, #1
 800368e:	9305      	str	r3, [sp, #20]
 8003690:	4620      	mov	r0, r4
 8003692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003696:	3a30      	subs	r2, #48	; 0x30
 8003698:	2a09      	cmp	r2, #9
 800369a:	d903      	bls.n	80036a4 <_svfiprintf_r+0x1a8>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0c5      	beq.n	800362c <_svfiprintf_r+0x130>
 80036a0:	9105      	str	r1, [sp, #20]
 80036a2:	e7c3      	b.n	800362c <_svfiprintf_r+0x130>
 80036a4:	4604      	mov	r4, r0
 80036a6:	2301      	movs	r3, #1
 80036a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80036ac:	e7f0      	b.n	8003690 <_svfiprintf_r+0x194>
 80036ae:	ab03      	add	r3, sp, #12
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	462a      	mov	r2, r5
 80036b4:	4638      	mov	r0, r7
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <_svfiprintf_r+0x1f8>)
 80036b8:	a904      	add	r1, sp, #16
 80036ba:	f3af 8000 	nop.w
 80036be:	1c42      	adds	r2, r0, #1
 80036c0:	4606      	mov	r6, r0
 80036c2:	d1d6      	bne.n	8003672 <_svfiprintf_r+0x176>
 80036c4:	89ab      	ldrh	r3, [r5, #12]
 80036c6:	065b      	lsls	r3, r3, #25
 80036c8:	f53f af2c 	bmi.w	8003524 <_svfiprintf_r+0x28>
 80036cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ce:	b01d      	add	sp, #116	; 0x74
 80036d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d4:	ab03      	add	r3, sp, #12
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	462a      	mov	r2, r5
 80036da:	4638      	mov	r0, r7
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <_svfiprintf_r+0x1f8>)
 80036de:	a904      	add	r1, sp, #16
 80036e0:	f000 f87c 	bl	80037dc <_printf_i>
 80036e4:	e7eb      	b.n	80036be <_svfiprintf_r+0x1c2>
 80036e6:	bf00      	nop
 80036e8:	08003cd0 	.word	0x08003cd0
 80036ec:	08003cda 	.word	0x08003cda
 80036f0:	00000000 	.word	0x00000000
 80036f4:	08003445 	.word	0x08003445
 80036f8:	08003cd6 	.word	0x08003cd6

080036fc <_printf_common>:
 80036fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003700:	4616      	mov	r6, r2
 8003702:	4699      	mov	r9, r3
 8003704:	688a      	ldr	r2, [r1, #8]
 8003706:	690b      	ldr	r3, [r1, #16]
 8003708:	4607      	mov	r7, r0
 800370a:	4293      	cmp	r3, r2
 800370c:	bfb8      	it	lt
 800370e:	4613      	movlt	r3, r2
 8003710:	6033      	str	r3, [r6, #0]
 8003712:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003716:	460c      	mov	r4, r1
 8003718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800371c:	b10a      	cbz	r2, 8003722 <_printf_common+0x26>
 800371e:	3301      	adds	r3, #1
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	0699      	lsls	r1, r3, #26
 8003726:	bf42      	ittt	mi
 8003728:	6833      	ldrmi	r3, [r6, #0]
 800372a:	3302      	addmi	r3, #2
 800372c:	6033      	strmi	r3, [r6, #0]
 800372e:	6825      	ldr	r5, [r4, #0]
 8003730:	f015 0506 	ands.w	r5, r5, #6
 8003734:	d106      	bne.n	8003744 <_printf_common+0x48>
 8003736:	f104 0a19 	add.w	sl, r4, #25
 800373a:	68e3      	ldr	r3, [r4, #12]
 800373c:	6832      	ldr	r2, [r6, #0]
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	42ab      	cmp	r3, r5
 8003742:	dc28      	bgt.n	8003796 <_printf_common+0x9a>
 8003744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003748:	1e13      	subs	r3, r2, #0
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	bf18      	it	ne
 800374e:	2301      	movne	r3, #1
 8003750:	0692      	lsls	r2, r2, #26
 8003752:	d42d      	bmi.n	80037b0 <_printf_common+0xb4>
 8003754:	4649      	mov	r1, r9
 8003756:	4638      	mov	r0, r7
 8003758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375c:	47c0      	blx	r8
 800375e:	3001      	adds	r0, #1
 8003760:	d020      	beq.n	80037a4 <_printf_common+0xa8>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	68e5      	ldr	r5, [r4, #12]
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	2b04      	cmp	r3, #4
 800376c:	bf18      	it	ne
 800376e:	2500      	movne	r5, #0
 8003770:	6832      	ldr	r2, [r6, #0]
 8003772:	f04f 0600 	mov.w	r6, #0
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	bf08      	it	eq
 800377a:	1aad      	subeq	r5, r5, r2
 800377c:	6922      	ldr	r2, [r4, #16]
 800377e:	bf08      	it	eq
 8003780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003784:	4293      	cmp	r3, r2
 8003786:	bfc4      	itt	gt
 8003788:	1a9b      	subgt	r3, r3, r2
 800378a:	18ed      	addgt	r5, r5, r3
 800378c:	341a      	adds	r4, #26
 800378e:	42b5      	cmp	r5, r6
 8003790:	d11a      	bne.n	80037c8 <_printf_common+0xcc>
 8003792:	2000      	movs	r0, #0
 8003794:	e008      	b.n	80037a8 <_printf_common+0xac>
 8003796:	2301      	movs	r3, #1
 8003798:	4652      	mov	r2, sl
 800379a:	4649      	mov	r1, r9
 800379c:	4638      	mov	r0, r7
 800379e:	47c0      	blx	r8
 80037a0:	3001      	adds	r0, #1
 80037a2:	d103      	bne.n	80037ac <_printf_common+0xb0>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ac:	3501      	adds	r5, #1
 80037ae:	e7c4      	b.n	800373a <_printf_common+0x3e>
 80037b0:	2030      	movs	r0, #48	; 0x30
 80037b2:	18e1      	adds	r1, r4, r3
 80037b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037be:	4422      	add	r2, r4
 80037c0:	3302      	adds	r3, #2
 80037c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c6:	e7c5      	b.n	8003754 <_printf_common+0x58>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4622      	mov	r2, r4
 80037cc:	4649      	mov	r1, r9
 80037ce:	4638      	mov	r0, r7
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d0e6      	beq.n	80037a4 <_printf_common+0xa8>
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7d9      	b.n	800378e <_printf_common+0x92>
	...

080037dc <_printf_i>:
 80037dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e0:	460c      	mov	r4, r1
 80037e2:	7e27      	ldrb	r7, [r4, #24]
 80037e4:	4691      	mov	r9, r2
 80037e6:	2f78      	cmp	r7, #120	; 0x78
 80037e8:	4680      	mov	r8, r0
 80037ea:	469a      	mov	sl, r3
 80037ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f2:	d807      	bhi.n	8003804 <_printf_i+0x28>
 80037f4:	2f62      	cmp	r7, #98	; 0x62
 80037f6:	d80a      	bhi.n	800380e <_printf_i+0x32>
 80037f8:	2f00      	cmp	r7, #0
 80037fa:	f000 80d9 	beq.w	80039b0 <_printf_i+0x1d4>
 80037fe:	2f58      	cmp	r7, #88	; 0x58
 8003800:	f000 80a4 	beq.w	800394c <_printf_i+0x170>
 8003804:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800380c:	e03a      	b.n	8003884 <_printf_i+0xa8>
 800380e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003812:	2b15      	cmp	r3, #21
 8003814:	d8f6      	bhi.n	8003804 <_printf_i+0x28>
 8003816:	a001      	add	r0, pc, #4	; (adr r0, 800381c <_printf_i+0x40>)
 8003818:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800381c:	08003875 	.word	0x08003875
 8003820:	08003889 	.word	0x08003889
 8003824:	08003805 	.word	0x08003805
 8003828:	08003805 	.word	0x08003805
 800382c:	08003805 	.word	0x08003805
 8003830:	08003805 	.word	0x08003805
 8003834:	08003889 	.word	0x08003889
 8003838:	08003805 	.word	0x08003805
 800383c:	08003805 	.word	0x08003805
 8003840:	08003805 	.word	0x08003805
 8003844:	08003805 	.word	0x08003805
 8003848:	08003997 	.word	0x08003997
 800384c:	080038b9 	.word	0x080038b9
 8003850:	08003979 	.word	0x08003979
 8003854:	08003805 	.word	0x08003805
 8003858:	08003805 	.word	0x08003805
 800385c:	080039b9 	.word	0x080039b9
 8003860:	08003805 	.word	0x08003805
 8003864:	080038b9 	.word	0x080038b9
 8003868:	08003805 	.word	0x08003805
 800386c:	08003805 	.word	0x08003805
 8003870:	08003981 	.word	0x08003981
 8003874:	680b      	ldr	r3, [r1, #0]
 8003876:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	600a      	str	r2, [r1, #0]
 8003880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003884:	2301      	movs	r3, #1
 8003886:	e0a4      	b.n	80039d2 <_printf_i+0x1f6>
 8003888:	6825      	ldr	r5, [r4, #0]
 800388a:	6808      	ldr	r0, [r1, #0]
 800388c:	062e      	lsls	r6, r5, #24
 800388e:	f100 0304 	add.w	r3, r0, #4
 8003892:	d50a      	bpl.n	80038aa <_printf_i+0xce>
 8003894:	6805      	ldr	r5, [r0, #0]
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	2d00      	cmp	r5, #0
 800389a:	da03      	bge.n	80038a4 <_printf_i+0xc8>
 800389c:	232d      	movs	r3, #45	; 0x2d
 800389e:	426d      	negs	r5, r5
 80038a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a4:	230a      	movs	r3, #10
 80038a6:	485e      	ldr	r0, [pc, #376]	; (8003a20 <_printf_i+0x244>)
 80038a8:	e019      	b.n	80038de <_printf_i+0x102>
 80038aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038ae:	6805      	ldr	r5, [r0, #0]
 80038b0:	600b      	str	r3, [r1, #0]
 80038b2:	bf18      	it	ne
 80038b4:	b22d      	sxthne	r5, r5
 80038b6:	e7ef      	b.n	8003898 <_printf_i+0xbc>
 80038b8:	680b      	ldr	r3, [r1, #0]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	1d18      	adds	r0, r3, #4
 80038be:	6008      	str	r0, [r1, #0]
 80038c0:	0628      	lsls	r0, r5, #24
 80038c2:	d501      	bpl.n	80038c8 <_printf_i+0xec>
 80038c4:	681d      	ldr	r5, [r3, #0]
 80038c6:	e002      	b.n	80038ce <_printf_i+0xf2>
 80038c8:	0669      	lsls	r1, r5, #25
 80038ca:	d5fb      	bpl.n	80038c4 <_printf_i+0xe8>
 80038cc:	881d      	ldrh	r5, [r3, #0]
 80038ce:	2f6f      	cmp	r7, #111	; 0x6f
 80038d0:	bf0c      	ite	eq
 80038d2:	2308      	moveq	r3, #8
 80038d4:	230a      	movne	r3, #10
 80038d6:	4852      	ldr	r0, [pc, #328]	; (8003a20 <_printf_i+0x244>)
 80038d8:	2100      	movs	r1, #0
 80038da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038de:	6866      	ldr	r6, [r4, #4]
 80038e0:	2e00      	cmp	r6, #0
 80038e2:	bfa8      	it	ge
 80038e4:	6821      	ldrge	r1, [r4, #0]
 80038e6:	60a6      	str	r6, [r4, #8]
 80038e8:	bfa4      	itt	ge
 80038ea:	f021 0104 	bicge.w	r1, r1, #4
 80038ee:	6021      	strge	r1, [r4, #0]
 80038f0:	b90d      	cbnz	r5, 80038f6 <_printf_i+0x11a>
 80038f2:	2e00      	cmp	r6, #0
 80038f4:	d04d      	beq.n	8003992 <_printf_i+0x1b6>
 80038f6:	4616      	mov	r6, r2
 80038f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038fc:	fb03 5711 	mls	r7, r3, r1, r5
 8003900:	5dc7      	ldrb	r7, [r0, r7]
 8003902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003906:	462f      	mov	r7, r5
 8003908:	42bb      	cmp	r3, r7
 800390a:	460d      	mov	r5, r1
 800390c:	d9f4      	bls.n	80038f8 <_printf_i+0x11c>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d10b      	bne.n	800392a <_printf_i+0x14e>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	07df      	lsls	r7, r3, #31
 8003916:	d508      	bpl.n	800392a <_printf_i+0x14e>
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	6861      	ldr	r1, [r4, #4]
 800391c:	4299      	cmp	r1, r3
 800391e:	bfde      	ittt	le
 8003920:	2330      	movle	r3, #48	; 0x30
 8003922:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003926:	f106 36ff 	addle.w	r6, r6, #4294967295
 800392a:	1b92      	subs	r2, r2, r6
 800392c:	6122      	str	r2, [r4, #16]
 800392e:	464b      	mov	r3, r9
 8003930:	4621      	mov	r1, r4
 8003932:	4640      	mov	r0, r8
 8003934:	f8cd a000 	str.w	sl, [sp]
 8003938:	aa03      	add	r2, sp, #12
 800393a:	f7ff fedf 	bl	80036fc <_printf_common>
 800393e:	3001      	adds	r0, #1
 8003940:	d14c      	bne.n	80039dc <_printf_i+0x200>
 8003942:	f04f 30ff 	mov.w	r0, #4294967295
 8003946:	b004      	add	sp, #16
 8003948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394c:	4834      	ldr	r0, [pc, #208]	; (8003a20 <_printf_i+0x244>)
 800394e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003952:	680e      	ldr	r6, [r1, #0]
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	f856 5b04 	ldr.w	r5, [r6], #4
 800395a:	061f      	lsls	r7, r3, #24
 800395c:	600e      	str	r6, [r1, #0]
 800395e:	d514      	bpl.n	800398a <_printf_i+0x1ae>
 8003960:	07d9      	lsls	r1, r3, #31
 8003962:	bf44      	itt	mi
 8003964:	f043 0320 	orrmi.w	r3, r3, #32
 8003968:	6023      	strmi	r3, [r4, #0]
 800396a:	b91d      	cbnz	r5, 8003974 <_printf_i+0x198>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	f023 0320 	bic.w	r3, r3, #32
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	2310      	movs	r3, #16
 8003976:	e7af      	b.n	80038d8 <_printf_i+0xfc>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	f043 0320 	orr.w	r3, r3, #32
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	2378      	movs	r3, #120	; 0x78
 8003982:	4828      	ldr	r0, [pc, #160]	; (8003a24 <_printf_i+0x248>)
 8003984:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003988:	e7e3      	b.n	8003952 <_printf_i+0x176>
 800398a:	065e      	lsls	r6, r3, #25
 800398c:	bf48      	it	mi
 800398e:	b2ad      	uxthmi	r5, r5
 8003990:	e7e6      	b.n	8003960 <_printf_i+0x184>
 8003992:	4616      	mov	r6, r2
 8003994:	e7bb      	b.n	800390e <_printf_i+0x132>
 8003996:	680b      	ldr	r3, [r1, #0]
 8003998:	6826      	ldr	r6, [r4, #0]
 800399a:	1d1d      	adds	r5, r3, #4
 800399c:	6960      	ldr	r0, [r4, #20]
 800399e:	600d      	str	r5, [r1, #0]
 80039a0:	0635      	lsls	r5, r6, #24
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	d501      	bpl.n	80039aa <_printf_i+0x1ce>
 80039a6:	6018      	str	r0, [r3, #0]
 80039a8:	e002      	b.n	80039b0 <_printf_i+0x1d4>
 80039aa:	0671      	lsls	r1, r6, #25
 80039ac:	d5fb      	bpl.n	80039a6 <_printf_i+0x1ca>
 80039ae:	8018      	strh	r0, [r3, #0]
 80039b0:	2300      	movs	r3, #0
 80039b2:	4616      	mov	r6, r2
 80039b4:	6123      	str	r3, [r4, #16]
 80039b6:	e7ba      	b.n	800392e <_printf_i+0x152>
 80039b8:	680b      	ldr	r3, [r1, #0]
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	600a      	str	r2, [r1, #0]
 80039be:	681e      	ldr	r6, [r3, #0]
 80039c0:	2100      	movs	r1, #0
 80039c2:	4630      	mov	r0, r6
 80039c4:	6862      	ldr	r2, [r4, #4]
 80039c6:	f000 f82f 	bl	8003a28 <memchr>
 80039ca:	b108      	cbz	r0, 80039d0 <_printf_i+0x1f4>
 80039cc:	1b80      	subs	r0, r0, r6
 80039ce:	6060      	str	r0, [r4, #4]
 80039d0:	6863      	ldr	r3, [r4, #4]
 80039d2:	6123      	str	r3, [r4, #16]
 80039d4:	2300      	movs	r3, #0
 80039d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039da:	e7a8      	b.n	800392e <_printf_i+0x152>
 80039dc:	4632      	mov	r2, r6
 80039de:	4649      	mov	r1, r9
 80039e0:	4640      	mov	r0, r8
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	47d0      	blx	sl
 80039e6:	3001      	adds	r0, #1
 80039e8:	d0ab      	beq.n	8003942 <_printf_i+0x166>
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	079b      	lsls	r3, r3, #30
 80039ee:	d413      	bmi.n	8003a18 <_printf_i+0x23c>
 80039f0:	68e0      	ldr	r0, [r4, #12]
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	4298      	cmp	r0, r3
 80039f6:	bfb8      	it	lt
 80039f8:	4618      	movlt	r0, r3
 80039fa:	e7a4      	b.n	8003946 <_printf_i+0x16a>
 80039fc:	2301      	movs	r3, #1
 80039fe:	4632      	mov	r2, r6
 8003a00:	4649      	mov	r1, r9
 8003a02:	4640      	mov	r0, r8
 8003a04:	47d0      	blx	sl
 8003a06:	3001      	adds	r0, #1
 8003a08:	d09b      	beq.n	8003942 <_printf_i+0x166>
 8003a0a:	3501      	adds	r5, #1
 8003a0c:	68e3      	ldr	r3, [r4, #12]
 8003a0e:	9903      	ldr	r1, [sp, #12]
 8003a10:	1a5b      	subs	r3, r3, r1
 8003a12:	42ab      	cmp	r3, r5
 8003a14:	dcf2      	bgt.n	80039fc <_printf_i+0x220>
 8003a16:	e7eb      	b.n	80039f0 <_printf_i+0x214>
 8003a18:	2500      	movs	r5, #0
 8003a1a:	f104 0619 	add.w	r6, r4, #25
 8003a1e:	e7f5      	b.n	8003a0c <_printf_i+0x230>
 8003a20:	08003ce1 	.word	0x08003ce1
 8003a24:	08003cf2 	.word	0x08003cf2

08003a28 <memchr>:
 8003a28:	4603      	mov	r3, r0
 8003a2a:	b510      	push	{r4, lr}
 8003a2c:	b2c9      	uxtb	r1, r1
 8003a2e:	4402      	add	r2, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	d101      	bne.n	8003a3a <memchr+0x12>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e003      	b.n	8003a42 <memchr+0x1a>
 8003a3a:	7804      	ldrb	r4, [r0, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	428c      	cmp	r4, r1
 8003a40:	d1f6      	bne.n	8003a30 <memchr+0x8>
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <memcpy>:
 8003a44:	440a      	add	r2, r1
 8003a46:	4291      	cmp	r1, r2
 8003a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a4c:	d100      	bne.n	8003a50 <memcpy+0xc>
 8003a4e:	4770      	bx	lr
 8003a50:	b510      	push	{r4, lr}
 8003a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a56:	4291      	cmp	r1, r2
 8003a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a5c:	d1f9      	bne.n	8003a52 <memcpy+0xe>
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <memmove>:
 8003a60:	4288      	cmp	r0, r1
 8003a62:	b510      	push	{r4, lr}
 8003a64:	eb01 0402 	add.w	r4, r1, r2
 8003a68:	d902      	bls.n	8003a70 <memmove+0x10>
 8003a6a:	4284      	cmp	r4, r0
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	d807      	bhi.n	8003a80 <memmove+0x20>
 8003a70:	1e43      	subs	r3, r0, #1
 8003a72:	42a1      	cmp	r1, r4
 8003a74:	d008      	beq.n	8003a88 <memmove+0x28>
 8003a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a7e:	e7f8      	b.n	8003a72 <memmove+0x12>
 8003a80:	4601      	mov	r1, r0
 8003a82:	4402      	add	r2, r0
 8003a84:	428a      	cmp	r2, r1
 8003a86:	d100      	bne.n	8003a8a <memmove+0x2a>
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a92:	e7f7      	b.n	8003a84 <memmove+0x24>

08003a94 <_free_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4605      	mov	r5, r0
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d043      	beq.n	8003b24 <_free_r+0x90>
 8003a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aa0:	1f0c      	subs	r4, r1, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bfb8      	it	lt
 8003aa6:	18e4      	addlt	r4, r4, r3
 8003aa8:	f000 f8d0 	bl	8003c4c <__malloc_lock>
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <_free_r+0x94>)
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	b933      	cbnz	r3, 8003ac2 <_free_r+0x2e>
 8003ab4:	6063      	str	r3, [r4, #4]
 8003ab6:	6014      	str	r4, [r2, #0]
 8003ab8:	4628      	mov	r0, r5
 8003aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003abe:	f000 b8cb 	b.w	8003c58 <__malloc_unlock>
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	d90a      	bls.n	8003adc <_free_r+0x48>
 8003ac6:	6821      	ldr	r1, [r4, #0]
 8003ac8:	1862      	adds	r2, r4, r1
 8003aca:	4293      	cmp	r3, r2
 8003acc:	bf01      	itttt	eq
 8003ace:	681a      	ldreq	r2, [r3, #0]
 8003ad0:	685b      	ldreq	r3, [r3, #4]
 8003ad2:	1852      	addeq	r2, r2, r1
 8003ad4:	6022      	streq	r2, [r4, #0]
 8003ad6:	6063      	str	r3, [r4, #4]
 8003ad8:	6004      	str	r4, [r0, #0]
 8003ada:	e7ed      	b.n	8003ab8 <_free_r+0x24>
 8003adc:	461a      	mov	r2, r3
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	b10b      	cbz	r3, 8003ae6 <_free_r+0x52>
 8003ae2:	42a3      	cmp	r3, r4
 8003ae4:	d9fa      	bls.n	8003adc <_free_r+0x48>
 8003ae6:	6811      	ldr	r1, [r2, #0]
 8003ae8:	1850      	adds	r0, r2, r1
 8003aea:	42a0      	cmp	r0, r4
 8003aec:	d10b      	bne.n	8003b06 <_free_r+0x72>
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	4401      	add	r1, r0
 8003af2:	1850      	adds	r0, r2, r1
 8003af4:	4283      	cmp	r3, r0
 8003af6:	6011      	str	r1, [r2, #0]
 8003af8:	d1de      	bne.n	8003ab8 <_free_r+0x24>
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4401      	add	r1, r0
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	6053      	str	r3, [r2, #4]
 8003b04:	e7d8      	b.n	8003ab8 <_free_r+0x24>
 8003b06:	d902      	bls.n	8003b0e <_free_r+0x7a>
 8003b08:	230c      	movs	r3, #12
 8003b0a:	602b      	str	r3, [r5, #0]
 8003b0c:	e7d4      	b.n	8003ab8 <_free_r+0x24>
 8003b0e:	6820      	ldr	r0, [r4, #0]
 8003b10:	1821      	adds	r1, r4, r0
 8003b12:	428b      	cmp	r3, r1
 8003b14:	bf01      	itttt	eq
 8003b16:	6819      	ldreq	r1, [r3, #0]
 8003b18:	685b      	ldreq	r3, [r3, #4]
 8003b1a:	1809      	addeq	r1, r1, r0
 8003b1c:	6021      	streq	r1, [r4, #0]
 8003b1e:	6063      	str	r3, [r4, #4]
 8003b20:	6054      	str	r4, [r2, #4]
 8003b22:	e7c9      	b.n	8003ab8 <_free_r+0x24>
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
 8003b26:	bf00      	nop
 8003b28:	20000094 	.word	0x20000094

08003b2c <_malloc_r>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	1ccd      	adds	r5, r1, #3
 8003b30:	f025 0503 	bic.w	r5, r5, #3
 8003b34:	3508      	adds	r5, #8
 8003b36:	2d0c      	cmp	r5, #12
 8003b38:	bf38      	it	cc
 8003b3a:	250c      	movcc	r5, #12
 8003b3c:	2d00      	cmp	r5, #0
 8003b3e:	4606      	mov	r6, r0
 8003b40:	db01      	blt.n	8003b46 <_malloc_r+0x1a>
 8003b42:	42a9      	cmp	r1, r5
 8003b44:	d903      	bls.n	8003b4e <_malloc_r+0x22>
 8003b46:	230c      	movs	r3, #12
 8003b48:	6033      	str	r3, [r6, #0]
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b4e:	f000 f87d 	bl	8003c4c <__malloc_lock>
 8003b52:	4921      	ldr	r1, [pc, #132]	; (8003bd8 <_malloc_r+0xac>)
 8003b54:	680a      	ldr	r2, [r1, #0]
 8003b56:	4614      	mov	r4, r2
 8003b58:	b99c      	cbnz	r4, 8003b82 <_malloc_r+0x56>
 8003b5a:	4f20      	ldr	r7, [pc, #128]	; (8003bdc <_malloc_r+0xb0>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b923      	cbnz	r3, 8003b6a <_malloc_r+0x3e>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 f862 	bl	8003c2c <_sbrk_r>
 8003b68:	6038      	str	r0, [r7, #0]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 f85d 	bl	8003c2c <_sbrk_r>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d123      	bne.n	8003bbe <_malloc_r+0x92>
 8003b76:	230c      	movs	r3, #12
 8003b78:	4630      	mov	r0, r6
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f000 f86c 	bl	8003c58 <__malloc_unlock>
 8003b80:	e7e3      	b.n	8003b4a <_malloc_r+0x1e>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	1b5b      	subs	r3, r3, r5
 8003b86:	d417      	bmi.n	8003bb8 <_malloc_r+0x8c>
 8003b88:	2b0b      	cmp	r3, #11
 8003b8a:	d903      	bls.n	8003b94 <_malloc_r+0x68>
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	441c      	add	r4, r3
 8003b90:	6025      	str	r5, [r4, #0]
 8003b92:	e004      	b.n	8003b9e <_malloc_r+0x72>
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	42a2      	cmp	r2, r4
 8003b98:	bf0c      	ite	eq
 8003b9a:	600b      	streq	r3, [r1, #0]
 8003b9c:	6053      	strne	r3, [r2, #4]
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f000 f85a 	bl	8003c58 <__malloc_unlock>
 8003ba4:	f104 000b 	add.w	r0, r4, #11
 8003ba8:	1d23      	adds	r3, r4, #4
 8003baa:	f020 0007 	bic.w	r0, r0, #7
 8003bae:	1ac2      	subs	r2, r0, r3
 8003bb0:	d0cc      	beq.n	8003b4c <_malloc_r+0x20>
 8003bb2:	1a1b      	subs	r3, r3, r0
 8003bb4:	50a3      	str	r3, [r4, r2]
 8003bb6:	e7c9      	b.n	8003b4c <_malloc_r+0x20>
 8003bb8:	4622      	mov	r2, r4
 8003bba:	6864      	ldr	r4, [r4, #4]
 8003bbc:	e7cc      	b.n	8003b58 <_malloc_r+0x2c>
 8003bbe:	1cc4      	adds	r4, r0, #3
 8003bc0:	f024 0403 	bic.w	r4, r4, #3
 8003bc4:	42a0      	cmp	r0, r4
 8003bc6:	d0e3      	beq.n	8003b90 <_malloc_r+0x64>
 8003bc8:	1a21      	subs	r1, r4, r0
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f000 f82e 	bl	8003c2c <_sbrk_r>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d1dd      	bne.n	8003b90 <_malloc_r+0x64>
 8003bd4:	e7cf      	b.n	8003b76 <_malloc_r+0x4a>
 8003bd6:	bf00      	nop
 8003bd8:	20000094 	.word	0x20000094
 8003bdc:	20000098 	.word	0x20000098

08003be0 <_realloc_r>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	4607      	mov	r7, r0
 8003be4:	4614      	mov	r4, r2
 8003be6:	460e      	mov	r6, r1
 8003be8:	b921      	cbnz	r1, 8003bf4 <_realloc_r+0x14>
 8003bea:	4611      	mov	r1, r2
 8003bec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bf0:	f7ff bf9c 	b.w	8003b2c <_malloc_r>
 8003bf4:	b922      	cbnz	r2, 8003c00 <_realloc_r+0x20>
 8003bf6:	f7ff ff4d 	bl	8003a94 <_free_r>
 8003bfa:	4625      	mov	r5, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c00:	f000 f830 	bl	8003c64 <_malloc_usable_size_r>
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d20f      	bcs.n	8003c28 <_realloc_r+0x48>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f7ff ff8e 	bl	8003b2c <_malloc_r>
 8003c10:	4605      	mov	r5, r0
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d0f2      	beq.n	8003bfc <_realloc_r+0x1c>
 8003c16:	4631      	mov	r1, r6
 8003c18:	4622      	mov	r2, r4
 8003c1a:	f7ff ff13 	bl	8003a44 <memcpy>
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4638      	mov	r0, r7
 8003c22:	f7ff ff37 	bl	8003a94 <_free_r>
 8003c26:	e7e9      	b.n	8003bfc <_realloc_r+0x1c>
 8003c28:	4635      	mov	r5, r6
 8003c2a:	e7e7      	b.n	8003bfc <_realloc_r+0x1c>

08003c2c <_sbrk_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4d05      	ldr	r5, [pc, #20]	; (8003c48 <_sbrk_r+0x1c>)
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	f7fc fe50 	bl	80008dc <_sbrk>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_sbrk_r+0x1a>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_sbrk_r+0x1a>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	200004d4 	.word	0x200004d4

08003c4c <__malloc_lock>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__malloc_lock+0x8>)
 8003c4e:	f000 b811 	b.w	8003c74 <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	200004dc 	.word	0x200004dc

08003c58 <__malloc_unlock>:
 8003c58:	4801      	ldr	r0, [pc, #4]	; (8003c60 <__malloc_unlock+0x8>)
 8003c5a:	f000 b80c 	b.w	8003c76 <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200004dc 	.word	0x200004dc

08003c64 <_malloc_usable_size_r>:
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f18      	subs	r0, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfbc      	itt	lt
 8003c6e:	580b      	ldrlt	r3, [r1, r0]
 8003c70:	18c0      	addlt	r0, r0, r3
 8003c72:	4770      	bx	lr

08003c74 <__retarget_lock_acquire_recursive>:
 8003c74:	4770      	bx	lr

08003c76 <__retarget_lock_release_recursive>:
 8003c76:	4770      	bx	lr

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
