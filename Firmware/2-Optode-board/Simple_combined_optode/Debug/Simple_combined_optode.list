
Simple_combined_optode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de8  08005de8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000074  08005e64  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005e64  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a0a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002602  00000000  00000000  00037aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240cc  00000000  00000000  0003c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c9  00000000  00000000  00060694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4577  00000000  00000000  0007595d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159ed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b4  00000000  00000000  00159f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d44 	.word	0x08005d44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005d44 	.word	0x08005d44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd42 	bl	8001006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8f3 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa71 	bl	8000a6c <MX_GPIO_Init>
  MX_ADC1_Init();
 800058a:	f000 f93f 	bl	800080c <MX_ADC1_Init>
  MX_DAC1_Init();
 800058e:	f000 f9a1 	bl	80008d4 <MX_DAC1_Init>
  MX_TIM16_Init();
 8000592:	f000 fa43 	bl	8000a1c <MX_TIM16_Init>
  MX_LPUART1_UART_Init();
 8000596:	f000 f9d9 	bl	800094c <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800059a:	f000 fa05 	bl	80009a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // switching on led to show the fnirs start
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4862      	ldr	r0, [pc, #392]	; (800072c <main+0x1b4>)
 80005a4:	f002 fa54 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ac:	f000 fda0 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	485d      	ldr	r0, [pc, #372]	; (800072c <main+0x1b4>)
 80005b6:	f002 fa4b 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005be:	f000 fd97 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	4859      	ldr	r0, [pc, #356]	; (800072c <main+0x1b4>)
 80005c8:	f002 fa42 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d0:	f000 fd8e 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	4854      	ldr	r0, [pc, #336]	; (800072c <main+0x1b4>)
 80005da:	f002 fa39 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f000 fd85 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4850      	ldr	r0, [pc, #320]	; (800072c <main+0x1b4>)
 80005ec:	f002 fa30 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f4:	f000 fd7c 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	484b      	ldr	r0, [pc, #300]	; (800072c <main+0x1b4>)
 80005fe:	f002 fa27 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000606:	f000 fd73 	bl	80010f0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f002 fa1d 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f002 fa17 	bl	8002a50 <HAL_GPIO_WritePin>
	//usb output as a test
	//uart_buf_len = sprintf(uart_buf, "XXXTimer starting ...\r\n");
	//HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
	HAL_Delay(2000);
 8000622:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000626:	f000 fd63 	bl	80010f0 <HAL_Delay>
	// HAL_UART_Transmit(huart, pData, Size, Timeout)

	//start interrupt for ADC
	HAL_ADC_Start(&hadc1);
 800062a:	4841      	ldr	r0, [pc, #260]	; (8000730 <main+0x1b8>)
 800062c:	f001 f894 	bl	8001758 <HAL_ADC_Start>

	//start interrupt timer
	//HAL_TIM_Base_Start_IT(&htim16);

	//start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4840      	ldr	r0, [pc, #256]	; (8000734 <main+0x1bc>)
 8000634:	f001 ff05 	bl	8002442 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000638:	2110      	movs	r1, #16
 800063a:	483e      	ldr	r0, [pc, #248]	; (8000734 <main+0x1bc>)
 800063c:	f001 ff01 	bl	8002442 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DAC_val);
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <main+0x1c0>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	483a      	ldr	r0, [pc, #232]	; (8000734 <main+0x1bc>)
 800064a:	f001 ff47 	bl	80024dc <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, DAC_val);
 800064e:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <main+0x1c0>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	4837      	ldr	r0, [pc, #220]	; (8000734 <main+0x1bc>)
 8000658:	f001 ff40 	bl	80024dc <HAL_DAC_SetValue>

	HAL_Delay(2000);
 800065c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000660:	f000 fd46 	bl	80010f0 <HAL_Delay>

	//start LED channels
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f002 f9f0 	bl	8002a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f002 f9ea 	bl	8002a50 <HAL_GPIO_WritePin>

	//start interrupt timer
	HAL_TIM_Base_Start_IT(&htim16);
 800067c:	482f      	ldr	r0, [pc, #188]	; (800073c <main+0x1c4>)
 800067e:	f004 f81d 	bl	80046bc <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(sample_counter==sample_counter_prev+1){
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <main+0x1c8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <main+0x1cc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d1f8      	bne.n	8000682 <main+0x10a>
		  total+=adc_reading;
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <main+0x1d0>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <main+0x1d4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a2b      	ldr	r2, [pc, #172]	; (800074c <main+0x1d4>)
 800069e:	6013      	str	r3, [r2, #0]


		  if (sample_counter%10==0){
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0x1cc>)
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <main+0x1d8>)
 80006a6:	fb83 2301 	smull	r2, r3, r3, r1
 80006aa:	109a      	asrs	r2, r3, #2
 80006ac:	17cb      	asrs	r3, r1, #31
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	4613      	mov	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	1aca      	subs	r2, r1, r3
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	d130      	bne.n	8000720 <main+0x1a8>

			  average = total/10;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <main+0x1d4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <main+0x1d8>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	4a21      	ldr	r2, [pc, #132]	; (8000754 <main+0x1dc>)
 80006d0:	6013      	str	r3, [r2, #0]

			  sprintf(msg, "%hu\r\n", average);
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <main+0x1dc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	491f      	ldr	r1, [pc, #124]	; (8000758 <main+0x1e0>)
 80006da:	4820      	ldr	r0, [pc, #128]	; (800075c <main+0x1e4>)
 80006dc:	f004 ff04 	bl	80054e8 <siprintf>
			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006e0:	481e      	ldr	r0, [pc, #120]	; (800075c <main+0x1e4>)
 80006e2:	f7ff fd75 	bl	80001d0 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	491b      	ldr	r1, [pc, #108]	; (800075c <main+0x1e4>)
 80006f0:	481b      	ldr	r0, [pc, #108]	; (8000760 <main+0x1e8>)
 80006f2:	f004 fa4f 	bl	8004b94 <HAL_UART_Transmit>
			  HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&average, (uint8_t *)&aRxBuffer, sizeof(average), 10);
 80006f6:	230a      	movs	r3, #10
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2304      	movs	r3, #4
 80006fc:	4a19      	ldr	r2, [pc, #100]	; (8000764 <main+0x1ec>)
 80006fe:	4915      	ldr	r1, [pc, #84]	; (8000754 <main+0x1dc>)
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <main+0x1f0>)
 8000702:	f003 fc0c 	bl	8003f1e <HAL_SPI_TransmitReceive>

			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f002 f9b8 	bl	8002a80 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f002 f9b3 	bl	8002a80 <HAL_GPIO_TogglePin>

			  total=0;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <main+0x1d4>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
			  //adc_reading = 1;
			  //sprintf(msg, "other %hu\r\n", adc_reading);
			  //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

		  }
		  sample_counter_prev=sample_counter;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <main+0x1cc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <main+0x1c8>)
 8000726:	6013      	str	r3, [r2, #0]
	  if(sample_counter==sample_counter_prev+1){
 8000728:	e7ab      	b.n	8000682 <main+0x10a>
 800072a:	bf00      	nop
 800072c:	48000400 	.word	0x48000400
 8000730:	200001b8 	.word	0x200001b8
 8000734:	20000110 	.word	0x20000110
 8000738:	20000000 	.word	0x20000000
 800073c:	2000022c 	.word	0x2000022c
 8000740:	20000094 	.word	0x20000094
 8000744:	20000090 	.word	0x20000090
 8000748:	20000124 	.word	0x20000124
 800074c:	20000098 	.word	0x20000098
 8000750:	66666667 	.word	0x66666667
 8000754:	2000009c 	.word	0x2000009c
 8000758:	08005d5c 	.word	0x08005d5c
 800075c:	20000128 	.word	0x20000128
 8000760:	20000134 	.word	0x20000134
 8000764:	2000021c 	.word	0x2000021c
 8000768:	200000ac 	.word	0x200000ac

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	; 0x58
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2244      	movs	r2, #68	; 0x44
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f004 feac 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000792:	f002 f99d 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800079c:	f000 fa0c 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	2303      	movs	r3, #3
 80007b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007b6:	2308      	movs	r3, #8
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 f9d6 	bl	8002b7c <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f9ef 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2103      	movs	r1, #3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fde2 	bl	80033bc <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007fe:	f000 f9db 	bl	8000bb8 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3758      	adds	r7, #88	; 0x58
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <MX_ADC1_Init+0xc0>)
 8000826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000842:	2204      	movs	r2, #4
 8000844:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000848:	2200      	movs	r2, #0
 800084a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800084e:	2200      	movs	r2, #0
 8000850:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000868:	2200      	movs	r2, #0
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_ADC1_Init+0xbc>)
 8000884:	f000 fe20 	bl	80014c8 <HAL_ADC_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800088e:	f000 f993 	bl	8000bb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_ADC1_Init+0xc4>)
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000896:	2306      	movs	r3, #6
 8000898:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089e:	237f      	movs	r3, #127	; 0x7f
 80008a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a2:	2304      	movs	r3, #4
 80008a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_ADC1_Init+0xbc>)
 80008b0:	f001 f852 	bl	8001958 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ba:	f000 f97d 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001b8 	.word	0x200001b8
 80008cc:	50040000 	.word	0x50040000
 80008d0:	19200040 	.word	0x19200040

080008d4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2224      	movs	r2, #36	; 0x24
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 fdf9 	bl	80054d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_DAC1_Init+0x70>)
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <MX_DAC1_Init+0x74>)
 80008ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008ec:	4815      	ldr	r0, [pc, #84]	; (8000944 <MX_DAC1_Init+0x70>)
 80008ee:	f001 fd86 	bl	80023fe <HAL_DAC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008f8:	f000 f95e 	bl	8000bb8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_DAC1_Init+0x70>)
 8000918:	f001 fe05 	bl	8002526 <HAL_DAC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f949 	bl	8000bb8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2210      	movs	r2, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_DAC1_Init+0x70>)
 800092e:	f001 fdfa 	bl	8002526 <HAL_DAC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000938:	f000 f93e 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000110 	.word	0x20000110
 8000948:	40007400 	.word	0x40007400

0800094c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_LPUART1_UART_Init+0x54>)
 8000954:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 1000000;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_LPUART1_UART_Init+0x58>)
 800095a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000970:	220c      	movs	r2, #12
 8000972:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_LPUART1_UART_Init+0x50>)
 8000988:	f004 f8b6 	bl	8004af8 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000992:	f000 f911 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000134 	.word	0x20000134
 80009a0:	40008000 	.word	0x40008000
 80009a4:	000f4240 	.word	0x000f4240

080009a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <MX_SPI2_Init+0x70>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009ee:	2207      	movs	r2, #7
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI2_Init+0x6c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_SPI2_Init+0x6c>)
 8000a00:	f003 f9ea 	bl	8003dd8 <HAL_SPI_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000a0a:	f000 f8d5 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000ac 	.word	0x200000ac
 8000a18:	40003800 	.word	0x40003800

08000a1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <MX_TIM16_Init+0x4c>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 500-1;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a28:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a2c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400-1;
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a36:	f240 128f 	movw	r2, #399	; 0x18f
 8000a3a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_TIM16_Init+0x48>)
 8000a50:	f003 fddc 	bl	800460c <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a5a:	f000 f8ad 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000022c 	.word	0x2000022c
 8000a68:	40014400 	.word	0x40014400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a33      	ldr	r2, [pc, #204]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a2d      	ldr	r2, [pc, #180]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|A_CTR_Pin|B_CTR_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	21c8      	movs	r1, #200	; 0xc8
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f001 ffb1 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	4819      	ldr	r0, [pc, #100]	; (8000b58 <MX_GPIO_Init+0xec>)
 8000af4:	f001 ffac 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_STATUS_Pin B_STATUS_Pin */
  GPIO_InitStruct.Pin = A_STATUS_Pin|B_STATUS_Pin;
 8000af8:	2305      	movs	r3, #5
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f001 fe25 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 A_CTR_Pin B_CTR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|A_CTR_Pin|B_CTR_Pin;
 8000b12:	23c8      	movs	r3, #200	; 0xc8
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f001 fe16 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_GPIO_Init+0xec>)
 8000b48:	f001 fe08 	bl	800275c <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400

08000b5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Interrupt service routine for periodic timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if (htim==&htim16){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d117      	bne.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x40>

		//start ADC
		HAL_ADC_Start(&hadc1);
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b6e:	f000 fdf3 	bl	8001758 <HAL_ADC_Start>

		//increment counter
		sample_counter+=1;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b7a:	6013      	str	r3, [r2, #0]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b80:	f001 ff7e 	bl	8002a80 <HAL_GPIO_TogglePin>


		//Read ADC reading
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b8a:	f000 fe48 	bl	800181e <HAL_ADC_PollForConversion>
		adc_reading = HAL_ADC_GetValue(&hadc1);
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b90:	f000 fed4 	bl	800193c <HAL_ADC_GetValue>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b9a:	801a      	strh	r2, [r3, #0]
		//sprintf(msg, "Reading is %hu\r\n", adc_reading);
		//sprintf(msg, "%hu\r\n", sample_counter);

		//HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000022c 	.word	0x2000022c
 8000ba8:	200001b8 	.word	0x200001b8
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	20000124 	.word	0x20000124

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0a0      	sub	sp, #128	; 0x80
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	225c      	movs	r2, #92	; 0x5c
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 fc53 	bl	80054d8 <memset>
  if(hadc->Instance==ADC1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_ADC_MspInit+0xa4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d134      	bne.n	8000ca6 <HAL_ADC_MspInit+0x9a>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c42:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c46:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fdb9 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c58:	f7ff ffae 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_ADC_MspInit+0xa8>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <HAL_ADC_MspInit+0xa8>)
 8000c62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_ADC_MspInit+0xa8>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_ADC_MspInit+0xa8>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_ADC_MspInit+0xa8>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_ADC_MspInit+0xa8>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c90:	230b      	movs	r3, #11
 8000c92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f001 fd5b 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3780      	adds	r7, #128	; 0x80
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	50040000 	.word	0x50040000
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_DAC_MspInit+0x74>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d124      	bne.n	8000d24 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_DAC_MspInit+0x78>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d0a:	2330      	movs	r3, #48	; 0x30
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f001 fd1c 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40007400 	.word	0x40007400
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0a0      	sub	sp, #128	; 0x80
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	225c      	movs	r2, #92	; 0x5c
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 fbbf 	bl	80054d8 <memset>
  if(huart->Instance==LPUART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_UART_MspInit+0xa8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d136      	bne.n	8000dd2 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d64:	2320      	movs	r3, #32
 8000d66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 fd26 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d7e:	f7ff ff1b 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0xac>)
 8000d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0xac>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0xac>)
 8000d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0xac>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0xac>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_UART_MspInit+0xac>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000db2:	2303      	movs	r3, #3
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0xb0>)
 8000dce:	f001 fcc5 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3780      	adds	r7, #128	; 0x80
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40008000 	.word	0x40008000
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000800 	.word	0x48000800

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x7c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d128      	bne.n	8000e5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000e3a:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_SPI_MspInit+0x84>)
 8000e58:	f001 fc80 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40003800 	.word	0x40003800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000400 	.word	0x48000400

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_TIM_Base_MspInit+0x44>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d113      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_TIM_Base_MspInit+0x48>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_TIM_Base_MspInit+0x48>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_TIM_Base_MspInit+0x48>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2019      	movs	r0, #25
 8000ea0:	f001 fa77 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ea4:	2019      	movs	r0, #25
 8000ea6:	f001 fa90 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40014400 	.word	0x40014400
 8000eb8:	40021000 	.word	0x40021000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f8d2 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f16:	f003 fc25 	bl	8004764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000022c 	.word	0x2000022c

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f004 fa96 	bl	8005484 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000c000 	.word	0x2000c000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	200000a0 	.word	0x200000a0
 8000f8c:	20000290 	.word	0x20000290

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f004 fa55 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fac7 	bl	8000578 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ff8:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 8000ffc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001000:	2000028c 	.word	0x2000028c

08001004 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_IRQHandler>

08001006 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f001 f9b3 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f80e 	bl	8001038 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	e001      	b.n	800102c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001028:	f7ff fdcc 	bl	8000bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102c:	79fb      	ldrb	r3, [r7, #7]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d023      	beq.n	8001094 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_InitTick+0x70>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f001 f9bf 	bl	80023e6 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10f      	bne.n	800108e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d809      	bhi.n	8001088 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f001 f989 	bl	8002392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_InitTick+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e007      	b.n	8001098 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e004      	b.n	8001098 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e001      	b.n	8001098 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	20000004 	.word	0x20000004
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	20000278 	.word	0x20000278

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000278 	.word	0x20000278

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000000c 	.word	0x2000000c

08001138 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3360      	adds	r3, #96	; 0x60
 80011b2:	461a      	mov	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LL_ADC_SetOffset+0x44>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	4313      	orrs	r3, r2
 80011d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	03fff000 	.word	0x03fff000

080011e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3360      	adds	r3, #96	; 0x60
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3360      	adds	r3, #96	; 0x60
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	431a      	orrs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800123e:	bf00      	nop
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	461a      	mov	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	211f      	movs	r1, #31
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0e9b      	lsrs	r3, r3, #26
 80012a8:	f003 011f 	and.w	r1, r3, #31
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3314      	adds	r3, #20
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	0e5b      	lsrs	r3, r3, #25
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	0d1b      	lsrs	r3, r3, #20
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	2107      	movs	r1, #7
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	0d1b      	lsrs	r3, r3, #20
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0318 	and.w	r3, r3, #24
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001344:	40d9      	lsrs	r1, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	400b      	ands	r3, r1
 800134a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800134e:	431a      	orrs	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	0007ffff 	.word	0x0007ffff

08001368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6093      	str	r3, [r2, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800139c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a0:	d101      	bne.n	80013a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <LL_ADC_IsEnabled+0x18>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <LL_ADC_IsEnabled+0x1a>
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001466:	f043 0204 	orr.w	r2, r3, #4
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b04      	cmp	r3, #4
 800148c:	d101      	bne.n	8001492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d101      	bne.n	80014b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e12c      	b.n	800173c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fb8b 	bl	8000c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff3f 	bl	800138c <LL_ADC_IsDeepPowerDownEnabled>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff25 	bl	8001368 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff5a 	bl	80013dc <LL_ADC_IsInternalRegulatorEnabled>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d115      	bne.n	800155a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff3e 	bl	80013b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001538:	4b82      	ldr	r3, [pc, #520]	; (8001744 <HAL_ADC_Init+0x27c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	4a82      	ldr	r2, [pc, #520]	; (8001748 <HAL_ADC_Init+0x280>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	3301      	adds	r3, #1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800154c:	e002      	b.n	8001554 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3b01      	subs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff3c 	bl	80013dc <LL_ADC_IsInternalRegulatorEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10d      	bne.n	8001586 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f043 0210 	orr.w	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff75 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 8001590:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80c5 	bne.w	800172a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 80c1 	bne.w	800172a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff35 	bl	800142c <LL_ADC_IsEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015c8:	4860      	ldr	r0, [pc, #384]	; (800174c <HAL_ADC_Init+0x284>)
 80015ca:	f7ff ff2f 	bl	800142c <LL_ADC_IsEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4619      	mov	r1, r3
 80015da:	485d      	ldr	r0, [pc, #372]	; (8001750 <HAL_ADC_Init+0x288>)
 80015dc:	f7ff fdac 	bl	8001138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e5b      	ldrb	r3, [r3, #25]
 80015e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d106      	bne.n	800161c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	3b01      	subs	r3, #1
 8001614:	045b      	lsls	r3, r3, #17
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	2b00      	cmp	r3, #0
 8001622:	d009      	beq.n	8001638 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	4b45      	ldr	r3, [pc, #276]	; (8001754 <HAL_ADC_Init+0x28c>)
 8001640:	4013      	ands	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	430b      	orrs	r3, r1
 800164a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff12 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 8001656:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff1f 	bl	80014a0 <LL_ADC_INJ_IsConversionOngoing>
 8001662:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d13d      	bne.n	80016e6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d13a      	bne.n	80016e6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001674:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800168c:	f023 0302 	bic.w	r3, r3, #2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	69b9      	ldr	r1, [r7, #24]
 8001696:	430b      	orrs	r3, r1
 8001698:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d118      	bne.n	80016d6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016ae:	f023 0304 	bic.w	r3, r3, #4
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016c0:	4311      	orrs	r1, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016c6:	430a      	orrs	r2, r1
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	e007      	b.n	80016e6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10c      	bne.n	8001708 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f023 010f 	bic.w	r1, r3, #15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
 8001706:	e007      	b.n	8001718 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020f 	bic.w	r2, r2, #15
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	f023 0303 	bic.w	r3, r3, #3
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
 8001728:	e007      	b.n	800173a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f043 0210 	orr.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800173a:	7ffb      	ldrb	r3, [r7, #31]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000004 	.word	0x20000004
 8001748:	053e2d63 	.word	0x053e2d63
 800174c:	50040000 	.word	0x50040000
 8001750:	50040300 	.word	0x50040300
 8001754:	fff0c007 	.word	0xfff0c007

08001758 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe88 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d14f      	bne.n	8001810 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Start+0x26>
 800177a:	2302      	movs	r3, #2
 800177c:	e04b      	b.n	8001816 <HAL_ADC_Start+0xbe>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fcc6 	bl	8002118 <ADC_Enable>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d137      	bne.n	8001806 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b6:	d106      	bne.n	80017c6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f023 0206 	bic.w	r2, r3, #6
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	; 0x58
 80017c4:	e002      	b.n	80017cc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	221c      	movs	r2, #28
 80017d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe27 	bl	8001452 <LL_ADC_REG_StartConversion>
 8001804:	e006      	b.n	8001814 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800180e:	e001      	b.n	8001814 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001810:	2302      	movs	r3, #2
 8001812:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d102      	bne.n	8001836 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001830:	2308      	movs	r3, #8
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e010      	b.n	8001858 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e06f      	b.n	8001934 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001854:	2304      	movs	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001858:	f7ff fc3e 	bl	80010d8 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800185e:	e021      	b.n	80018a4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d01d      	beq.n	80018a4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001868:	f7ff fc36 	bl	80010d8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <HAL_ADC_PollForConversion+0x60>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d112      	bne.n	80018a4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f043 0204 	orr.w	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e047      	b.n	8001934 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0d6      	beq.n	8001860 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fcc1 	bl	800124a <LL_ADC_REG_IsTriggerSourceSWStart>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d01c      	beq.n	8001908 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7e5b      	ldrb	r3, [r3, #25]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d111      	bne.n	8001908 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d104      	bne.n	8001920 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2208      	movs	r2, #8
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e008      	b.n	8001932 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0b6      	sub	sp, #216	; 0xd8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x22>
 8001976:	2302      	movs	r3, #2
 8001978:	e3b9      	b.n	80020ee <HAL_ADC_ConfigChannel+0x796>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd77 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 839e 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d824      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	3b02      	subs	r3, #2
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d81b      	bhi.n	80019de <HAL_ADC_ConfigChannel+0x86>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_ADC_ConfigChannel+0x54>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019c5 	.word	0x080019c5
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019d5 	.word	0x080019d5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	220c      	movs	r2, #12
 80019c0:	605a      	str	r2, [r3, #4]
          break;
 80019c2:	e011      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2212      	movs	r2, #18
 80019c8:	605a      	str	r2, [r3, #4]
          break;
 80019ca:	e00d      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2218      	movs	r2, #24
 80019d0:	605a      	str	r2, [r3, #4]
          break;
 80019d2:	e009      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019da:	605a      	str	r2, [r3, #4]
          break;
 80019dc:	e004      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2206      	movs	r2, #6
 80019e2:	605a      	str	r2, [r3, #4]
          break;
 80019e4:	e000      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80019e6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f7ff fc3b 	bl	8001270 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fd3b 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 8001a04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd47 	bl	80014a0 <LL_ADC_INJ_IsConversionOngoing>
 8001a12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 81a6 	bne.w	8001d6c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 81a1 	bne.w	8001d6c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7ff fc46 	bl	80012c8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	08db      	lsrs	r3, r3, #3
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d00a      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6919      	ldr	r1, [r3, #16]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a6e:	f7ff fb97 	bl	80011a0 <LL_ADC_SetOffset>
 8001a72:	e17b      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fbb4 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x148>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fba9 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 021f 	and.w	r2, r3, #31
 8001a9e:	e01e      	b.n	8001ade <HAL_ADC_ConfigChannel+0x186>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fb9e 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e004      	b.n	8001adc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x19e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	e018      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e004      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fb6d 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb51 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x20e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb46 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	e01e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x24c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb3b 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e004      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x264>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0e9b      	lsrs	r3, r3, #26
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	e018      	b.n	8001bee <HAL_ADC_ConfigChannel+0x296>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e004      	b.n	8001bee <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d106      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fb0a 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff faee 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x2d4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fae3 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	e01e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x312>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2102      	movs	r1, #2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fad8 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e004      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x32a>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	e016      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x358>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e004      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff faa9 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fa8d 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x396>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2103      	movs	r1, #3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa82 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	e017      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x3c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fa77 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d08:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x3de>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	e011      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x402>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e003      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d106      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	2103      	movs	r1, #3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fa54 	bl	8001214 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fb5b 	bl	800142c <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 813f 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f7ff fac8 	bl	8001320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	; (8001fd0 <HAL_ADC_ConfigChannel+0x678>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 8130 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x46c>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0e9b      	lsrs	r3, r3, #26
 8001db2:	3301      	adds	r3, #1
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e019      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x4a0>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e003      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2b09      	cmp	r3, #9
 8001df0:	bf94      	ite	ls
 8001df2:	2301      	movls	r3, #1
 8001df4:	2300      	movhi	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d079      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x4c0>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	069b      	lsls	r3, r3, #26
 8001e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e16:	e015      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x4ec>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	069b      	lsls	r3, r3, #26
 8001e40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x50c>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	3301      	adds	r3, #1
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	e017      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x53c>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e003      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x562>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	051b      	lsls	r3, r3, #20
 8001eb8:	e018      	b.n	8001eec <HAL_ADC_ConfigChannel+0x594>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	430b      	orrs	r3, r1
 8001eee:	e080      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x5b4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	e015      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x5e0>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x600>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	e017      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x630>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	61fb      	str	r3, [r7, #28]
  return result;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x65c>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b1e      	subs	r3, #30
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	e01d      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x698>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	613b      	str	r3, [r7, #16]
  return result;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e005      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x684>
 8001fd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b1e      	subs	r3, #30
 8001fea:	051b      	lsls	r3, r3, #20
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6892      	ldr	r2, [r2, #8]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7ff f966 	bl	80012c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d06c      	beq.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002008:	483c      	ldr	r0, [pc, #240]	; (80020fc <HAL_ADC_ConfigChannel+0x7a4>)
 800200a:	f7ff f8bb 	bl	8001184 <LL_ADC_GetCommonPathInternalCh>
 800200e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a3a      	ldr	r2, [pc, #232]	; (8002100 <HAL_ADC_ConfigChannel+0x7a8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d127      	bne.n	800206c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800201c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d121      	bne.n	800206c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a35      	ldr	r2, [pc, #212]	; (8002104 <HAL_ADC_ConfigChannel+0x7ac>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d157      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002036:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800203a:	4619      	mov	r1, r3
 800203c:	482f      	ldr	r0, [pc, #188]	; (80020fc <HAL_ADC_ConfigChannel+0x7a4>)
 800203e:	f7ff f88e 	bl	800115e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_ADC_ConfigChannel+0x7b0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_ADC_ConfigChannel+0x7b4>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800205c:	e002      	b.n	8002064 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3b01      	subs	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f9      	bne.n	800205e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800206a:	e03a      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a27      	ldr	r2, [pc, #156]	; (8002110 <HAL_ADC_ConfigChannel+0x7b8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <HAL_ADC_ConfigChannel+0x746>
 8002076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800207a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_ADC_ConfigChannel+0x7ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d12a      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002094:	4619      	mov	r1, r3
 8002096:	4819      	ldr	r0, [pc, #100]	; (80020fc <HAL_ADC_ConfigChannel+0x7a4>)
 8002098:	f7ff f861 	bl	800115e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800209c:	e021      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_ADC_ConfigChannel+0x7bc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d11c      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d116      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_ADC_ConfigChannel+0x7ac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c6:	4619      	mov	r1, r3
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <HAL_ADC_ConfigChannel+0x7a4>)
 80020ca:	f7ff f848 	bl	800115e <LL_ADC_SetCommonPathInternalCh>
 80020ce:	e008      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	37d8      	adds	r7, #216	; 0xd8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	80080000 	.word	0x80080000
 80020fc:	50040300 	.word	0x50040300
 8002100:	c7520000 	.word	0xc7520000
 8002104:	50040000 	.word	0x50040000
 8002108:	20000004 	.word	0x20000004
 800210c:	053e2d63 	.word	0x053e2d63
 8002110:	cb840000 	.word	0xcb840000
 8002114:	80000001 	.word	0x80000001

08002118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f981 	bl	800142c <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d14d      	bne.n	80021cc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <ADC_Enable+0xc0>)
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e039      	b.n	80021ce <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f950 	bl	8001404 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002164:	f7fe ffb8 	bl	80010d8 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800216a:	e028      	b.n	80021be <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f95b 	bl	800142c <LL_ADC_IsEnabled>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f93f 	bl	8001404 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002186:	f7fe ffa7 	bl	80010d8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d914      	bls.n	80021be <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00d      	beq.n	80021be <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e007      	b.n	80021ce <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d1cf      	bne.n	800216c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	8000003f 	.word	0x8000003f

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db0b      	blt.n	800226a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4907      	ldr	r1, [pc, #28]	; (8002278 <__NVIC_EnableIRQ+0x38>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e100 	.word	0xe000e100

0800227c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	db0a      	blt.n	80022a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <__NVIC_SetPriority+0x4c>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	440b      	add	r3, r1
 80022a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a4:	e00a      	b.n	80022bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <__NVIC_SetPriority+0x50>)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3b04      	subs	r3, #4
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	440b      	add	r3, r1
 80022ba:	761a      	strb	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f1c3 0307 	rsb	r3, r3, #7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf28      	it	cs
 80022ee:	2304      	movcs	r3, #4
 80022f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d902      	bls.n	8002300 <NVIC_EncodePriority+0x30>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3b03      	subs	r3, #3
 80022fe:	e000      	b.n	8002302 <NVIC_EncodePriority+0x32>
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	43d9      	mvns	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	4313      	orrs	r3, r2
         );
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff8e 	bl	800227c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff29 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff3e 	bl	8002224 <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff8e 	bl	80022d0 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5d 	bl	800227c <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff31 	bl	8002240 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e014      	b.n	800243a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	791b      	ldrb	r3, [r3, #4]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fe fc49 	bl	8000cb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	795b      	ldrb	r3, [r3, #5]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_DAC_Start+0x16>
 8002454:	2302      	movs	r3, #2
 8002456:	e03b      	b.n	80024d0 <HAL_DAC_Start+0x8e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800248c:	2b04      	cmp	r3, #4
 800248e:	d118      	bne.n	80024c2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	e00f      	b.n	80024c2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b0:	d107      	bne.n	80024c2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0202 	orr.w	r2, r2, #2
 80024c0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3308      	adds	r3, #8
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e004      	b.n	8002510 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	3314      	adds	r3, #20
 800250e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	461a      	mov	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b088      	sub	sp, #32
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	795b      	ldrb	r3, [r3, #5]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_DAC_ConfigChannel+0x1c>
 800253e:	2302      	movs	r3, #2
 8002540:	e107      	b.n	8002752 <HAL_DAC_ConfigChannel+0x22c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2202      	movs	r2, #2
 800254c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b04      	cmp	r3, #4
 8002554:	d174      	bne.n	8002640 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002556:	f7fe fdbf 	bl	80010d8 <HAL_GetTick>
 800255a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d134      	bne.n	80025cc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002562:	e011      	b.n	8002588 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002564:	f7fe fdb8 	bl	80010d8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d90a      	bls.n	8002588 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f043 0208 	orr.w	r2, r3, #8
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2203      	movs	r2, #3
 8002582:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0e4      	b.n	8002752 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e6      	bne.n	8002564 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f7fe fdaa 	bl	80010f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	6992      	ldr	r2, [r2, #24]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
 80025a6:	e01e      	b.n	80025e6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025a8:	f7fe fd96 	bl	80010d8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d90a      	bls.n	80025cc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f043 0208 	orr.w	r2, r3, #8
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2203      	movs	r2, #3
 80025c6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0c2      	b.n	8002752 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dbe8      	blt.n	80025a8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fd8a 	bl	80010f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	6992      	ldr	r2, [r2, #24]
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	ea02 0103 	and.w	r1, r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	21ff      	movs	r1, #255	; 0xff
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	ea02 0103 	and.w	r1, r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6a1a      	ldr	r2, [r3, #32]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d11d      	bne.n	8002684 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	22c0      	movs	r2, #192	; 0xc0
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e154      	b.n	8002a16 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8146 	beq.w	8002a10 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x40>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	6939      	ldr	r1, [r7, #16]
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80a0 	beq.w	8002a10 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_GPIO_Init+0x2d8>)
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_GPIO_Init+0x2d8>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6613      	str	r3, [r2, #96]	; 0x60
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <HAL_GPIO_Init+0x2d8>)
 80028de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e8:	4a53      	ldr	r2, [pc, #332]	; (8002a38 <HAL_GPIO_Init+0x2dc>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002912:	d019      	beq.n	8002948 <HAL_GPIO_Init+0x1ec>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a49      	ldr	r2, [pc, #292]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_GPIO_Init+0x1e8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a48      	ldr	r2, [pc, #288]	; (8002a40 <HAL_GPIO_Init+0x2e4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00d      	beq.n	8002940 <HAL_GPIO_Init+0x1e4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a47      	ldr	r2, [pc, #284]	; (8002a44 <HAL_GPIO_Init+0x2e8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <HAL_GPIO_Init+0x1e0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a46      	ldr	r2, [pc, #280]	; (8002a48 <HAL_GPIO_Init+0x2ec>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_GPIO_Init+0x1dc>
 8002934:	2304      	movs	r3, #4
 8002936:	e008      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002938:	2307      	movs	r3, #7
 800293a:	e006      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 800293c:	2303      	movs	r3, #3
 800293e:	e004      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002940:	2302      	movs	r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002948:	2300      	movs	r3, #0
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800295a:	4937      	ldr	r1, [pc, #220]	; (8002a38 <HAL_GPIO_Init+0x2dc>)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800298c:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002992:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029b6:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3301      	adds	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f47f aea3 	bne.w	800276c <HAL_GPIO_Init+0x10>
  }
}
 8002a26:	bf00      	nop
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	48000400 	.word	0x48000400
 8002a40:	48000800 	.word	0x48000800
 8002a44:	48000c00 	.word	0x48000c00
 8002a48:	48001000 	.word	0x48001000
 8002a4c:	40010400 	.word	0x40010400

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43d9      	mvns	r1, r3
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ade:	d130      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d038      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2232      	movs	r2, #50	; 0x32
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b14:	e002      	b.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d102      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d110      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d007      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000
 8002b74:	20000004 	.word	0x20000004
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f000 bc11 	b.w	80033b2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b90:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9a:	4b9e      	ldr	r3, [pc, #632]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80e4 	beq.w	8002d7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4c>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	f040 808b 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	f040 8087 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x64>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e3e8      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_RCC_OscConfig+0x7e>
 8002bf0:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf8:	e005      	b.n	8002c06 <HAL_RCC_OscConfig+0x8a>
 8002bfa:	4b86      	ldr	r3, [pc, #536]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d223      	bcs.n	8002c52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fd78 	bl	8003704 <RCC_SetFlashLatencyFromMSIRange>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e3c9      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1e:	4b7d      	ldr	r3, [pc, #500]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7c      	ldr	r2, [pc, #496]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b7a      	ldr	r3, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4977      	ldr	r1, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3c:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	4972      	ldr	r1, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	e025      	b.n	8002c9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	496a      	ldr	r1, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4965      	ldr	r1, [pc, #404]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fd38 	bl	8003704 <RCC_SetFlashLatencyFromMSIRange>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e389      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9e:	f000 fc6f 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	495a      	ldr	r1, [pc, #360]	; (8002e18 <HAL_RCC_OscConfig+0x29c>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <HAL_RCC_OscConfig+0x2a0>)
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cbe:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_RCC_OscConfig+0x2a4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f9b8 	bl	8001038 <HAL_InitTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d052      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	e36d      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d032      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cde:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cea:	f7fe f9f5 	bl	80010d8 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf2:	f7fe f9f1 	bl	80010d8 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e356      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d10:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3f      	ldr	r2, [pc, #252]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d16:	f043 0308 	orr.w	r3, r3, #8
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	493a      	ldr	r1, [pc, #232]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	4935      	ldr	r1, [pc, #212]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
 8002d42:	e01a      	b.n	8002d7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d50:	f7fe f9c2 	bl	80010d8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d58:	f7fe f9be 	bl	80010d8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e323      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1dc>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d073      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x21c>
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d10e      	bne.n	8002db0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d063      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d15f      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e300      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x24c>
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e01d      	b.n	8002e04 <HAL_RCC_OscConfig+0x288>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x270>
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0x288>
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <HAL_RCC_OscConfig+0x298>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f964 	bl	80010d8 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e12:	e010      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ba>
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08005d64 	.word	0x08005d64
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe f958 	bl	80010d8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e2bd      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	4baf      	ldr	r3, [pc, #700]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2a8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f948 	bl	80010d8 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe f944 	bl	80010d8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e2a9      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	4ba5      	ldr	r3, [pc, #660]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2d0>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d060      	beq.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x310>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d119      	bne.n	8002eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d116      	bne.n	8002eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8c:	4b99      	ldr	r3, [pc, #612]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x328>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e286      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b93      	ldr	r3, [pc, #588]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4990      	ldr	r1, [pc, #576]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	e040      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d023      	beq.n	8002f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec2:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a8b      	ldr	r2, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe f903 	bl	80010d8 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f8ff 	bl	80010d8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e264      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b7f      	ldr	r3, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	497c      	ldr	r1, [pc, #496]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
 8002f08:	e018      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a79      	ldr	r2, [pc, #484]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe f8df 	bl	80010d8 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f8db 	bl	80010d8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e240      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	4a67      	ldr	r2, [pc, #412]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f8ba 	bl	80010d8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe f8b6 	bl	80010d8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e21b      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3ec>
 8002f88:	e01b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8a:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe f89d 	bl	80010d8 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe f899 	bl	80010d8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1fe      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a6 	beq.w	800311c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fd4:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	4a43      	ldr	r2, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	; 0x58
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCC_OscConfig+0x57c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d118      	bne.n	800303a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_OscConfig+0x57c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <HAL_RCC_OscConfig+0x57c>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fe f860 	bl	80010d8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe f85c 	bl	80010d8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1c1      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <HAL_RCC_OscConfig+0x57c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <HAL_RCC_OscConfig+0x4d8>
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a2a      	ldr	r2, [pc, #168]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003052:	e024      	b.n	800309e <HAL_RCC_OscConfig+0x522>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d110      	bne.n	800307e <HAL_RCC_OscConfig+0x502>
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a24      	ldr	r2, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307c:	e00f      	b.n	800309e <HAL_RCC_OscConfig+0x522>
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fe f817 	bl	80010d8 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fe f813 	bl	80010d8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e176      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x578>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ed      	beq.n	80030ae <HAL_RCC_OscConfig+0x532>
 80030d2:	e01a      	b.n	800310a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe f800 	bl	80010d8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030da:	e00f      	b.n	80030fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f7fd fffc 	bl	80010d8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d906      	bls.n	80030fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e15f      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	4baa      	ldr	r3, [pc, #680]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e8      	bne.n	80030dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4ba5      	ldr	r3, [pc, #660]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	4aa4      	ldr	r2, [pc, #656]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d03c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01c      	beq.n	800316a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003130:	4b9d      	ldr	r3, [pc, #628]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003136:	4a9c      	ldr	r2, [pc, #624]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fd ffca 	bl	80010d8 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003148:	f7fd ffc6 	bl	80010d8 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e12b      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800315a:	4b93      	ldr	r3, [pc, #588]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800315c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <HAL_RCC_OscConfig+0x5cc>
 8003168:	e01b      	b.n	80031a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800316a:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800316c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003170:	4a8d      	ldr	r2, [pc, #564]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fd ffad 	bl	80010d8 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003182:	f7fd ffa9 	bl	80010d8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e10e      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003194:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ef      	bne.n	8003182 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8102 	beq.w	80033b0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	f040 80c5 	bne.w	8003340 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031b6:	4b7c      	ldr	r3, [pc, #496]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0203 	and.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d12c      	bne.n	8003224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	3b01      	subs	r3, #1
 80031d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d123      	bne.n	8003224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d11b      	bne.n	8003224 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d113      	bne.n	8003224 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d109      	bne.n	8003224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d067      	beq.n	80032f4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d062      	beq.n	80032f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800322a:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0bb      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800323a:	4b5b      	ldr	r3, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003246:	f7fd ff47 	bl	80010d8 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fd ff43 	bl	80010d8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0a8      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003260:	4b51      	ldr	r3, [pc, #324]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326c:	4b4e      	ldr	r3, [pc, #312]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <HAL_RCC_OscConfig+0x830>)
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800327c:	3a01      	subs	r2, #1
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003286:	0212      	lsls	r2, r2, #8
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800328e:	0852      	lsrs	r2, r2, #1
 8003290:	3a01      	subs	r2, #1
 8003292:	0552      	lsls	r2, r2, #21
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800329a:	0852      	lsrs	r2, r2, #1
 800329c:	3a01      	subs	r2, #1
 800329e:	0652      	lsls	r2, r2, #25
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a6:	06d2      	lsls	r2, r2, #27
 80032a8:	430a      	orrs	r2, r1
 80032aa:	493f      	ldr	r1, [pc, #252]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032b0:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a3c      	ldr	r2, [pc, #240]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c8:	f7fd ff06 	bl	80010d8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd ff02 	bl	80010d8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e067      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ee:	e05f      	b.n	80033b0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e05e      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d157      	bne.n	80033b0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003316:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003318:	f7fd fede 	bl	80010d8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fd feda 	bl	80010d8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e03f      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x7a4>
 800333e:	e037      	b.n	80033b0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d02d      	beq.n	80033a2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800334c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003350:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003364:	f023 0303 	bic.w	r3, r3, #3
 8003368:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003370:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd fead 	bl	80010d8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fea9 	bl	80010d8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e00e      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_OscConfig+0x82c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x806>
 80033a0:	e006      	b.n	80033b0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e005      	b.n	80033b2 <HAL_RCC_OscConfig+0x836>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0c8      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b63      	ldr	r3, [pc, #396]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4961      	ldr	r1, [pc, #388]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b0      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d04c      	beq.n	80034a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d121      	bne.n	8003464 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e09e      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d107      	bne.n	800343c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e092      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e086      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e07e      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003464:	4b42      	ldr	r3, [pc, #264]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 0203 	bic.w	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	493f      	ldr	r1, [pc, #252]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003476:	f7fd fe2f 	bl	80010d8 <HAL_GetTick>
 800347a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347c:	e00a      	b.n	8003494 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fd fe2b 	bl	80010d8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e066      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003494:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 020c 	and.w	r2, r3, #12
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d1eb      	bne.n	800347e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	492c      	ldr	r1, [pc, #176]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d210      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 0207 	bic.w	r2, r3, #7
 80034da:	4924      	ldr	r1, [pc, #144]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e036      	b.n	8003562 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4918      	ldr	r1, [pc, #96]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4910      	ldr	r1, [pc, #64]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003532:	f000 f825 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <HAL_RCC_ClockConfig+0x1b4>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	490c      	ldr	r1, [pc, #48]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fd6e 	bl	8001038 <HAL_InitTick>
 800355c:	4603      	mov	r3, r0
 800355e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003560:	7afb      	ldrb	r3, [r7, #11]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40022000 	.word	0x40022000
 8003570:	40021000 	.word	0x40021000
 8003574:	08005d64 	.word	0x08005d64
 8003578:	20000004 	.word	0x20000004
 800357c:	20000008 	.word	0x20000008

08003580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x34>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d11e      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035c0:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e005      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035d0:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035dc:	4a2b      	ldr	r2, [pc, #172]	; (800368c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d102      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_GetSysClockFreq+0x110>)
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e004      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d101      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_GetSysClockFreq+0x110>)
 8003606:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d134      	bne.n	8003678 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d003      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0xa6>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d003      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0xac>
 8003624:	e005      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_RCC_GetSysClockFreq+0x110>)
 8003628:	617b      	str	r3, [r7, #20]
      break;
 800362a:	e005      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_RCC_GetSysClockFreq+0x110>)
 800362e:	617b      	str	r3, [r7, #20]
      break;
 8003630:	e002      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	617b      	str	r3, [r7, #20]
      break;
 8003636:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	3301      	adds	r3, #1
 8003644:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	fb02 f203 	mul.w	r2, r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	0e5b      	lsrs	r3, r3, #25
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	3301      	adds	r3, #1
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	fbb2 f3f3 	udiv	r3, r2, r3
 8003676:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003678:	69bb      	ldr	r3, [r7, #24]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	08005d7c 	.word	0x08005d7c
 8003690:	00f42400 	.word	0x00f42400

08003694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08005d74 	.word	0x08005d74

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036dc:	f7ff ffda 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0adb      	lsrs	r3, r3, #11
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	08005d74 	.word	0x08005d74

08003704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800371c:	f7ff f9ca 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 8003720:	6178      	str	r0, [r7, #20]
 8003722:	e014      	b.n	800374e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	4a24      	ldr	r2, [pc, #144]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	6593      	str	r3, [r2, #88]	; 0x58
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800373c:	f7ff f9ba 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 8003740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d10b      	bne.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d919      	bls.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2ba0      	cmp	r3, #160	; 0xa0
 8003760:	d902      	bls.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003762:	2302      	movs	r3, #2
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e013      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003768:	2301      	movs	r3, #1
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e010      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d902      	bls.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003774:	2303      	movs	r3, #3
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e00a      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b80      	cmp	r3, #128	; 0x80
 800377e:	d102      	bne.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003780:	2302      	movs	r3, #2
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e004      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d101      	bne.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800378c:	2301      	movs	r3, #1
 800378e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	4909      	ldr	r1, [pc, #36]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40022000 	.word	0x40022000

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037cc:	2300      	movs	r3, #0
 80037ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d0:	2300      	movs	r3, #0
 80037d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d031      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e8:	d01a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ee:	d814      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f8:	d10f      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4a5c      	ldr	r2, [pc, #368]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003806:	e00c      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f9f0 	bl	8003bf4 <RCCEx_PLLSAI1_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	74fb      	strb	r3, [r7, #19]
      break;
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003828:	4b51      	ldr	r3, [pc, #324]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	494e      	ldr	r1, [pc, #312]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800383e:	e001      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 809e 	beq.w	800398e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003866:	2300      	movs	r3, #0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386c:	4b40      	ldr	r3, [pc, #256]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	4a3f      	ldr	r2, [pc, #252]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003876:	6593      	str	r3, [r2, #88]	; 0x58
 8003878:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003884:	2301      	movs	r3, #1
 8003886:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a39      	ldr	r2, [pc, #228]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800388e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003894:	f7fd fc20 	bl	80010d8 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800389a:	e009      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fd fc1c 	bl	80010d8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d902      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	74fb      	strb	r3, [r7, #19]
        break;
 80038ae:	e005      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038b0:	4b30      	ldr	r3, [pc, #192]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d15a      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01e      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d019      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fbdc 	bl	80010d8 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003922:	e00b      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fd fbd8 	bl	80010d8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d902      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	74fb      	strb	r3, [r7, #19]
            break;
 800393a:	e006      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0ec      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4904      	ldr	r1, [pc, #16]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003966:	e009      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
 800396c:	e006      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397c:	7c7b      	ldrb	r3, [r7, #17]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003982:	4b9b      	ldr	r3, [pc, #620]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	4a9a      	ldr	r2, [pc, #616]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800399a:	4b95      	ldr	r3, [pc, #596]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f023 0203 	bic.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4991      	ldr	r1, [pc, #580]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039bc:	4b8c      	ldr	r3, [pc, #560]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f023 020c 	bic.w	r2, r3, #12
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	4989      	ldr	r1, [pc, #548]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039de:	4b84      	ldr	r3, [pc, #528]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	4980      	ldr	r1, [pc, #512]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a00:	4b7b      	ldr	r3, [pc, #492]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	4978      	ldr	r1, [pc, #480]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	496f      	ldr	r1, [pc, #444]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a44:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4967      	ldr	r1, [pc, #412]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	495e      	ldr	r1, [pc, #376]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	4956      	ldr	r1, [pc, #344]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aaa:	4b51      	ldr	r3, [pc, #324]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d028      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003acc:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ada:	4945      	ldr	r1, [pc, #276]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d106      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a3f      	ldr	r2, [pc, #252]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	e011      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f872 	bl	8003bf4 <RCCEx_PLLSAI1_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d028      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b38:	492d      	ldr	r1, [pc, #180]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b54:	60d3      	str	r3, [r2, #12]
 8003b56:	e011      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f843 	bl	8003bf4 <RCCEx_PLLSAI1_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01c      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b96:	4916      	ldr	r1, [pc, #88]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	2102      	movs	r1, #2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f820 	bl	8003bf4 <RCCEx_PLLSAI1_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003be4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c0e:	4b71      	ldr	r3, [pc, #452]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0203 	and.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d10d      	bne.n	8003c3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
       ||
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c26:	4b6b      	ldr	r3, [pc, #428]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
       ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d047      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e044      	b.n	8003cca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d018      	beq.n	8003c7a <RCCEx_PLLSAI1_Config+0x86>
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d825      	bhi.n	8003c98 <RCCEx_PLLSAI1_Config+0xa4>
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d002      	beq.n	8003c56 <RCCEx_PLLSAI1_Config+0x62>
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d009      	beq.n	8003c68 <RCCEx_PLLSAI1_Config+0x74>
 8003c54:	e020      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c56:	4b5f      	ldr	r3, [pc, #380]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11d      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c66:	e01a      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c68:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d116      	bne.n	8003ca2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c78:	e013      	b.n	8003ca2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c7a:	4b56      	ldr	r3, [pc, #344]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c86:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c96:	e006      	b.n	8003ca6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c9c:	e004      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c9e:	bf00      	nop
 8003ca0:	e002      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ca6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cae:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	4943      	ldr	r1, [pc, #268]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d17c      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cd0:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cdc:	f7fd f9fc 	bl	80010d8 <HAL_GetTick>
 8003ce0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ce2:	e009      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ce4:	f7fd f9f8 	bl	80010d8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d902      	bls.n	8003cf8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cf6:	e005      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf8:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ef      	bne.n	8003ce4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d15f      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d110      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6892      	ldr	r2, [r2, #8]
 8003d20:	0211      	lsls	r1, r2, #8
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68d2      	ldr	r2, [r2, #12]
 8003d26:	06d2      	lsls	r2, r2, #27
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	492a      	ldr	r1, [pc, #168]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	610b      	str	r3, [r1, #16]
 8003d30:	e027      	b.n	8003d82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d112      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d38:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	0211      	lsls	r1, r2, #8
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6912      	ldr	r2, [r2, #16]
 8003d4e:	0852      	lsrs	r2, r2, #1
 8003d50:	3a01      	subs	r2, #1
 8003d52:	0552      	lsls	r2, r2, #21
 8003d54:	430a      	orrs	r2, r1
 8003d56:	491f      	ldr	r1, [pc, #124]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	610b      	str	r3, [r1, #16]
 8003d5c:	e011      	b.n	8003d82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6892      	ldr	r2, [r2, #8]
 8003d6e:	0211      	lsls	r1, r2, #8
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6952      	ldr	r2, [r2, #20]
 8003d74:	0852      	lsrs	r2, r2, #1
 8003d76:	3a01      	subs	r2, #1
 8003d78:	0652      	lsls	r2, r2, #25
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	4915      	ldr	r1, [pc, #84]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fd f9a3 	bl	80010d8 <HAL_GetTick>
 8003d92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d94:	e009      	b.n	8003daa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d96:	f7fd f99f 	bl	80010d8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d902      	bls.n	8003daa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	73fb      	strb	r3, [r7, #15]
          break;
 8003da8:	e005      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0ef      	beq.n	8003d96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4903      	ldr	r1, [pc, #12]	; (8003dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e095      	b.n	8003f16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfa:	d009      	beq.n	8003e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
 8003e02:	e005      	b.n	8003e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc ffdc 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e50:	d902      	bls.n	8003e58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e002      	b.n	8003e5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e66:	d007      	beq.n	8003e78 <HAL_SPI_Init+0xa0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	ea42 0103 	orr.w	r1, r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	f003 0204 	and.w	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ef4:	ea42 0103 	orr.w	r1, r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08a      	sub	sp, #40	; 0x28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x26>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e1fb      	b.n	800433c <HAL_SPI_TransmitReceive+0x41e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f4c:	f7fd f8c4 	bl	80010d8 <HAL_GetTick>
 8003f50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f68:	7efb      	ldrb	r3, [r7, #27]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d00e      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x6e>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f74:	d106      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x66>
 8003f7e:	7efb      	ldrb	r3, [r7, #27]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d003      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f8a:	e1cd      	b.n	8004328 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_SPI_TransmitReceive+0x80>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_SPI_TransmitReceive+0x80>
 8003f98:	887b      	ldrh	r3, [r7, #2]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fa4:	e1c0      	b.n	8004328 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2205      	movs	r2, #5
 8003fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	887a      	ldrh	r2, [r7, #2]
 8003fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	887a      	ldrh	r2, [r7, #2]
 8003fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffc:	d802      	bhi.n	8004004 <HAL_SPI_TransmitReceive+0xe6>
 8003ffe:	8a3b      	ldrh	r3, [r7, #16]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d908      	bls.n	8004016 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	e007      	b.n	8004026 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d007      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800404c:	d97c      	bls.n	8004148 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_SPI_TransmitReceive+0x13e>
 8004056:	8a7b      	ldrh	r3, [r7, #18]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d169      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004080:	e056      	b.n	8004130 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b02      	cmp	r3, #2
 800408e:	d11b      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x1aa>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x1aa>
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	2b01      	cmp	r3, #1
 800409e:	d113      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d11c      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x1f2>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	b292      	uxth	r2, r2
 80040ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800410c:	2301      	movs	r3, #1
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004110:	f7fc ffe2 	bl	80010d8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411c:	429a      	cmp	r2, r3
 800411e:	d807      	bhi.n	8004130 <HAL_SPI_TransmitReceive+0x212>
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d003      	beq.n	8004130 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800412e:	e0fb      	b.n	8004328 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1a3      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x164>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d19d      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x164>
 8004146:	e0df      	b.n	8004308 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x23a>
 8004150:	8a7b      	ldrh	r3, [r7, #18]
 8004152:	2b01      	cmp	r3, #1
 8004154:	f040 80cb 	bne.w	80042ee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d912      	bls.n	8004188 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b02      	subs	r3, #2
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004186:	e0b2      	b.n	80042ee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ae:	e09e      	b.n	80042ee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d134      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x30a>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d02f      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x30a>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d12c      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d912      	bls.n	80041fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	881a      	ldrh	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b02      	subs	r3, #2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041fc:	e012      	b.n	8004224 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d148      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x3aa>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d042      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d923      	bls.n	8004296 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	b292      	uxth	r2, r2
 800425a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b02      	subs	r3, #2
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d81f      	bhi.n	80042c4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	e016      	b.n	80042c4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f103 020c 	add.w	r2, r3, #12
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042c4:	2301      	movs	r3, #1
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042c8:	f7fc ff06 	bl	80010d8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d803      	bhi.n	80042e0 <HAL_SPI_TransmitReceive+0x3c2>
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d102      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x3c8>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042ec:	e01c      	b.n	8004328 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f af5b 	bne.w	80041b0 <HAL_SPI_TransmitReceive+0x292>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	f47f af54 	bne.w	80041b0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f937 	bl	8004580 <SPI_EndRxTxTransaction>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	661a      	str	r2, [r3, #96]	; 0x60
 8004324:	e000      	b.n	8004328 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004354:	f7fc fec0 	bl	80010d8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	4413      	add	r3, r2
 8004362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004364:	f7fc feb8 	bl	80010d8 <HAL_GetTick>
 8004368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	015b      	lsls	r3, r3, #5
 8004370:	0d1b      	lsrs	r3, r3, #20
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	fb02 f303 	mul.w	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800437a:	e054      	b.n	8004426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d050      	beq.n	8004426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004384:	f7fc fea8 	bl	80010d8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	429a      	cmp	r2, r3
 8004392:	d902      	bls.n	800439a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d13d      	bne.n	8004416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b2:	d111      	bne.n	80043d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043bc:	d004      	beq.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d107      	bne.n	80043d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d10f      	bne.n	8004402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e017      	b.n	8004446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3b01      	subs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d19b      	bne.n	800437c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000004 	.word	0x20000004

08004454 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004466:	f7fc fe37 	bl	80010d8 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	4413      	add	r3, r2
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004476:	f7fc fe2f 	bl	80010d8 <HAL_GetTick>
 800447a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004484:	4b3d      	ldr	r3, [pc, #244]	; (800457c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00da      	lsls	r2, r3, #3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	0d1b      	lsrs	r3, r3, #20
 8004494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800449c:	e060      	b.n	8004560 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044a4:	d107      	bne.n	80044b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d050      	beq.n	8004560 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044be:	f7fc fe0b 	bl	80010d8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d902      	bls.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d13d      	bne.n	8004550 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ec:	d111      	bne.n	8004512 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d004      	beq.n	8004502 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d107      	bne.n	8004512 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004510:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	d10f      	bne.n	800453c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800453a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e010      	b.n	8004572 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	3b01      	subs	r3, #1
 800455e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d196      	bne.n	800449e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	; 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000004 	.word	0x20000004

08004580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff ff5b 	bl	8004454 <SPI_WaitFifoStateUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e027      	b.n	8004604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	2180      	movs	r1, #128	; 0x80
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fec0 	bl	8004344 <SPI_WaitFlagStateUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e014      	b.n	8004604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff ff34 	bl	8004454 <SPI_WaitFifoStateUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e000      	b.n	8004604 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e049      	b.n	80046b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc fc1c 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f000 f9d2 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e03b      	b.n	800474c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_TIM_Base_Start_IT+0x9c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x4e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fe:	d004      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x4e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_TIM_Base_Start_IT+0xa0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d115      	bne.n	8004736 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_TIM_Base_Start_IT+0xa4>)
 8004712:	4013      	ands	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d015      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x8c>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d011      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	e008      	b.n	8004748 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e000      	b.n	800474a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40014000 	.word	0x40014000
 8004760:	00010007 	.word	0x00010007

08004764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d122      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11b      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0202 	mvn.w	r2, #2
 8004790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f905 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8f7 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f908 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d122      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0204 	mvn.w	r2, #4
 80047e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8db 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8cd 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8de 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b08      	cmp	r3, #8
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0208 	mvn.w	r2, #8
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2204      	movs	r2, #4
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8b1 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8a3 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8b4 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b10      	cmp	r3, #16
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0210 	mvn.w	r2, #16
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2208      	movs	r2, #8
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f887 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f879 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f88a 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0201 	mvn.w	r2, #1
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc f93a 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d107      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8de 	bl	8004ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d10e      	bne.n	8004942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8d1 	bl	8004ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d10e      	bne.n	800496e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d107      	bne.n	800496e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f838 	bl	80049de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b20      	cmp	r3, #32
 800497a:	d10e      	bne.n	800499a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b20      	cmp	r3, #32
 8004988:	d107      	bne.n	800499a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0220 	mvn.w	r2, #32
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f891 	bl	8004abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <TIM_Base_SetConfig+0xbc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_Base_SetConfig+0x20>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d108      	bne.n	8004a26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <TIM_Base_SetConfig+0xbc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <TIM_Base_SetConfig+0x52>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a34:	d007      	beq.n	8004a46 <TIM_Base_SetConfig+0x52>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <TIM_Base_SetConfig+0xc0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_Base_SetConfig+0x52>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <TIM_Base_SetConfig+0xc4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d108      	bne.n	8004a58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <TIM_Base_SetConfig+0xbc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_Base_SetConfig+0xa0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <TIM_Base_SetConfig+0xc0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0xa0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <TIM_Base_SetConfig+0xc4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400

08004abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e040      	b.n	8004b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc f90a 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8c0 	bl	8004cbc <UART_SetConfig>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e022      	b.n	8004b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fae8 	bl	8005124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb6f 	bl	8005268 <UART_CheckIdleState>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	f040 8082 	bne.w	8004cb2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_UART_Transmit+0x26>
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e07a      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_UART_Transmit+0x38>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e073      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2221      	movs	r2, #33	; 0x21
 8004be0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be2:	f7fc fa79 	bl	80010d8 <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d108      	bne.n	8004c14 <HAL_UART_Transmit+0x80>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	e003      	b.n	8004c1c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c24:	e02d      	b.n	8004c82 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fb62 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e039      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c52:	b292      	uxth	r2, r2
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	3302      	adds	r3, #2
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	e008      	b.n	8004c70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	b292      	uxth	r2, r2
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1cb      	bne.n	8004c26 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2140      	movs	r1, #64	; 0x40
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fb2e 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e005      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4baa      	ldr	r3, [pc, #680]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a9f      	ldr	r2, [pc, #636]	; (8004f94 <UART_SetConfig+0x2d8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a96      	ldr	r2, [pc, #600]	; (8004f98 <UART_SetConfig+0x2dc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d121      	bne.n	8004d86 <UART_SetConfig+0xca>
 8004d42:	4b96      	ldr	r3, [pc, #600]	; (8004f9c <UART_SetConfig+0x2e0>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d817      	bhi.n	8004d80 <UART_SetConfig+0xc4>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x9c>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d6f 	.word	0x08004d6f
 8004d64:	08004d7b 	.word	0x08004d7b
 8004d68:	2301      	movs	r3, #1
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e096      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	76fb      	strb	r3, [r7, #27]
 8004d72:	e093      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004d74:	2304      	movs	r3, #4
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	e090      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	76fb      	strb	r3, [r7, #27]
 8004d7e:	e08d      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004d80:	2310      	movs	r3, #16
 8004d82:	76fb      	strb	r3, [r7, #27]
 8004d84:	e08a      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a85      	ldr	r2, [pc, #532]	; (8004fa0 <UART_SetConfig+0x2e4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d132      	bne.n	8004df6 <UART_SetConfig+0x13a>
 8004d90:	4b82      	ldr	r3, [pc, #520]	; (8004f9c <UART_SetConfig+0x2e0>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d828      	bhi.n	8004df0 <UART_SetConfig+0x134>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0xe8>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004df1 	.word	0x08004df1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004de5 	.word	0x08004de5
 8004db8:	08004df1 	.word	0x08004df1
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004ddf 	.word	0x08004ddf
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004df1 	.word	0x08004df1
 8004dd4:	08004deb 	.word	0x08004deb
 8004dd8:	2300      	movs	r3, #0
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	e05e      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004dde:	2302      	movs	r3, #2
 8004de0:	76fb      	strb	r3, [r7, #27]
 8004de2:	e05b      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004de4:	2304      	movs	r3, #4
 8004de6:	76fb      	strb	r3, [r7, #27]
 8004de8:	e058      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004dea:	2308      	movs	r3, #8
 8004dec:	76fb      	strb	r3, [r7, #27]
 8004dee:	e055      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004df0:	2310      	movs	r3, #16
 8004df2:	76fb      	strb	r3, [r7, #27]
 8004df4:	e052      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6a      	ldr	r2, [pc, #424]	; (8004fa4 <UART_SetConfig+0x2e8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d120      	bne.n	8004e42 <UART_SetConfig+0x186>
 8004e00:	4b66      	ldr	r3, [pc, #408]	; (8004f9c <UART_SetConfig+0x2e0>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d013      	beq.n	8004e36 <UART_SetConfig+0x17a>
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d814      	bhi.n	8004e3c <UART_SetConfig+0x180>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d009      	beq.n	8004e2a <UART_SetConfig+0x16e>
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d810      	bhi.n	8004e3c <UART_SetConfig+0x180>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <UART_SetConfig+0x168>
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d006      	beq.n	8004e30 <UART_SetConfig+0x174>
 8004e22:	e00b      	b.n	8004e3c <UART_SetConfig+0x180>
 8004e24:	2300      	movs	r3, #0
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e038      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e035      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e30:	2304      	movs	r3, #4
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	e032      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e36:	2308      	movs	r3, #8
 8004e38:	76fb      	strb	r3, [r7, #27]
 8004e3a:	e02f      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	76fb      	strb	r3, [r7, #27]
 8004e40:	e02c      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a53      	ldr	r2, [pc, #332]	; (8004f94 <UART_SetConfig+0x2d8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d125      	bne.n	8004e98 <UART_SetConfig+0x1dc>
 8004e4c:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <UART_SetConfig+0x2e0>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e5a:	d017      	beq.n	8004e8c <UART_SetConfig+0x1d0>
 8004e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e60:	d817      	bhi.n	8004e92 <UART_SetConfig+0x1d6>
 8004e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e66:	d00b      	beq.n	8004e80 <UART_SetConfig+0x1c4>
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6c:	d811      	bhi.n	8004e92 <UART_SetConfig+0x1d6>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <UART_SetConfig+0x1be>
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d006      	beq.n	8004e86 <UART_SetConfig+0x1ca>
 8004e78:	e00b      	b.n	8004e92 <UART_SetConfig+0x1d6>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	76fb      	strb	r3, [r7, #27]
 8004e7e:	e00d      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e80:	2302      	movs	r3, #2
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e00a      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e86:	2304      	movs	r3, #4
 8004e88:	76fb      	strb	r3, [r7, #27]
 8004e8a:	e007      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e004      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e92:	2310      	movs	r3, #16
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e001      	b.n	8004e9c <UART_SetConfig+0x1e0>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3c      	ldr	r2, [pc, #240]	; (8004f94 <UART_SetConfig+0x2d8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	f040 8082 	bne.w	8004fac <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea8:	7efb      	ldrb	r3, [r7, #27]
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d823      	bhi.n	8004ef6 <UART_SetConfig+0x23a>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x1f8>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ef7 	.word	0x08004ef7
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004ee7 	.word	0x08004ee7
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004ef7 	.word	0x08004ef7
 8004ed0:	08004ef7 	.word	0x08004ef7
 8004ed4:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe fbe8 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004edc:	6178      	str	r0, [r7, #20]
        break;
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004ee2:	617b      	str	r3, [r7, #20]
        break;
 8004ee4:	e00c      	b.n	8004f00 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fe fb4b 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004eea:	6178      	str	r0, [r7, #20]
        break;
 8004eec:	e008      	b.n	8004f00 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	617b      	str	r3, [r7, #20]
        break;
 8004ef4:	e004      	b.n	8004f00 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	76bb      	strb	r3, [r7, #26]
        break;
 8004efe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8100 	beq.w	8005108 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d305      	bcc.n	8004f24 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d902      	bls.n	8004f2a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	76bb      	strb	r3, [r7, #26]
 8004f28:	e0ee      	b.n	8005108 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	020b      	lsls	r3, r1, #8
 8004f3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f40:	0202      	lsls	r2, r0, #8
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	6849      	ldr	r1, [r1, #4]
 8004f46:	0849      	lsrs	r1, r1, #1
 8004f48:	4608      	mov	r0, r1
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	1814      	adds	r4, r2, r0
 8004f50:	eb43 0501 	adc.w	r5, r3, r1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb f98d 	bl	8000280 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f74:	d308      	bcc.n	8004f88 <UART_SetConfig+0x2cc>
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7c:	d204      	bcs.n	8004f88 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	e0bf      	b.n	8005108 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	76bb      	strb	r3, [r7, #26]
 8004f8c:	e0bc      	b.n	8005108 <UART_SetConfig+0x44c>
 8004f8e:	bf00      	nop
 8004f90:	efff69f3 	.word	0xefff69f3
 8004f94:	40008000 	.word	0x40008000
 8004f98:	40013800 	.word	0x40013800
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40004400 	.word	0x40004400
 8004fa4:	40004800 	.word	0x40004800
 8004fa8:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d15b      	bne.n	800506e <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8004fb6:	7efb      	ldrb	r3, [r7, #27]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d828      	bhi.n	800500e <UART_SetConfig+0x352>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x308>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	0800500f 	.word	0x0800500f
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fb60 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004fec:	6178      	str	r0, [r7, #20]
        break;
 8004fee:	e013      	b.n	8005018 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fb72 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8004ff4:	6178      	str	r0, [r7, #20]
        break;
 8004ff6:	e00f      	b.n	8005018 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b49      	ldr	r3, [pc, #292]	; (8005120 <UART_SetConfig+0x464>)
 8004ffa:	617b      	str	r3, [r7, #20]
        break;
 8004ffc:	e00c      	b.n	8005018 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe fabf 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8005002:	6178      	str	r0, [r7, #20]
        break;
 8005004:	e008      	b.n	8005018 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	617b      	str	r3, [r7, #20]
        break;
 800500c:	e004      	b.n	8005018 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	76bb      	strb	r3, [r7, #26]
        break;
 8005016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d074      	beq.n	8005108 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005a      	lsls	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d916      	bls.n	8005068 <UART_SetConfig+0x3ac>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d212      	bcs.n	8005068 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f023 030f 	bic.w	r3, r3, #15
 800504a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	b29a      	uxth	r2, r3
 8005058:	89fb      	ldrh	r3, [r7, #14]
 800505a:	4313      	orrs	r3, r2
 800505c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	89fa      	ldrh	r2, [r7, #14]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	e04f      	b.n	8005108 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	76bb      	strb	r3, [r7, #26]
 800506c:	e04c      	b.n	8005108 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800506e:	7efb      	ldrb	r3, [r7, #27]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d828      	bhi.n	80050c6 <UART_SetConfig+0x40a>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x3c0>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050c7 	.word	0x080050c7
 800508c:	080050b7 	.word	0x080050b7
 8005090:	080050c7 	.word	0x080050c7
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050c7 	.word	0x080050c7
 800509c:	080050bf 	.word	0x080050bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe fb04 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 80050a4:	6178      	str	r0, [r7, #20]
        break;
 80050a6:	e013      	b.n	80050d0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe fb16 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 80050ac:	6178      	str	r0, [r7, #20]
        break;
 80050ae:	e00f      	b.n	80050d0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <UART_SetConfig+0x464>)
 80050b2:	617b      	str	r3, [r7, #20]
        break;
 80050b4:	e00c      	b.n	80050d0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b6:	f7fe fa63 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 80050ba:	6178      	str	r0, [r7, #20]
        break;
 80050bc:	e008      	b.n	80050d0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e004      	b.n	80050d0 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	76bb      	strb	r3, [r7, #26]
        break;
 80050ce:	bf00      	nop
    }

    if (pclk != 0U)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085a      	lsrs	r2, r3, #1
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	d909      	bls.n	8005104 <UART_SetConfig+0x448>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d205      	bcs.n	8005104 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e001      	b.n	8005108 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005114:	7ebb      	ldrb	r3, [r7, #26]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}
 800511e:	bf00      	nop
 8005120:	00f42400 	.word	0x00f42400

08005124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005222:	d10a      	bne.n	800523a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005278:	f7fb ff2e 	bl	80010d8 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d10e      	bne.n	80052aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f82d 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e023      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d10e      	bne.n	80052d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f817 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e00d      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b09c      	sub	sp, #112	; 0x70
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e0a5      	b.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	f000 80a1 	beq.w	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fb fedf 	bl	80010d8 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
 8005326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005328:	2b00      	cmp	r3, #0
 800532a:	d13e      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005340:	667b      	str	r3, [r7, #100]	; 0x64
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	663b      	str	r3, [r7, #96]	; 0x60
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800537e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e067      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d04f      	beq.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c6:	d147      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	613b      	str	r3, [r7, #16]
   return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	66bb      	str	r3, [r7, #104]	; 0x68
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005424:	623a      	str	r2, [r7, #32]
 8005426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	61bb      	str	r3, [r7, #24]
   return(result);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e010      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	f43f af4a 	beq.w	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3770      	adds	r7, #112	; 0x70
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <__errno>:
 8005484:	4b01      	ldr	r3, [pc, #4]	; (800548c <__errno+0x8>)
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000010 	.word	0x20000010

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	; (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	; (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	; (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	; (80054d4 <__libc_init_array+0x44>)
 80054a4:	f000 fc4e 	bl	8005d44 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08005de8 	.word	0x08005de8
 80054cc:	08005de8 	.word	0x08005de8
 80054d0:	08005de8 	.word	0x08005de8
 80054d4:	08005dec 	.word	0x08005dec

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <siprintf>:
 80054e8:	b40e      	push	{r1, r2, r3}
 80054ea:	b500      	push	{lr}
 80054ec:	b09c      	sub	sp, #112	; 0x70
 80054ee:	ab1d      	add	r3, sp, #116	; 0x74
 80054f0:	9002      	str	r0, [sp, #8]
 80054f2:	9006      	str	r0, [sp, #24]
 80054f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054f8:	4809      	ldr	r0, [pc, #36]	; (8005520 <siprintf+0x38>)
 80054fa:	9107      	str	r1, [sp, #28]
 80054fc:	9104      	str	r1, [sp, #16]
 80054fe:	4909      	ldr	r1, [pc, #36]	; (8005524 <siprintf+0x3c>)
 8005500:	f853 2b04 	ldr.w	r2, [r3], #4
 8005504:	9105      	str	r1, [sp, #20]
 8005506:	6800      	ldr	r0, [r0, #0]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	a902      	add	r1, sp, #8
 800550c:	f000 f868 	bl	80055e0 <_svfiprintf_r>
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	b01c      	add	sp, #112	; 0x70
 8005518:	f85d eb04 	ldr.w	lr, [sp], #4
 800551c:	b003      	add	sp, #12
 800551e:	4770      	bx	lr
 8005520:	20000010 	.word	0x20000010
 8005524:	ffff0208 	.word	0xffff0208

08005528 <__ssputs_r>:
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	688e      	ldr	r6, [r1, #8]
 800552e:	429e      	cmp	r6, r3
 8005530:	4682      	mov	sl, r0
 8005532:	460c      	mov	r4, r1
 8005534:	4690      	mov	r8, r2
 8005536:	461f      	mov	r7, r3
 8005538:	d838      	bhi.n	80055ac <__ssputs_r+0x84>
 800553a:	898a      	ldrh	r2, [r1, #12]
 800553c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005540:	d032      	beq.n	80055a8 <__ssputs_r+0x80>
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	6909      	ldr	r1, [r1, #16]
 8005546:	eba5 0901 	sub.w	r9, r5, r1
 800554a:	6965      	ldr	r5, [r4, #20]
 800554c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005554:	3301      	adds	r3, #1
 8005556:	444b      	add	r3, r9
 8005558:	106d      	asrs	r5, r5, #1
 800555a:	429d      	cmp	r5, r3
 800555c:	bf38      	it	cc
 800555e:	461d      	movcc	r5, r3
 8005560:	0553      	lsls	r3, r2, #21
 8005562:	d531      	bpl.n	80055c8 <__ssputs_r+0xa0>
 8005564:	4629      	mov	r1, r5
 8005566:	f000 fb47 	bl	8005bf8 <_malloc_r>
 800556a:	4606      	mov	r6, r0
 800556c:	b950      	cbnz	r0, 8005584 <__ssputs_r+0x5c>
 800556e:	230c      	movs	r3, #12
 8005570:	f8ca 3000 	str.w	r3, [sl]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	6921      	ldr	r1, [r4, #16]
 8005586:	464a      	mov	r2, r9
 8005588:	f000 fabe 	bl	8005b08 <memcpy>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	6126      	str	r6, [r4, #16]
 800559a:	6165      	str	r5, [r4, #20]
 800559c:	444e      	add	r6, r9
 800559e:	eba5 0509 	sub.w	r5, r5, r9
 80055a2:	6026      	str	r6, [r4, #0]
 80055a4:	60a5      	str	r5, [r4, #8]
 80055a6:	463e      	mov	r6, r7
 80055a8:	42be      	cmp	r6, r7
 80055aa:	d900      	bls.n	80055ae <__ssputs_r+0x86>
 80055ac:	463e      	mov	r6, r7
 80055ae:	4632      	mov	r2, r6
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	4641      	mov	r1, r8
 80055b4:	f000 fab6 	bl	8005b24 <memmove>
 80055b8:	68a3      	ldr	r3, [r4, #8]
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	1b9b      	subs	r3, r3, r6
 80055be:	4432      	add	r2, r6
 80055c0:	60a3      	str	r3, [r4, #8]
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	2000      	movs	r0, #0
 80055c6:	e7db      	b.n	8005580 <__ssputs_r+0x58>
 80055c8:	462a      	mov	r2, r5
 80055ca:	f000 fb6f 	bl	8005cac <_realloc_r>
 80055ce:	4606      	mov	r6, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1e1      	bne.n	8005598 <__ssputs_r+0x70>
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	4650      	mov	r0, sl
 80055d8:	f000 fabe 	bl	8005b58 <_free_r>
 80055dc:	e7c7      	b.n	800556e <__ssputs_r+0x46>
	...

080055e0 <_svfiprintf_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4698      	mov	r8, r3
 80055e6:	898b      	ldrh	r3, [r1, #12]
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	4607      	mov	r7, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	d50e      	bpl.n	8005612 <_svfiprintf_r+0x32>
 80055f4:	690b      	ldr	r3, [r1, #16]
 80055f6:	b963      	cbnz	r3, 8005612 <_svfiprintf_r+0x32>
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	f000 fafd 	bl	8005bf8 <_malloc_r>
 80055fe:	6028      	str	r0, [r5, #0]
 8005600:	6128      	str	r0, [r5, #16]
 8005602:	b920      	cbnz	r0, 800560e <_svfiprintf_r+0x2e>
 8005604:	230c      	movs	r3, #12
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e0d1      	b.n	80057b2 <_svfiprintf_r+0x1d2>
 800560e:	2340      	movs	r3, #64	; 0x40
 8005610:	616b      	str	r3, [r5, #20]
 8005612:	2300      	movs	r3, #0
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	2320      	movs	r3, #32
 8005618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005620:	2330      	movs	r3, #48	; 0x30
 8005622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057cc <_svfiprintf_r+0x1ec>
 8005626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562a:	f04f 0901 	mov.w	r9, #1
 800562e:	4623      	mov	r3, r4
 8005630:	469a      	mov	sl, r3
 8005632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005636:	b10a      	cbz	r2, 800563c <_svfiprintf_r+0x5c>
 8005638:	2a25      	cmp	r2, #37	; 0x25
 800563a:	d1f9      	bne.n	8005630 <_svfiprintf_r+0x50>
 800563c:	ebba 0b04 	subs.w	fp, sl, r4
 8005640:	d00b      	beq.n	800565a <_svfiprintf_r+0x7a>
 8005642:	465b      	mov	r3, fp
 8005644:	4622      	mov	r2, r4
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ff6d 	bl	8005528 <__ssputs_r>
 800564e:	3001      	adds	r0, #1
 8005650:	f000 80aa 	beq.w	80057a8 <_svfiprintf_r+0x1c8>
 8005654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005656:	445a      	add	r2, fp
 8005658:	9209      	str	r2, [sp, #36]	; 0x24
 800565a:	f89a 3000 	ldrb.w	r3, [sl]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80a2 	beq.w	80057a8 <_svfiprintf_r+0x1c8>
 8005664:	2300      	movs	r3, #0
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800566e:	f10a 0a01 	add.w	sl, sl, #1
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	9307      	str	r3, [sp, #28]
 8005676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567a:	931a      	str	r3, [sp, #104]	; 0x68
 800567c:	4654      	mov	r4, sl
 800567e:	2205      	movs	r2, #5
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	4851      	ldr	r0, [pc, #324]	; (80057cc <_svfiprintf_r+0x1ec>)
 8005686:	f7fa fdab 	bl	80001e0 <memchr>
 800568a:	9a04      	ldr	r2, [sp, #16]
 800568c:	b9d8      	cbnz	r0, 80056c6 <_svfiprintf_r+0xe6>
 800568e:	06d0      	lsls	r0, r2, #27
 8005690:	bf44      	itt	mi
 8005692:	2320      	movmi	r3, #32
 8005694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005698:	0711      	lsls	r1, r2, #28
 800569a:	bf44      	itt	mi
 800569c:	232b      	movmi	r3, #43	; 0x2b
 800569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a2:	f89a 3000 	ldrb.w	r3, [sl]
 80056a6:	2b2a      	cmp	r3, #42	; 0x2a
 80056a8:	d015      	beq.n	80056d6 <_svfiprintf_r+0xf6>
 80056aa:	9a07      	ldr	r2, [sp, #28]
 80056ac:	4654      	mov	r4, sl
 80056ae:	2000      	movs	r0, #0
 80056b0:	f04f 0c0a 	mov.w	ip, #10
 80056b4:	4621      	mov	r1, r4
 80056b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ba:	3b30      	subs	r3, #48	; 0x30
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d94e      	bls.n	800575e <_svfiprintf_r+0x17e>
 80056c0:	b1b0      	cbz	r0, 80056f0 <_svfiprintf_r+0x110>
 80056c2:	9207      	str	r2, [sp, #28]
 80056c4:	e014      	b.n	80056f0 <_svfiprintf_r+0x110>
 80056c6:	eba0 0308 	sub.w	r3, r0, r8
 80056ca:	fa09 f303 	lsl.w	r3, r9, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	9304      	str	r3, [sp, #16]
 80056d2:	46a2      	mov	sl, r4
 80056d4:	e7d2      	b.n	800567c <_svfiprintf_r+0x9c>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	9103      	str	r1, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfbb      	ittet	lt
 80056e2:	425b      	neglt	r3, r3
 80056e4:	f042 0202 	orrlt.w	r2, r2, #2
 80056e8:	9307      	strge	r3, [sp, #28]
 80056ea:	9307      	strlt	r3, [sp, #28]
 80056ec:	bfb8      	it	lt
 80056ee:	9204      	strlt	r2, [sp, #16]
 80056f0:	7823      	ldrb	r3, [r4, #0]
 80056f2:	2b2e      	cmp	r3, #46	; 0x2e
 80056f4:	d10c      	bne.n	8005710 <_svfiprintf_r+0x130>
 80056f6:	7863      	ldrb	r3, [r4, #1]
 80056f8:	2b2a      	cmp	r3, #42	; 0x2a
 80056fa:	d135      	bne.n	8005768 <_svfiprintf_r+0x188>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9203      	str	r2, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfb8      	it	lt
 8005708:	f04f 33ff 	movlt.w	r3, #4294967295
 800570c:	3402      	adds	r4, #2
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057dc <_svfiprintf_r+0x1fc>
 8005714:	7821      	ldrb	r1, [r4, #0]
 8005716:	2203      	movs	r2, #3
 8005718:	4650      	mov	r0, sl
 800571a:	f7fa fd61 	bl	80001e0 <memchr>
 800571e:	b140      	cbz	r0, 8005732 <_svfiprintf_r+0x152>
 8005720:	2340      	movs	r3, #64	; 0x40
 8005722:	eba0 000a 	sub.w	r0, r0, sl
 8005726:	fa03 f000 	lsl.w	r0, r3, r0
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	4303      	orrs	r3, r0
 800572e:	3401      	adds	r4, #1
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4826      	ldr	r0, [pc, #152]	; (80057d0 <_svfiprintf_r+0x1f0>)
 8005738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573c:	2206      	movs	r2, #6
 800573e:	f7fa fd4f 	bl	80001e0 <memchr>
 8005742:	2800      	cmp	r0, #0
 8005744:	d038      	beq.n	80057b8 <_svfiprintf_r+0x1d8>
 8005746:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <_svfiprintf_r+0x1f4>)
 8005748:	bb1b      	cbnz	r3, 8005792 <_svfiprintf_r+0x1b2>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	3307      	adds	r3, #7
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	3308      	adds	r3, #8
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	4433      	add	r3, r6
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	e767      	b.n	800562e <_svfiprintf_r+0x4e>
 800575e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005762:	460c      	mov	r4, r1
 8005764:	2001      	movs	r0, #1
 8005766:	e7a5      	b.n	80056b4 <_svfiprintf_r+0xd4>
 8005768:	2300      	movs	r3, #0
 800576a:	3401      	adds	r4, #1
 800576c:	9305      	str	r3, [sp, #20]
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 0c0a 	mov.w	ip, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577a:	3a30      	subs	r2, #48	; 0x30
 800577c:	2a09      	cmp	r2, #9
 800577e:	d903      	bls.n	8005788 <_svfiprintf_r+0x1a8>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0c5      	beq.n	8005710 <_svfiprintf_r+0x130>
 8005784:	9105      	str	r1, [sp, #20]
 8005786:	e7c3      	b.n	8005710 <_svfiprintf_r+0x130>
 8005788:	fb0c 2101 	mla	r1, ip, r1, r2
 800578c:	4604      	mov	r4, r0
 800578e:	2301      	movs	r3, #1
 8005790:	e7f0      	b.n	8005774 <_svfiprintf_r+0x194>
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <_svfiprintf_r+0x1f8>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4638      	mov	r0, r7
 800579e:	f3af 8000 	nop.w
 80057a2:	1c42      	adds	r2, r0, #1
 80057a4:	4606      	mov	r6, r0
 80057a6:	d1d6      	bne.n	8005756 <_svfiprintf_r+0x176>
 80057a8:	89ab      	ldrh	r3, [r5, #12]
 80057aa:	065b      	lsls	r3, r3, #25
 80057ac:	f53f af2c 	bmi.w	8005608 <_svfiprintf_r+0x28>
 80057b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b2:	b01d      	add	sp, #116	; 0x74
 80057b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b8:	ab03      	add	r3, sp, #12
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	462a      	mov	r2, r5
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <_svfiprintf_r+0x1f8>)
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4638      	mov	r0, r7
 80057c4:	f000 f87a 	bl	80058bc <_printf_i>
 80057c8:	e7eb      	b.n	80057a2 <_svfiprintf_r+0x1c2>
 80057ca:	bf00      	nop
 80057cc:	08005dac 	.word	0x08005dac
 80057d0:	08005db6 	.word	0x08005db6
 80057d4:	00000000 	.word	0x00000000
 80057d8:	08005529 	.word	0x08005529
 80057dc:	08005db2 	.word	0x08005db2

080057e0 <_printf_common>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	4699      	mov	r9, r3
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	bfb8      	it	lt
 80057f4:	4613      	movlt	r3, r2
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057fc:	4607      	mov	r7, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	b10a      	cbz	r2, 8005806 <_printf_common+0x26>
 8005802:	3301      	adds	r3, #1
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	6833      	ldrmi	r3, [r6, #0]
 800580e:	3302      	addmi	r3, #2
 8005810:	6033      	strmi	r3, [r6, #0]
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	f015 0506 	ands.w	r5, r5, #6
 8005818:	d106      	bne.n	8005828 <_printf_common+0x48>
 800581a:	f104 0a19 	add.w	sl, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	6832      	ldr	r2, [r6, #0]
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	42ab      	cmp	r3, r5
 8005826:	dc26      	bgt.n	8005876 <_printf_common+0x96>
 8005828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800582c:	1e13      	subs	r3, r2, #0
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	2301      	movne	r3, #1
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d42b      	bmi.n	8005890 <_printf_common+0xb0>
 8005838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800583c:	4649      	mov	r1, r9
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	3001      	adds	r0, #1
 8005844:	d01e      	beq.n	8005884 <_printf_common+0xa4>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	68e5      	ldr	r5, [r4, #12]
 800584a:	6832      	ldr	r2, [r6, #0]
 800584c:	f003 0306 	and.w	r3, r3, #6
 8005850:	2b04      	cmp	r3, #4
 8005852:	bf08      	it	eq
 8005854:	1aad      	subeq	r5, r5, r2
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	bf0c      	ite	eq
 800585c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005860:	2500      	movne	r5, #0
 8005862:	4293      	cmp	r3, r2
 8005864:	bfc4      	itt	gt
 8005866:	1a9b      	subgt	r3, r3, r2
 8005868:	18ed      	addgt	r5, r5, r3
 800586a:	2600      	movs	r6, #0
 800586c:	341a      	adds	r4, #26
 800586e:	42b5      	cmp	r5, r6
 8005870:	d11a      	bne.n	80058a8 <_printf_common+0xc8>
 8005872:	2000      	movs	r0, #0
 8005874:	e008      	b.n	8005888 <_printf_common+0xa8>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4649      	mov	r1, r9
 800587c:	4638      	mov	r0, r7
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d103      	bne.n	800588c <_printf_common+0xac>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	3501      	adds	r5, #1
 800588e:	e7c6      	b.n	800581e <_printf_common+0x3e>
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	2030      	movs	r0, #48	; 0x30
 8005896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589a:	4422      	add	r2, r4
 800589c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a4:	3302      	adds	r3, #2
 80058a6:	e7c7      	b.n	8005838 <_printf_common+0x58>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4622      	mov	r2, r4
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa4>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d9      	b.n	800586e <_printf_common+0x8e>
	...

080058bc <_printf_i>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	460c      	mov	r4, r1
 80058c2:	4691      	mov	r9, r2
 80058c4:	7e27      	ldrb	r7, [r4, #24]
 80058c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058c8:	2f78      	cmp	r7, #120	; 0x78
 80058ca:	4680      	mov	r8, r0
 80058cc:	469a      	mov	sl, r3
 80058ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d2:	d807      	bhi.n	80058e4 <_printf_i+0x28>
 80058d4:	2f62      	cmp	r7, #98	; 0x62
 80058d6:	d80a      	bhi.n	80058ee <_printf_i+0x32>
 80058d8:	2f00      	cmp	r7, #0
 80058da:	f000 80d8 	beq.w	8005a8e <_printf_i+0x1d2>
 80058de:	2f58      	cmp	r7, #88	; 0x58
 80058e0:	f000 80a3 	beq.w	8005a2a <_printf_i+0x16e>
 80058e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ec:	e03a      	b.n	8005964 <_printf_i+0xa8>
 80058ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f2:	2b15      	cmp	r3, #21
 80058f4:	d8f6      	bhi.n	80058e4 <_printf_i+0x28>
 80058f6:	a001      	add	r0, pc, #4	; (adr r0, 80058fc <_printf_i+0x40>)
 80058f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005969 	.word	0x08005969
 8005904:	080058e5 	.word	0x080058e5
 8005908:	080058e5 	.word	0x080058e5
 800590c:	080058e5 	.word	0x080058e5
 8005910:	080058e5 	.word	0x080058e5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058e5 	.word	0x080058e5
 800591c:	080058e5 	.word	0x080058e5
 8005920:	080058e5 	.word	0x080058e5
 8005924:	080058e5 	.word	0x080058e5
 8005928:	08005a75 	.word	0x08005a75
 800592c:	08005999 	.word	0x08005999
 8005930:	08005a57 	.word	0x08005a57
 8005934:	080058e5 	.word	0x080058e5
 8005938:	080058e5 	.word	0x080058e5
 800593c:	08005a97 	.word	0x08005a97
 8005940:	080058e5 	.word	0x080058e5
 8005944:	08005999 	.word	0x08005999
 8005948:	080058e5 	.word	0x080058e5
 800594c:	080058e5 	.word	0x080058e5
 8005950:	08005a5f 	.word	0x08005a5f
 8005954:	680b      	ldr	r3, [r1, #0]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	600a      	str	r2, [r1, #0]
 800595c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005964:	2301      	movs	r3, #1
 8005966:	e0a3      	b.n	8005ab0 <_printf_i+0x1f4>
 8005968:	6825      	ldr	r5, [r4, #0]
 800596a:	6808      	ldr	r0, [r1, #0]
 800596c:	062e      	lsls	r6, r5, #24
 800596e:	f100 0304 	add.w	r3, r0, #4
 8005972:	d50a      	bpl.n	800598a <_printf_i+0xce>
 8005974:	6805      	ldr	r5, [r0, #0]
 8005976:	600b      	str	r3, [r1, #0]
 8005978:	2d00      	cmp	r5, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0xc8>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	426d      	negs	r5, r5
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	485e      	ldr	r0, [pc, #376]	; (8005b00 <_printf_i+0x244>)
 8005986:	230a      	movs	r3, #10
 8005988:	e019      	b.n	80059be <_printf_i+0x102>
 800598a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800598e:	6805      	ldr	r5, [r0, #0]
 8005990:	600b      	str	r3, [r1, #0]
 8005992:	bf18      	it	ne
 8005994:	b22d      	sxthne	r5, r5
 8005996:	e7ef      	b.n	8005978 <_printf_i+0xbc>
 8005998:	680b      	ldr	r3, [r1, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	1d18      	adds	r0, r3, #4
 800599e:	6008      	str	r0, [r1, #0]
 80059a0:	0628      	lsls	r0, r5, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xec>
 80059a4:	681d      	ldr	r5, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0xf2>
 80059a8:	0669      	lsls	r1, r5, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xe8>
 80059ac:	881d      	ldrh	r5, [r3, #0]
 80059ae:	4854      	ldr	r0, [pc, #336]	; (8005b00 <_printf_i+0x244>)
 80059b0:	2f6f      	cmp	r7, #111	; 0x6f
 80059b2:	bf0c      	ite	eq
 80059b4:	2308      	moveq	r3, #8
 80059b6:	230a      	movne	r3, #10
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059be:	6866      	ldr	r6, [r4, #4]
 80059c0:	60a6      	str	r6, [r4, #8]
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	bfa2      	ittt	ge
 80059c6:	6821      	ldrge	r1, [r4, #0]
 80059c8:	f021 0104 	bicge.w	r1, r1, #4
 80059cc:	6021      	strge	r1, [r4, #0]
 80059ce:	b90d      	cbnz	r5, 80059d4 <_printf_i+0x118>
 80059d0:	2e00      	cmp	r6, #0
 80059d2:	d04d      	beq.n	8005a70 <_printf_i+0x1b4>
 80059d4:	4616      	mov	r6, r2
 80059d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80059da:	fb03 5711 	mls	r7, r3, r1, r5
 80059de:	5dc7      	ldrb	r7, [r0, r7]
 80059e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e4:	462f      	mov	r7, r5
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	460d      	mov	r5, r1
 80059ea:	d9f4      	bls.n	80059d6 <_printf_i+0x11a>
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d10b      	bne.n	8005a08 <_printf_i+0x14c>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07df      	lsls	r7, r3, #31
 80059f4:	d508      	bpl.n	8005a08 <_printf_i+0x14c>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4299      	cmp	r1, r3
 80059fc:	bfde      	ittt	le
 80059fe:	2330      	movle	r3, #48	; 0x30
 8005a00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a08:	1b92      	subs	r2, r2, r6
 8005a0a:	6122      	str	r2, [r4, #16]
 8005a0c:	f8cd a000 	str.w	sl, [sp]
 8005a10:	464b      	mov	r3, r9
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7ff fee2 	bl	80057e0 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14c      	bne.n	8005aba <_printf_i+0x1fe>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	4835      	ldr	r0, [pc, #212]	; (8005b00 <_printf_i+0x244>)
 8005a2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	680e      	ldr	r6, [r1, #0]
 8005a34:	061f      	lsls	r7, r3, #24
 8005a36:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a3a:	600e      	str	r6, [r1, #0]
 8005a3c:	d514      	bpl.n	8005a68 <_printf_i+0x1ac>
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	bf44      	itt	mi
 8005a42:	f043 0320 	orrmi.w	r3, r3, #32
 8005a46:	6023      	strmi	r3, [r4, #0]
 8005a48:	b91d      	cbnz	r5, 8005a52 <_printf_i+0x196>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f023 0320 	bic.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2310      	movs	r3, #16
 8005a54:	e7b0      	b.n	80059b8 <_printf_i+0xfc>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f043 0320 	orr.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2378      	movs	r3, #120	; 0x78
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_printf_i+0x248>)
 8005a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a66:	e7e3      	b.n	8005a30 <_printf_i+0x174>
 8005a68:	065e      	lsls	r6, r3, #25
 8005a6a:	bf48      	it	mi
 8005a6c:	b2ad      	uxthmi	r5, r5
 8005a6e:	e7e6      	b.n	8005a3e <_printf_i+0x182>
 8005a70:	4616      	mov	r6, r2
 8005a72:	e7bb      	b.n	80059ec <_printf_i+0x130>
 8005a74:	680b      	ldr	r3, [r1, #0]
 8005a76:	6826      	ldr	r6, [r4, #0]
 8005a78:	6960      	ldr	r0, [r4, #20]
 8005a7a:	1d1d      	adds	r5, r3, #4
 8005a7c:	600d      	str	r5, [r1, #0]
 8005a7e:	0635      	lsls	r5, r6, #24
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0x1cc>
 8005a84:	6018      	str	r0, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <_printf_i+0x1d2>
 8005a88:	0671      	lsls	r1, r6, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0x1c8>
 8005a8c:	8018      	strh	r0, [r3, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	4616      	mov	r6, r2
 8005a94:	e7ba      	b.n	8005a0c <_printf_i+0x150>
 8005a96:	680b      	ldr	r3, [r1, #0]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	600a      	str	r2, [r1, #0]
 8005a9c:	681e      	ldr	r6, [r3, #0]
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7fa fb9c 	bl	80001e0 <memchr>
 8005aa8:	b108      	cbz	r0, 8005aae <_printf_i+0x1f2>
 8005aaa:	1b80      	subs	r0, r0, r6
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	e7a8      	b.n	8005a0c <_printf_i+0x150>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	4632      	mov	r2, r6
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0ab      	beq.n	8005a20 <_printf_i+0x164>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	d413      	bmi.n	8005af6 <_printf_i+0x23a>
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	bfb8      	it	lt
 8005ad6:	4618      	movlt	r0, r3
 8005ad8:	e7a4      	b.n	8005a24 <_printf_i+0x168>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4632      	mov	r2, r6
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d09b      	beq.n	8005a20 <_printf_i+0x164>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	9903      	ldr	r1, [sp, #12]
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dcf2      	bgt.n	8005ada <_printf_i+0x21e>
 8005af4:	e7eb      	b.n	8005ace <_printf_i+0x212>
 8005af6:	2500      	movs	r5, #0
 8005af8:	f104 0619 	add.w	r6, r4, #25
 8005afc:	e7f5      	b.n	8005aea <_printf_i+0x22e>
 8005afe:	bf00      	nop
 8005b00:	08005dbd 	.word	0x08005dbd
 8005b04:	08005dce 	.word	0x08005dce

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memmove>:
 8005b24:	4288      	cmp	r0, r1
 8005b26:	b510      	push	{r4, lr}
 8005b28:	eb01 0402 	add.w	r4, r1, r2
 8005b2c:	d902      	bls.n	8005b34 <memmove+0x10>
 8005b2e:	4284      	cmp	r4, r0
 8005b30:	4623      	mov	r3, r4
 8005b32:	d807      	bhi.n	8005b44 <memmove+0x20>
 8005b34:	1e43      	subs	r3, r0, #1
 8005b36:	42a1      	cmp	r1, r4
 8005b38:	d008      	beq.n	8005b4c <memmove+0x28>
 8005b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b42:	e7f8      	b.n	8005b36 <memmove+0x12>
 8005b44:	4402      	add	r2, r0
 8005b46:	4601      	mov	r1, r0
 8005b48:	428a      	cmp	r2, r1
 8005b4a:	d100      	bne.n	8005b4e <memmove+0x2a>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b56:	e7f7      	b.n	8005b48 <memmove+0x24>

08005b58 <_free_r>:
 8005b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d048      	beq.n	8005bf0 <_free_r+0x98>
 8005b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b62:	9001      	str	r0, [sp, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f1a1 0404 	sub.w	r4, r1, #4
 8005b6a:	bfb8      	it	lt
 8005b6c:	18e4      	addlt	r4, r4, r3
 8005b6e:	f000 f8d3 	bl	8005d18 <__malloc_lock>
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <_free_r+0x9c>)
 8005b74:	9801      	ldr	r0, [sp, #4]
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	4615      	mov	r5, r2
 8005b7a:	b933      	cbnz	r3, 8005b8a <_free_r+0x32>
 8005b7c:	6063      	str	r3, [r4, #4]
 8005b7e:	6014      	str	r4, [r2, #0]
 8005b80:	b003      	add	sp, #12
 8005b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b86:	f000 b8cd 	b.w	8005d24 <__malloc_unlock>
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	d90b      	bls.n	8005ba6 <_free_r+0x4e>
 8005b8e:	6821      	ldr	r1, [r4, #0]
 8005b90:	1862      	adds	r2, r4, r1
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bf04      	itt	eq
 8005b96:	681a      	ldreq	r2, [r3, #0]
 8005b98:	685b      	ldreq	r3, [r3, #4]
 8005b9a:	6063      	str	r3, [r4, #4]
 8005b9c:	bf04      	itt	eq
 8005b9e:	1852      	addeq	r2, r2, r1
 8005ba0:	6022      	streq	r2, [r4, #0]
 8005ba2:	602c      	str	r4, [r5, #0]
 8005ba4:	e7ec      	b.n	8005b80 <_free_r+0x28>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b10b      	cbz	r3, 8005bb0 <_free_r+0x58>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d9fa      	bls.n	8005ba6 <_free_r+0x4e>
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	1855      	adds	r5, r2, r1
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d10b      	bne.n	8005bd0 <_free_r+0x78>
 8005bb8:	6824      	ldr	r4, [r4, #0]
 8005bba:	4421      	add	r1, r4
 8005bbc:	1854      	adds	r4, r2, r1
 8005bbe:	42a3      	cmp	r3, r4
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	d1dd      	bne.n	8005b80 <_free_r+0x28>
 8005bc4:	681c      	ldr	r4, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	6053      	str	r3, [r2, #4]
 8005bca:	4421      	add	r1, r4
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	e7d7      	b.n	8005b80 <_free_r+0x28>
 8005bd0:	d902      	bls.n	8005bd8 <_free_r+0x80>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	e7d3      	b.n	8005b80 <_free_r+0x28>
 8005bd8:	6825      	ldr	r5, [r4, #0]
 8005bda:	1961      	adds	r1, r4, r5
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	bf04      	itt	eq
 8005be0:	6819      	ldreq	r1, [r3, #0]
 8005be2:	685b      	ldreq	r3, [r3, #4]
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	bf04      	itt	eq
 8005be8:	1949      	addeq	r1, r1, r5
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	6054      	str	r4, [r2, #4]
 8005bee:	e7c7      	b.n	8005b80 <_free_r+0x28>
 8005bf0:	b003      	add	sp, #12
 8005bf2:	bd30      	pop	{r4, r5, pc}
 8005bf4:	200000a4 	.word	0x200000a4

08005bf8 <_malloc_r>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	1ccd      	adds	r5, r1, #3
 8005bfc:	f025 0503 	bic.w	r5, r5, #3
 8005c00:	3508      	adds	r5, #8
 8005c02:	2d0c      	cmp	r5, #12
 8005c04:	bf38      	it	cc
 8005c06:	250c      	movcc	r5, #12
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	db01      	blt.n	8005c12 <_malloc_r+0x1a>
 8005c0e:	42a9      	cmp	r1, r5
 8005c10:	d903      	bls.n	8005c1a <_malloc_r+0x22>
 8005c12:	230c      	movs	r3, #12
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	2000      	movs	r0, #0
 8005c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c1a:	f000 f87d 	bl	8005d18 <__malloc_lock>
 8005c1e:	4921      	ldr	r1, [pc, #132]	; (8005ca4 <_malloc_r+0xac>)
 8005c20:	680a      	ldr	r2, [r1, #0]
 8005c22:	4614      	mov	r4, r2
 8005c24:	b99c      	cbnz	r4, 8005c4e <_malloc_r+0x56>
 8005c26:	4f20      	ldr	r7, [pc, #128]	; (8005ca8 <_malloc_r+0xb0>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b923      	cbnz	r3, 8005c36 <_malloc_r+0x3e>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 f862 	bl	8005cf8 <_sbrk_r>
 8005c34:	6038      	str	r0, [r7, #0]
 8005c36:	4629      	mov	r1, r5
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f85d 	bl	8005cf8 <_sbrk_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d123      	bne.n	8005c8a <_malloc_r+0x92>
 8005c42:	230c      	movs	r3, #12
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	4630      	mov	r0, r6
 8005c48:	f000 f86c 	bl	8005d24 <__malloc_unlock>
 8005c4c:	e7e3      	b.n	8005c16 <_malloc_r+0x1e>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	1b5b      	subs	r3, r3, r5
 8005c52:	d417      	bmi.n	8005c84 <_malloc_r+0x8c>
 8005c54:	2b0b      	cmp	r3, #11
 8005c56:	d903      	bls.n	8005c60 <_malloc_r+0x68>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	441c      	add	r4, r3
 8005c5c:	6025      	str	r5, [r4, #0]
 8005c5e:	e004      	b.n	8005c6a <_malloc_r+0x72>
 8005c60:	6863      	ldr	r3, [r4, #4]
 8005c62:	42a2      	cmp	r2, r4
 8005c64:	bf0c      	ite	eq
 8005c66:	600b      	streq	r3, [r1, #0]
 8005c68:	6053      	strne	r3, [r2, #4]
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 f85a 	bl	8005d24 <__malloc_unlock>
 8005c70:	f104 000b 	add.w	r0, r4, #11
 8005c74:	1d23      	adds	r3, r4, #4
 8005c76:	f020 0007 	bic.w	r0, r0, #7
 8005c7a:	1ac2      	subs	r2, r0, r3
 8005c7c:	d0cc      	beq.n	8005c18 <_malloc_r+0x20>
 8005c7e:	1a1b      	subs	r3, r3, r0
 8005c80:	50a3      	str	r3, [r4, r2]
 8005c82:	e7c9      	b.n	8005c18 <_malloc_r+0x20>
 8005c84:	4622      	mov	r2, r4
 8005c86:	6864      	ldr	r4, [r4, #4]
 8005c88:	e7cc      	b.n	8005c24 <_malloc_r+0x2c>
 8005c8a:	1cc4      	adds	r4, r0, #3
 8005c8c:	f024 0403 	bic.w	r4, r4, #3
 8005c90:	42a0      	cmp	r0, r4
 8005c92:	d0e3      	beq.n	8005c5c <_malloc_r+0x64>
 8005c94:	1a21      	subs	r1, r4, r0
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 f82e 	bl	8005cf8 <_sbrk_r>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d1dd      	bne.n	8005c5c <_malloc_r+0x64>
 8005ca0:	e7cf      	b.n	8005c42 <_malloc_r+0x4a>
 8005ca2:	bf00      	nop
 8005ca4:	200000a4 	.word	0x200000a4
 8005ca8:	200000a8 	.word	0x200000a8

08005cac <_realloc_r>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	4607      	mov	r7, r0
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	460e      	mov	r6, r1
 8005cb4:	b921      	cbnz	r1, 8005cc0 <_realloc_r+0x14>
 8005cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cba:	4611      	mov	r1, r2
 8005cbc:	f7ff bf9c 	b.w	8005bf8 <_malloc_r>
 8005cc0:	b922      	cbnz	r2, 8005ccc <_realloc_r+0x20>
 8005cc2:	f7ff ff49 	bl	8005b58 <_free_r>
 8005cc6:	4625      	mov	r5, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ccc:	f000 f830 	bl	8005d30 <_malloc_usable_size_r>
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	d20f      	bcs.n	8005cf4 <_realloc_r+0x48>
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f7ff ff8e 	bl	8005bf8 <_malloc_r>
 8005cdc:	4605      	mov	r5, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d0f2      	beq.n	8005cc8 <_realloc_r+0x1c>
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	f7ff ff0f 	bl	8005b08 <memcpy>
 8005cea:	4631      	mov	r1, r6
 8005cec:	4638      	mov	r0, r7
 8005cee:	f7ff ff33 	bl	8005b58 <_free_r>
 8005cf2:	e7e9      	b.n	8005cc8 <_realloc_r+0x1c>
 8005cf4:	4635      	mov	r5, r6
 8005cf6:	e7e7      	b.n	8005cc8 <_realloc_r+0x1c>

08005cf8 <_sbrk_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d06      	ldr	r5, [pc, #24]	; (8005d14 <_sbrk_r+0x1c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	f7fb f90e 	bl	8000f24 <_sbrk>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_sbrk_r+0x1a>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_sbrk_r+0x1a>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	2000027c 	.word	0x2000027c

08005d18 <__malloc_lock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_lock+0x8>)
 8005d1a:	f000 b811 	b.w	8005d40 <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20000284 	.word	0x20000284

08005d24 <__malloc_unlock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__malloc_unlock+0x8>)
 8005d26:	f000 b80c 	b.w	8005d42 <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20000284 	.word	0x20000284

08005d30 <_malloc_usable_size_r>:
 8005d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d34:	1f18      	subs	r0, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfbc      	itt	lt
 8005d3a:	580b      	ldrlt	r3, [r1, r0]
 8005d3c:	18c0      	addlt	r0, r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <__retarget_lock_acquire_recursive>:
 8005d40:	4770      	bx	lr

08005d42 <__retarget_lock_release_recursive>:
 8005d42:	4770      	bx	lr

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
