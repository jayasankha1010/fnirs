
DSP_optode_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d0  080049d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d8  080049d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  080049ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080049ec  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f86  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002819  00000000  00000000  00038fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235a8  00000000  00000000  0003e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169fe  00000000  00000000  00061660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e07a6  00000000  00000000  0007805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  00158858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004970 	.word	0x08004970

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004970 	.word	0x08004970

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc1b 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80e 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f990 	bl	80007f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d4:	f000 f860 	bl	8000598 <MX_ADC1_Init>
  MX_DAC1_Init();
 80004d8:	f000 f8c2 	bl	8000660 <MX_DAC1_Init>
  MX_TIM16_Init();
 80004dc:	f000 f964 	bl	80007a8 <MX_TIM16_Init>
  MX_LPUART1_UART_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 80004e4:	f000 f926 	bl	8000734 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x24>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b096      	sub	sp, #88	; 0x58
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2244      	movs	r2, #68	; 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fa30 	bl	8004960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000512:	f002 f96b 	bl	80027ec <HAL_PWREx_ControlVoltageScaling>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051c:	f000 f9e2 	bl	80008e4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000520:	f002 f946 	bl	80027b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <SystemClock_Config+0xa8>)
 8000526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <SystemClock_Config+0xa8>)
 800052c:	f023 0318 	bic.w	r3, r3, #24
 8000530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000534:	2314      	movs	r3, #20
 8000536:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000544:	2360      	movs	r3, #96	; 0x60
 8000546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4618      	mov	r0, r3
 8000552:	f002 f9a1 	bl	8002898 <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800055c:	f000 f9c2 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
 8000562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fdad 	bl	80030d8 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000584:	f000 f9ae 	bl	80008e4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000588:	f003 f9c4 	bl	8003914 <HAL_RCCEx_EnableMSIPLLMode>
}
 800058c:	bf00      	nop
 800058e:	3758      	adds	r7, #88	; 0x58
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <MX_ADC1_Init+0xc0>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005da:	2201      	movs	r2, #1
 80005dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_ADC1_Init+0xbc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_ADC1_Init+0xbc>)
 8000602:	2200      	movs	r2, #0
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_ADC1_Init+0xbc>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <MX_ADC1_Init+0xbc>)
 8000610:	f000 fdc2 	bl	8001198 <HAL_ADC_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800061a:	f000 f963 	bl	80008e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_ADC1_Init+0xc4>)
 8000620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000622:	2306      	movs	r3, #6
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062a:	237f      	movs	r3, #127	; 0x7f
 800062c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062e:	2304      	movs	r3, #4
 8000630:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_ADC1_Init+0xbc>)
 800063c:	f001 f8c6 	bl	80017cc <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000646:	f000 f94d 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000124 	.word	0x20000124
 8000658:	50040000 	.word	0x50040000
 800065c:	19200040 	.word	0x19200040

08000660 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2224      	movs	r2, #36	; 0x24
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f004 f977 	bl	8004960 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_DAC1_Init+0x70>)
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <MX_DAC1_Init+0x74>)
 8000676:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <MX_DAC1_Init+0x70>)
 800067a:	f001 fdca 	bl	8002212 <HAL_DAC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000684:	f000 f92e 	bl	80008e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_DAC1_Init+0x70>)
 80006a4:	f001 fdd7 	bl	8002256 <HAL_DAC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f919 	bl	80008e4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2210      	movs	r2, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DAC1_Init+0x70>)
 80006ba:	f001 fdcc 	bl	8002256 <HAL_DAC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006c4:	f000 f90e 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	40007400 	.word	0x40007400

080006d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_LPUART1_UART_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_LPUART1_UART_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 80006ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_LPUART1_UART_Init+0x50>)
 8000716:	f003 fccd 	bl	80040b4 <HAL_UART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f8e0 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000a0 	.word	0x200000a0
 800072c:	40008000 	.word	0x40008000
 8000730:	00033324 	.word	0x00033324

08000734 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_SPI2_Init+0x6c>)
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <MX_SPI2_Init+0x70>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_SPI2_Init+0x6c>)
 800074c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000750:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI2_Init+0x6c>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI2_Init+0x6c>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI2_Init+0x6c>)
 800077a:	2207      	movs	r2, #7
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI2_Init+0x6c>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_SPI2_Init+0x6c>)
 800078c:	f003 f9c4 	bl	8003b18 <HAL_SPI_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000796:	f000 f8a5 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000028 	.word	0x20000028
 80007a4:	40003800 	.word	0x40003800

080007a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_TIM16_Init+0x44>)
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <MX_TIM16_Init+0x48>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_TIM16_Init+0x44>)
 80007b4:	224f      	movs	r2, #79	; 0x4f
 80007b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_TIM16_Init+0x44>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_TIM16_Init+0x44>)
 80007c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80007c4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_TIM16_Init+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_TIM16_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_TIM16_Init+0x44>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_TIM16_Init+0x44>)
 80007da:	f003 fa40 	bl	8003c5e <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007e4:	f000 f87e 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000188 	.word	0x20000188
 80007f0:	40014400 	.word	0x40014400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <MX_GPIO_Init+0xe8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0xe8>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a27      	ldr	r2, [pc, #156]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_CTR_Pin|B_CTR_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	21c0      	movs	r1, #192	; 0xc0
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f001 ff85 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	4819      	ldr	r0, [pc, #100]	; (80008e0 <MX_GPIO_Init+0xec>)
 800087c:	f001 ff80 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_STATUS_Pin B_STATUS_Pin */
  GPIO_InitStruct.Pin = A_STATUS_Pin|B_STATUS_Pin;
 8000880:	2305      	movs	r3, #5
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f001 fdf9 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_CTR_Pin B_CTR_Pin */
  GPIO_InitStruct.Pin = A_CTR_Pin|B_CTR_Pin;
 800089a:	23c0      	movs	r3, #192	; 0xc0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f001 fdea 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xec>)
 80008d0:	f001 fddc 	bl	800248c <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000800 	.word	0x48000800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0a0      	sub	sp, #128	; 0x80
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	225c      	movs	r2, #92	; 0x5c
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f004 f801 	bl	8004960 <memset>
  if(hadc->Instance==ADC1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <HAL_ADC_MspInit+0xd0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d14b      	bne.n	8000a00 <HAL_ADC_MspInit+0xc8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000968:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800096c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800096e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000972:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800097c:	2310      	movs	r3, #16
 800097e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000980:	2307      	movs	r3, #7
 8000982:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800098c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fda4 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80009a2:	f7ff ff9f 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_ADC_MspInit+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <HAL_ADC_MspInit+0xd4>)
 80009ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_ADC_MspInit+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_ADC_MspInit+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <HAL_ADC_MspInit+0xd4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_ADC_MspInit+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d6:	2302      	movs	r3, #2
 80009d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009da:	230b      	movs	r3, #11
 80009dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f001 fd4e 	bl	800248c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2012      	movs	r0, #18
 80009f6:	f001 fbd6 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009fa:	2012      	movs	r0, #18
 80009fc:	f001 fbef 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3780      	adds	r7, #128	; 0x80
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	50040000 	.word	0x50040000
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_DAC_MspInit+0x74>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d124      	bne.n	8000a7c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a62:	2330      	movs	r3, #48	; 0x30
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f001 fd08 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40007400 	.word	0x40007400
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0a0      	sub	sp, #128	; 0x80
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	225c      	movs	r2, #92	; 0x5c
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 ff57 	bl	8004960 <memset>
  if(huart->Instance==LPUART1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_UART_MspInit+0xa4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d135      	bne.n	8000b28 <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000abc:	2320      	movs	r3, #32
 8000abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fd0b 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ff06 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000b24:	f001 fcb2 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3780      	adds	r7, #128	; 0x80
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40008000 	.word	0x40008000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000800 	.word	0x48000800

08000b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_SPI_MspInit+0x7c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d128      	bne.n	8000bb0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x80>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <HAL_SPI_MspInit+0x80>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_SPI_MspInit+0x80>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_SPI_MspInit+0x80>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_SPI_MspInit+0x80>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_SPI_MspInit+0x80>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000b8e:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_SPI_MspInit+0x84>)
 8000bac:	f001 fc6e 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40003800 	.word	0x40003800
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000400 	.word	0x48000400

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d113      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_TIM_Base_MspInit+0x48>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <HAL_TIM_Base_MspInit+0x48>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_TIM_Base_MspInit+0x48>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2019      	movs	r0, #25
 8000bf4:	f001 fad7 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bf8:	2019      	movs	r0, #25
 8000bfa:	f001 faf0 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40014400 	.word	0x40014400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f8a6 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <ADC1_IRQHandler+0x10>)
 8000c6a:	f000 fbdd 	bl	8001428 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000124 	.word	0x20000124

08000c78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c7e:	f003 f845 	bl	8003d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000188 	.word	0x20000188

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	; (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 fe1b 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fbef 	bl	80004c4 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf4:	080049e0 	.word	0x080049e0
  ldr r2, =_sbss
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cfc:	200001d8 	.word	0x200001d8

08000d00 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <CAN1_RX0_IRQHandler>

08000d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f001 fa3f 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f80e 	bl	8000d34 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d24:	f7ff fde4 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d023      	beq.n	8000d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_InitTick+0x70>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fa4b 	bl	80021fa <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d809      	bhi.n	8000d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f001 fa15 	bl	80021a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0x74>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e004      	b.n	8000d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e001      	b.n	8000d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200001d4 	.word	0x200001d4

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200001d4 	.word	0x200001d4

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	609a      	str	r2, [r3, #8]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3360      	adds	r3, #96	; 0x60
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <LL_ADC_SetOffset+0x44>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ed4:	bf00      	nop
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	03fff000 	.word	0x03fff000

08000ee4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3360      	adds	r3, #96	; 0x60
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3360      	adds	r3, #96	; 0x60
 8000f20:	461a      	mov	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3330      	adds	r3, #48	; 0x30
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	4413      	add	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	211f      	movs	r1, #31
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0e9b      	lsrs	r3, r3, #26
 8000fa4:	f003 011f 	and.w	r1, r3, #31
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	0e5b      	lsrs	r3, r3, #25
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	0d1b      	lsrs	r3, r3, #20
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	2107      	movs	r1, #7
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	0d1b      	lsrs	r3, r3, #20
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	431a      	orrs	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0318 	and.w	r3, r3, #24
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001064:	40d9      	lsrs	r1, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	400b      	ands	r3, r1
 800106a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106e:	431a      	orrs	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	0007ffff 	.word	0x0007ffff

08001088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6093      	str	r3, [r2, #8]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c0:	d101      	bne.n	80010c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001110:	d101      	bne.n	8001116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <LL_ADC_IsEnabled+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_ADC_IsEnabled+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b04      	cmp	r3, #4
 800115c:	d101      	bne.n	8001162 <LL_ADC_REG_IsConversionOngoing+0x18>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b08      	cmp	r3, #8
 8001182:	d101      	bne.n	8001188 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e12c      	b.n	800140c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fbb9 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff67 	bl	80010ac <LL_ADC_IsDeepPowerDownEnabled>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff4d 	bl	8001088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff82 	bl	80010fc <LL_ADC_IsInternalRegulatorEnabled>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d115      	bne.n	800122a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff66 	bl	80010d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001208:	4b82      	ldr	r3, [pc, #520]	; (8001414 <HAL_ADC_Init+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	4a82      	ldr	r2, [pc, #520]	; (8001418 <HAL_ADC_Init+0x280>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	3301      	adds	r3, #1
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800121c:	e002      	b.n	8001224 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3b01      	subs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f9      	bne.n	800121e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff64 	bl	80010fc <LL_ADC_IsInternalRegulatorEnabled>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10d      	bne.n	8001256 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f043 0210 	orr.w	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff75 	bl	800114a <LL_ADC_REG_IsConversionOngoing>
 8001260:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 80c5 	bne.w	80013fa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 80c1 	bne.w	80013fa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001280:	f043 0202 	orr.w	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff49 	bl	8001124 <LL_ADC_IsEnabled>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10b      	bne.n	80012b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001298:	4860      	ldr	r0, [pc, #384]	; (800141c <HAL_ADC_Init+0x284>)
 800129a:	f7ff ff43 	bl	8001124 <LL_ADC_IsEnabled>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4619      	mov	r1, r3
 80012aa:	485d      	ldr	r0, [pc, #372]	; (8001420 <HAL_ADC_Init+0x288>)
 80012ac:	f7ff fdc2 	bl	8000e34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e5b      	ldrb	r3, [r3, #25]
 80012b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d106      	bne.n	80012ec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	3b01      	subs	r3, #1
 80012e4:	045b      	lsls	r3, r3, #17
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_ADC_Init+0x28c>)
 8001310:	4013      	ands	r3, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	430b      	orrs	r3, r1
 800131a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff12 	bl	800114a <LL_ADC_REG_IsConversionOngoing>
 8001326:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff1f 	bl	8001170 <LL_ADC_INJ_IsConversionOngoing>
 8001332:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d13d      	bne.n	80013b6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d13a      	bne.n	80013b6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001344:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800134c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	69b9      	ldr	r1, [r7, #24]
 8001366:	430b      	orrs	r3, r1
 8001368:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001370:	2b01      	cmp	r3, #1
 8001372:	d118      	bne.n	80013a6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800138a:	4311      	orrs	r1, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001390:	4311      	orrs	r1, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001396:	430a      	orrs	r2, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	e007      	b.n	80013b6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10c      	bne.n	80013d8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f023 010f 	bic.w	r1, r3, #15
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	e007      	b.n	80013e8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020f 	bic.w	r2, r2, #15
 80013e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	f023 0303 	bic.w	r3, r3, #3
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
 80013f8:	e007      	b.n	800140a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f043 0210 	orr.w	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800140a:	7ffb      	ldrb	r3, [r7, #31]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	053e2d63 	.word	0x053e2d63
 800141c:	50040000 	.word	0x50040000
 8001420:	50040300 	.word	0x50040300
 8001424:	fff0c007 	.word	0xfff0c007

08001428 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d017      	beq.n	800147e <HAL_ADC_IRQHandler+0x56>
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d012      	beq.n	800147e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001468:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fdb3 	bl	8001fdc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_ADC_IRQHandler+0x6a>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05e      	beq.n	800155a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d059      	beq.n	800155a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fd3f 	bl	8000f46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d03e      	beq.n	800154c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d135      	bne.n	800154c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d12e      	bne.n	800154c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fe29 	bl	800114a <LL_ADC_REG_IsConversionOngoing>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11a      	bne.n	8001534 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 020c 	bic.w	r2, r2, #12
 800150c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d112      	bne.n	800154c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
 8001532:	e00b      	b.n	800154c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f043 0210 	orr.w	r2, r3, #16
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f91f 	bl	8001790 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_ADC_IRQHandler+0x146>
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001574:	2b00      	cmp	r3, #0
 8001576:	d072      	beq.n	800165e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06d      	beq.n	800165e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd10 	bl	8000fc4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80015a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fccb 	bl	8000f46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015b0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d047      	beq.n	8001650 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_ADC_IRQHandler+0x1b2>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03f      	beq.n	8001650 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d13a      	bne.n	8001650 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e4:	2b40      	cmp	r3, #64	; 0x40
 80015e6:	d133      	bne.n	8001650 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d12e      	bne.n	8001650 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdba 	bl	8001170 <LL_ADC_INJ_IsConversionOngoing>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d11a      	bne.n	8001638 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001610:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d112      	bne.n	8001650 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
 8001636:	e00b      	b.n	8001650 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	f043 0210 	orr.w	r2, r3, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fc9b 	bl	8001f8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2260      	movs	r2, #96	; 0x60
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001664:	2b00      	cmp	r3, #0
 8001666:	d011      	beq.n	800168c <HAL_ADC_IRQHandler+0x264>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f890 	bl	80017a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_IRQHandler+0x294>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fc81 	bl	8001fb4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d012      	beq.n	80016ec <HAL_ADC_IRQHandler+0x2c4>
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00d      	beq.n	80016ec <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fc73 	bl	8001fc8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d02a      	beq.n	800174c <HAL_ADC_IRQHandler+0x324>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d025      	beq.n	800174c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	e008      	b.n	8001720 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800171c:	2301      	movs	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10e      	bne.n	8001744 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f043 0202 	orr.w	r2, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f83a 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2210      	movs	r2, #16
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	2b00      	cmp	r3, #0
 8001754:	d018      	beq.n	8001788 <HAL_ADC_IRQHandler+0x360>
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f043 0208 	orr.w	r2, r3, #8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001780:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fc0c 	bl	8001fa0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0b6      	sub	sp, #216	; 0xd8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x22>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e3b9      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x796>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fca5 	bl	800114a <LL_ADC_REG_IsConversionOngoing>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 839e 	bne.w	8001f44 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d824      	bhi.n	800185a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	3b02      	subs	r3, #2
 8001816:	2b03      	cmp	r3, #3
 8001818:	d81b      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x86>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_ADC_ConfigChannel+0x54>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001831 	.word	0x08001831
 8001824:	08001839 	.word	0x08001839
 8001828:	08001841 	.word	0x08001841
 800182c:	08001849 	.word	0x08001849
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	220c      	movs	r2, #12
 8001834:	605a      	str	r2, [r3, #4]
          break;
 8001836:	e011      	b.n	800185c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2212      	movs	r2, #18
 800183c:	605a      	str	r2, [r3, #4]
          break;
 800183e:	e00d      	b.n	800185c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2218      	movs	r2, #24
 8001844:	605a      	str	r2, [r3, #4]
          break;
 8001846:	e009      	b.n	800185c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	605a      	str	r2, [r3, #4]
          break;
 8001850:	e004      	b.n	800185c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2206      	movs	r2, #6
 8001856:	605a      	str	r2, [r3, #4]
          break;
 8001858:	e000      	b.n	800185c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800185a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	f7ff fb7f 	bl	8000f6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc69 	bl	800114a <LL_ADC_REG_IsConversionOngoing>
 8001878:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc75 	bl	8001170 <LL_ADC_INJ_IsConversionOngoing>
 8001886:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800188a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 81a6 	bne.w	8001be0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 81a1 	bne.w	8001be0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f7ff fb9d 	bl	8000fea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d00a      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6919      	ldr	r1, [r3, #16]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018e2:	f7ff fadb 	bl	8000e9c <LL_ADC_SetOffset>
 80018e6:	e17b      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff faf8 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x148>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff faed 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 021f 	and.w	r2, r3, #31
 8001912:	e01e      	b.n	8001952 <HAL_ADC_ConfigChannel+0x186>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fae2 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800193a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e004      	b.n	8001950 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <HAL_ADC_ConfigChannel+0x19e>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	e018      	b.n	800199c <HAL_ADC_ConfigChannel+0x1d0>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800197e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fab1 	bl	8000f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fa95 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_ADC_ConfigChannel+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fa8a 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	e01e      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x24c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fa7f 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e004      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x264>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	e018      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x296>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e004      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d106      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa4e 	bl	8000f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fa32 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x2d4>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fa27 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 021f 	and.w	r2, r3, #31
 8001a9e:	e01e      	b.n	8001ade <HAL_ADC_ConfigChannel+0x312>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fa1c 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e004      	b.n	8001adc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x32a>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	e016      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x358>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b16:	2320      	movs	r3, #32
 8001b18:	e004      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d106      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f9ed 	bl	8000f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f9d1 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x396>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2103      	movs	r1, #3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9c6 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	e017      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x3c6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2103      	movs	r1, #3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f9bb 	bl	8000ee4 <LL_ADC_GetOffsetChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b7c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b84:	2320      	movs	r3, #32
 8001b86:	e003      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x3de>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	e011      	b.n	8001bce <HAL_ADC_ConfigChannel+0x402>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d106      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2103      	movs	r1, #3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f998 	bl	8000f10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fa9d 	bl	8001124 <LL_ADC_IsEnabled>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 813f 	bne.w	8001e70 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7ff fa1e 	bl	8001040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4a8e      	ldr	r2, [pc, #568]	; (8001e44 <HAL_ADC_ConfigChannel+0x678>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	f040 8130 	bne.w	8001e70 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x46c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	3301      	adds	r3, #1
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	bf94      	ite	ls
 8001c30:	2301      	movls	r3, #1
 8001c32:	2300      	movhi	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e019      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x4a0>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e003      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2b09      	cmp	r3, #9
 8001c64:	bf94      	ite	ls
 8001c66:	2301      	movls	r3, #1
 8001c68:	2300      	movhi	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d079      	beq.n	8001d64 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x4c0>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	3301      	adds	r3, #1
 8001c84:	069b      	lsls	r3, r3, #26
 8001c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8a:	e015      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x4ec>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	069b      	lsls	r3, r3, #26
 8001cb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x50c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	e017      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x53c>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e003      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2101      	movs	r1, #1
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	ea42 0103 	orr.w	r1, r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x562>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e9b      	lsrs	r3, r3, #26
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	051b      	lsls	r3, r3, #20
 8001d2c:	e018      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x594>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e003      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d60:	430b      	orrs	r3, r1
 8001d62:	e080      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x5b4>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	3301      	adds	r3, #1
 8001d78:	069b      	lsls	r3, r3, #26
 8001d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7e:	e015      	b.n	8001dac <HAL_ADC_ConfigChannel+0x5e0>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x600>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	e017      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x630>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	61fb      	str	r3, [r7, #28]
  return result;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	ea42 0103 	orr.w	r1, r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x65c>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	051b      	lsls	r3, r3, #20
 8001e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e26:	e01d      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x698>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	613b      	str	r3, [r7, #16]
  return result;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e005      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x684>
 8001e44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b1e      	subs	r3, #30
 8001e5e:	051b      	lsls	r3, r3, #20
 8001e60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e64:	430b      	orrs	r3, r1
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	6892      	ldr	r2, [r2, #8]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7ff f8bd 	bl	8000fea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_ADC_ConfigChannel+0x7a0>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d06c      	beq.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7c:	483c      	ldr	r0, [pc, #240]	; (8001f70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e7e:	f7fe ffff 	bl	8000e80 <LL_ADC_GetCommonPathInternalCh>
 8001e82:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d127      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d121      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_ADC_ConfigChannel+0x7ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d157      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eae:	4619      	mov	r1, r3
 8001eb0:	482f      	ldr	r0, [pc, #188]	; (8001f70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001eb2:	f7fe ffd2 	bl	8000e5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eb6:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_ADC_ConfigChannel+0x7b0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ede:	e03a      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a27      	ldr	r2, [pc, #156]	; (8001f84 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d113      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x746>
 8001eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10d      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_ADC_ConfigChannel+0x7ac>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d12a      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4819      	ldr	r0, [pc, #100]	; (8001f70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f0c:	f7fe ffa5 	bl	8000e5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f10:	e021      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d11c      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d116      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	; (8001f70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f3e:	f7fe ff8c 	bl	8000e5a <LL_ADC_SetCommonPathInternalCh>
 8001f42:	e008      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	37d8      	adds	r7, #216	; 0xd8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	80080000 	.word	0x80080000
 8001f70:	50040300 	.word	0x50040300
 8001f74:	c7520000 	.word	0xc7520000
 8001f78:	50040000 	.word	0x50040000
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	053e2d63 	.word	0x053e2d63
 8001f84:	cb840000 	.word	0xcb840000
 8001f88:	80000001 	.word	0x80000001

08001f8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e014      	b.n	800224e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	791b      	ldrb	r3, [r3, #4]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe fbeb 	bl	8000a10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2202      	movs	r2, #2
 800223e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b088      	sub	sp, #32
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	795b      	ldrb	r3, [r3, #5]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_DAC_ConfigChannel+0x1c>
 800226e:	2302      	movs	r3, #2
 8002270:	e107      	b.n	8002482 <HAL_DAC_ConfigChannel+0x22c>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2202      	movs	r2, #2
 800227c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d174      	bne.n	8002370 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002286:	f7fe fda5 	bl	8000dd4 <HAL_GetTick>
 800228a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d134      	bne.n	80022fc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002292:	e011      	b.n	80022b8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002294:	f7fe fd9e 	bl	8000dd4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d90a      	bls.n	80022b8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f043 0208 	orr.w	r2, r3, #8
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2203      	movs	r2, #3
 80022b2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0e4      	b.n	8002482 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1e6      	bne.n	8002294 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7fe fd90 	bl	8000dec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	6992      	ldr	r2, [r2, #24]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
 80022d6:	e01e      	b.n	8002316 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022d8:	f7fe fd7c 	bl	8000dd4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d90a      	bls.n	80022fc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f043 0208 	orr.w	r2, r3, #8
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2203      	movs	r2, #3
 80022f6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0c2      	b.n	8002482 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	dbe8      	blt.n	80022d8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002306:	2001      	movs	r0, #1
 8002308:	f7fe fd70 	bl	8000dec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	6992      	ldr	r2, [r2, #24]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	ea02 0103 	and.w	r1, r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	409a      	lsls	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	21ff      	movs	r1, #255	; 0xff
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	ea02 0103 	and.w	r1, r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11d      	bne.n	80023b4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	221f      	movs	r2, #31
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2207      	movs	r2, #7
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	431a      	orrs	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43da      	mvns	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	400a      	ands	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	f640 72fc 	movw	r2, #4092	; 0xffc
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	22c0      	movs	r2, #192	; 0xc0
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	400a      	ands	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e154      	b.n	8002746 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8146 	beq.w	8002740 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d005      	beq.n	80024cc <HAL_GPIO_Init+0x40>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d130      	bne.n	800252e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002502:	2201      	movs	r2, #1
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0201 	and.w	r2, r3, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d017      	beq.n	800256a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d123      	bne.n	80025be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	6939      	ldr	r1, [r7, #16]
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a0 	beq.w	8002740 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_GPIO_Init+0x2d8>)
 8002602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002604:	4a57      	ldr	r2, [pc, #348]	; (8002764 <HAL_GPIO_Init+0x2d8>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6613      	str	r3, [r2, #96]	; 0x60
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_GPIO_Init+0x2d8>)
 800260e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002618:	4a53      	ldr	r2, [pc, #332]	; (8002768 <HAL_GPIO_Init+0x2dc>)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002642:	d019      	beq.n	8002678 <HAL_GPIO_Init+0x1ec>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a49      	ldr	r2, [pc, #292]	; (800276c <HAL_GPIO_Init+0x2e0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_GPIO_Init+0x1e8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a48      	ldr	r2, [pc, #288]	; (8002770 <HAL_GPIO_Init+0x2e4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00d      	beq.n	8002670 <HAL_GPIO_Init+0x1e4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a47      	ldr	r2, [pc, #284]	; (8002774 <HAL_GPIO_Init+0x2e8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <HAL_GPIO_Init+0x1e0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a46      	ldr	r2, [pc, #280]	; (8002778 <HAL_GPIO_Init+0x2ec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_GPIO_Init+0x1dc>
 8002664:	2304      	movs	r3, #4
 8002666:	e008      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002668:	2307      	movs	r3, #7
 800266a:	e006      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 800266c:	2303      	movs	r3, #3
 800266e:	e004      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002670:	2302      	movs	r3, #2
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002678:	2300      	movs	r3, #0
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	f002 0203 	and.w	r2, r2, #3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4093      	lsls	r3, r2
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268a:	4937      	ldr	r1, [pc, #220]	; (8002768 <HAL_GPIO_Init+0x2dc>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002698:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_GPIO_Init+0x2f0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026bc:	4a2f      	ldr	r2, [pc, #188]	; (800277c <HAL_GPIO_Init+0x2f0>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c2:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_GPIO_Init+0x2f0>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e6:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_GPIO_Init+0x2f0>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_GPIO_Init+0x2f0>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002710:	4a1a      	ldr	r2, [pc, #104]	; (800277c <HAL_GPIO_Init+0x2f0>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_GPIO_Init+0x2f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <HAL_GPIO_Init+0x2f0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f aea3 	bne.w	800249c <HAL_GPIO_Init+0x10>
  }
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	48000400 	.word	0x48000400
 8002770:	48000800 	.word	0x48000800
 8002774:	48000c00 	.word	0x48000c00
 8002778:	48001000 	.word	0x48001000
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000

080027d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40007000 	.word	0x40007000

080027ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fa:	d130      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002808:	d038      	beq.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2232      	movs	r2, #50	; 0x32
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002830:	e002      	b.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002844:	d102      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f2      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002858:	d110      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e00f      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d007      	beq.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002874:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40007000 	.word	0x40007000
 8002890:	20000000 	.word	0x20000000
 8002894:	431bde83 	.word	0x431bde83

08002898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f000 bc11 	b.w	80030ce <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ac:	4ba0      	ldr	r3, [pc, #640]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b6:	4b9e      	ldr	r3, [pc, #632]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80e4 	beq.w	8002a96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4c>
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	f040 808b 	bne.w	80029f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	f040 8087 	bne.w	80029f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028e4:	4b92      	ldr	r3, [pc, #584]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x64>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e3e8      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	4b8b      	ldr	r3, [pc, #556]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <HAL_RCC_OscConfig+0x7e>
 800290c:	4b88      	ldr	r3, [pc, #544]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	e005      	b.n	8002922 <HAL_RCC_OscConfig+0x8a>
 8002916:	4b86      	ldr	r3, [pc, #536]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	4293      	cmp	r3, r2
 8002924:	d223      	bcs.n	800296e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fd7a 	bl	8003424 <RCC_SetFlashLatencyFromMSIRange>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e3c9      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293a:	4b7d      	ldr	r3, [pc, #500]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7c      	ldr	r2, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b7a      	ldr	r3, [pc, #488]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4977      	ldr	r1, [pc, #476]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002958:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	4972      	ldr	r1, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
 800296c:	e025      	b.n	80029ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296e:	4b70      	ldr	r3, [pc, #448]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6f      	ldr	r2, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b6d      	ldr	r3, [pc, #436]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	496a      	ldr	r1, [pc, #424]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298c:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	4965      	ldr	r1, [pc, #404]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fd3a 	bl	8003424 <RCC_SetFlashLatencyFromMSIRange>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e389      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ba:	f000 fc6f 	bl	800329c <HAL_RCC_GetSysClockFreq>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b5b      	ldr	r3, [pc, #364]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	495a      	ldr	r1, [pc, #360]	; (8002b34 <HAL_RCC_OscConfig+0x29c>)
 80029cc:	5ccb      	ldrb	r3, [r1, r3]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x2a0>)
 80029d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029da:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_OscConfig+0x2a4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f9a8 	bl	8000d34 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d052      	beq.n	8002a94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	e36d      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d032      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029fa:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a4c      	ldr	r2, [pc, #304]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a06:	f7fe f9e5 	bl	8000dd4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a0e:	f7fe f9e1 	bl	8000dd4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e356      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a20:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2c:	4b40      	ldr	r3, [pc, #256]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3f      	ldr	r2, [pc, #252]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a32:	f043 0308 	orr.w	r3, r3, #8
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	493a      	ldr	r1, [pc, #232]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 8002a5e:	e01a      	b.n	8002a96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a60:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f9b2 	bl	8000dd4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a74:	f7fe f9ae 	bl	8000dd4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e323      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1dc>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d073      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x21c>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d10e      	bne.n	8002acc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d10b      	bne.n	8002acc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d063      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d15f      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e300      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e01d      	b.n	8002b20 <HAL_RCC_OscConfig+0x288>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x270>
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0x288>
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe f954 	bl	8000dd4 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2e:	e010      	b.n	8002b52 <HAL_RCC_OscConfig+0x2ba>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08004988 	.word	0x08004988
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe f948 	bl	8000dd4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e2bd      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b52:	4baf      	ldr	r3, [pc, #700]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2a8>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f938 	bl	8000dd4 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe f934 	bl	8000dd4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e2a9      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7a:	4ba5      	ldr	r3, [pc, #660]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d0>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d060      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x310>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d116      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba8:	4b99      	ldr	r3, [pc, #612]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x328>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e286      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b93      	ldr	r3, [pc, #588]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4990      	ldr	r1, [pc, #576]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd4:	e040      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d023      	beq.n	8002c26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bde:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a8b      	ldr	r2, [pc, #556]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe f8f3 	bl	8000dd4 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7fe f8ef 	bl	8000dd4 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e264      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c04:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	061b      	lsls	r3, r3, #24
 8002c1e:	497c      	ldr	r1, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e018      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a79      	ldr	r2, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe f8cf 	bl	8000dd4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe f8cb 	bl	8000dd4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e240      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4c:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03c      	beq.n	8002cde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c72:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f8aa 	bl	8000dd4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe f8a6 	bl	8000dd4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e21b      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c96:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCC_OscConfig+0x3ec>
 8002ca4:	e01b      	b.n	8002cde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca6:	4b5a      	ldr	r3, [pc, #360]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe f88d 	bl	8000dd4 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe f889 	bl	8000dd4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1fe      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80a6 	beq.w	8002e38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cf0:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
 8002d08:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d18:	4b3e      	ldr	r3, [pc, #248]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d118      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d30:	f7fe f850 	bl	8000dd4 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fe f84c 	bl	8000dd4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1c1      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4d8>
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6e:	e024      	b.n	8002dba <HAL_RCC_OscConfig+0x522>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d110      	bne.n	8002d9a <HAL_RCC_OscConfig+0x502>
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d98:	e00f      	b.n	8002dba <HAL_RCC_OscConfig+0x522>
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe f807 	bl	8000dd4 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe f803 	bl	8000dd4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e176      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ed      	beq.n	8002dca <HAL_RCC_OscConfig+0x532>
 8002dee:	e01a      	b.n	8002e26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd fff0 	bl	8000dd4 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fd ffec 	bl	8000dd4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d906      	bls.n	8002e18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e15f      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e18:	4baa      	ldr	r3, [pc, #680]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e8      	bne.n	8002df8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2c:	4ba5      	ldr	r3, [pc, #660]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	4aa4      	ldr	r2, [pc, #656]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03c      	beq.n	8002ebe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e4c:	4b9d      	ldr	r3, [pc, #628]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e52:	4a9c      	ldr	r2, [pc, #624]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fd ffba 	bl	8000dd4 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e64:	f7fd ffb6 	bl	8000dd4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e12b      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e76:	4b93      	ldr	r3, [pc, #588]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCC_OscConfig+0x5cc>
 8002e84:	e01b      	b.n	8002ebe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e86:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8c:	4a8d      	ldr	r2, [pc, #564]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fd ff9d 	bl	8000dd4 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e9e:	f7fd ff99 	bl	8000dd4 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e10e      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb0:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ef      	bne.n	8002e9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8102 	beq.w	80030cc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	f040 80c5 	bne.w	800305c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ed2:	4b7c      	ldr	r3, [pc, #496]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d12c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d123      	bne.n	8002f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d11b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d113      	bne.n	8002f40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d109      	bne.n	8002f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d067      	beq.n	8003010 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d062      	beq.n	800300c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f46:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0bb      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5a      	ldr	r2, [pc, #360]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f62:	f7fd ff37 	bl	8000dd4 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fd ff33 	bl	8000dd4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0a8      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f88:	4b4e      	ldr	r3, [pc, #312]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <HAL_RCC_OscConfig+0x830>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa2:	0212      	lsls	r2, r2, #8
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002faa:	0852      	lsrs	r2, r2, #1
 8002fac:	3a01      	subs	r2, #1
 8002fae:	0552      	lsls	r2, r2, #21
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fb6:	0852      	lsrs	r2, r2, #1
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0652      	lsls	r2, r2, #25
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc2:	06d2      	lsls	r2, r2, #27
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	493f      	ldr	r1, [pc, #252]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3c      	ldr	r2, [pc, #240]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd8:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a39      	ldr	r2, [pc, #228]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe4:	f7fd fef6 	bl	8000dd4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fd fef2 	bl	8000dd4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e067      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300a:	e05f      	b.n	80030cc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e05e      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d157      	bne.n	80030cc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 800302e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003032:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003034:	f7fd fece 	bl	8000dd4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd feca 	bl	8000dd4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e03f      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x7a4>
 800305a:	e037      	b.n	80030cc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d02d      	beq.n	80030be <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003080:	f023 0303 	bic.w	r3, r3, #3
 8003084:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 800308c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fd fe9d 	bl	8000dd4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309e:	f7fd fe99 	bl	8000dd4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e00e      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <HAL_RCC_OscConfig+0x82c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x806>
 80030bc:	e006      	b.n	80030cc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e005      	b.n	80030ce <HAL_RCC_OscConfig+0x836>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3720      	adds	r7, #32
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0c8      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b66      	ldr	r3, [pc, #408]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4961      	ldr	r1, [pc, #388]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b5f      	ldr	r3, [pc, #380]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b0      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d04c      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d107      	bne.n	8003140 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003130:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d121      	bne.n	8003180 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e09e      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d115      	bne.n	8003180 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e092      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003160:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e086      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e07e      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003180:	4b42      	ldr	r3, [pc, #264]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 0203 	bic.w	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	493f      	ldr	r1, [pc, #252]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003192:	f7fd fe1f 	bl	8000dd4 <HAL_GetTick>
 8003196:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fd fe1b 	bl	8000dd4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e066      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 020c 	and.w	r2, r3, #12
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	429a      	cmp	r2, r3
 80031c0:	d1eb      	bne.n	800319a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	492c      	ldr	r1, [pc, #176]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d210      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4924      	ldr	r1, [pc, #144]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x1b0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e036      	b.n	800327e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4918      	ldr	r1, [pc, #96]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4910      	ldr	r1, [pc, #64]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324e:	f000 f825 	bl	800329c <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490c      	ldr	r1, [pc, #48]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fd5e 	bl	8000d34 <HAL_InitTick>
 8003278:	4603      	mov	r3, r0
 800327a:	72fb      	strb	r3, [r7, #11]

  return status;
 800327c:	7afb      	ldrb	r3, [r7, #11]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40022000 	.word	0x40022000
 800328c:	40021000 	.word	0x40021000
 8003290:	08004988 	.word	0x08004988
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b4:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d121      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d11e      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e005      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032ec:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032f8:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d102      	bne.n	800331a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	e004      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d101      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d134      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d003      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0xa6>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d003      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0xac>
 8003340:	e005      	b.n	800334e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003344:	617b      	str	r3, [r7, #20]
      break;
 8003346:	e005      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800334a:	617b      	str	r3, [r7, #20]
      break;
 800334c:	e002      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	617b      	str	r3, [r7, #20]
      break;
 8003352:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	3301      	adds	r3, #1
 8003360:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	fb02 f203 	mul.w	r2, r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	0e5b      	lsrs	r3, r3, #25
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	3301      	adds	r3, #1
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003394:	69bb      	ldr	r3, [r7, #24]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	080049a0 	.word	0x080049a0
 80033ac:	00f42400 	.word	0x00f42400
 80033b0:	007a1200 	.word	0x007a1200

080033b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000000 	.word	0x20000000

080033cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033d0:	f7ff fff0 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4904      	ldr	r1, [pc, #16]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08004998 	.word	0x08004998

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033fc:	f7ff ffda 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0adb      	lsrs	r3, r3, #11
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4904      	ldr	r1, [pc, #16]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	08004998 	.word	0x08004998

08003424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800343c:	f7ff f9c8 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 8003440:	6178      	str	r0, [r7, #20]
 8003442:	e014      	b.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	6593      	str	r3, [r2, #88]	; 0x58
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800345c:	f7ff f9b8 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 8003460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003474:	d10b      	bne.n	800348e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d919      	bls.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2ba0      	cmp	r3, #160	; 0xa0
 8003480:	d902      	bls.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003482:	2302      	movs	r3, #2
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	e013      	b.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003488:	2301      	movs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e010      	b.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d902      	bls.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003494:	2303      	movs	r3, #3
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e00a      	b.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d102      	bne.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034a0:	2302      	movs	r3, #2
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e004      	b.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b70      	cmp	r3, #112	; 0x70
 80034aa:	d101      	bne.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034ac:	2301      	movs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 0207 	bic.w	r2, r3, #7
 80034b8:	4909      	ldr	r1, [pc, #36]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d001      	beq.n	80034d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40022000 	.word	0x40022000

080034e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034ec:	2300      	movs	r3, #0
 80034ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f0:	2300      	movs	r3, #0
 80034f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d031      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003508:	d01a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800350a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800350e:	d814      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003518:	d10f      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003526:	e00c      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fa00 	bl	8003934 <RCCEx_PLLSAI1_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	74fb      	strb	r3, [r7, #19]
      break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003548:	4b51      	ldr	r3, [pc, #324]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	494e      	ldr	r1, [pc, #312]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800355e:	e001      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 809e 	beq.w	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4b40      	ldr	r3, [pc, #256]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	; 0x58
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a4:	2301      	movs	r3, #1
 80035a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a8:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a39      	ldr	r2, [pc, #228]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035b4:	f7fd fc0e 	bl	8000dd4 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ba:	e009      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035bc:	f7fd fc0a 	bl	8000dd4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d902      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	74fb      	strb	r3, [r7, #19]
        break;
 80035ce:	e005      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ef      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d15a      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01e      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d019      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003608:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800362a:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fbca 	bl	8000dd4 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	e00b      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd fbc6 	bl	8000dd4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d902      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	74fb      	strb	r3, [r7, #19]
            break;
 800365a:	e006      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ec      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	4904      	ldr	r1, [pc, #16]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003686:	e009      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
 800368c:	e006      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369c:	7c7b      	ldrb	r3, [r7, #17]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b9b      	ldr	r3, [pc, #620]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	4a9a      	ldr	r2, [pc, #616]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ba:	4b95      	ldr	r3, [pc, #596]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f023 0203 	bic.w	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4991      	ldr	r1, [pc, #580]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036dc:	4b8c      	ldr	r3, [pc, #560]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 020c 	bic.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	4989      	ldr	r1, [pc, #548]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036fe:	4b84      	ldr	r3, [pc, #528]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	4980      	ldr	r1, [pc, #512]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003720:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	4978      	ldr	r1, [pc, #480]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003742:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	496f      	ldr	r1, [pc, #444]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4967      	ldr	r1, [pc, #412]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003786:	4b62      	ldr	r3, [pc, #392]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	495e      	ldr	r1, [pc, #376]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a8:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	4956      	ldr	r1, [pc, #344]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ca:	4b51      	ldr	r3, [pc, #324]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	494d      	ldr	r1, [pc, #308]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d028      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ec:	4b48      	ldr	r3, [pc, #288]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	4945      	ldr	r1, [pc, #276]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800380a:	d106      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800380c:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a3f      	ldr	r2, [pc, #252]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003816:	60d3      	str	r3, [r2, #12]
 8003818:	e011      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003822:	d10c      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f882 	bl	8003934 <RCCEx_PLLSAI1_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d028      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003858:	492d      	ldr	r1, [pc, #180]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003868:	d106      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003874:	60d3      	str	r3, [r2, #12]
 8003876:	e011      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f853 	bl	8003934 <RCCEx_PLLSAI1_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01c      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	4916      	ldr	r1, [pc, #88]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2102      	movs	r1, #2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f830 	bl	8003934 <RCCEx_PLLSAI1_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	4904      	ldr	r1, [pc, #16]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003904:	7cbb      	ldrb	r3, [r7, #18]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000

08003934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003942:	4b74      	ldr	r3, [pc, #464]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800394e:	4b71      	ldr	r3, [pc, #452]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0203 	and.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
       ||
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003966:	4b6b      	ldr	r3, [pc, #428]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
       ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d047      	beq.n	8003a0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e044      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d018      	beq.n	80039ba <RCCEx_PLLSAI1_Config+0x86>
 8003988:	2b03      	cmp	r3, #3
 800398a:	d825      	bhi.n	80039d8 <RCCEx_PLLSAI1_Config+0xa4>
 800398c:	2b01      	cmp	r3, #1
 800398e:	d002      	beq.n	8003996 <RCCEx_PLLSAI1_Config+0x62>
 8003990:	2b02      	cmp	r3, #2
 8003992:	d009      	beq.n	80039a8 <RCCEx_PLLSAI1_Config+0x74>
 8003994:	e020      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11d      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a6:	e01a      	b.n	80039de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a8:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b8:	e013      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ba:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c6:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d6:	e006      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e004      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	430b      	orrs	r3, r1
 8003a04:	4943      	ldr	r1, [pc, #268]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d17c      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a10:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd f9da 	bl	8000dd4 <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a22:	e009      	b.n	8003a38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a24:	f7fd f9d6 	bl	8000dd4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d902      	bls.n	8003a38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	73fb      	strb	r3, [r7, #15]
        break;
 8003a36:	e005      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a38:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ef      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d15f      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d110      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	0211      	lsls	r1, r2, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	06d2      	lsls	r2, r2, #27
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	492a      	ldr	r1, [pc, #168]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	610b      	str	r3, [r1, #16]
 8003a70:	e027      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d112      	bne.n	8003a9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	0211      	lsls	r1, r2, #8
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6912      	ldr	r2, [r2, #16]
 8003a8e:	0852      	lsrs	r2, r2, #1
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0552      	lsls	r2, r2, #21
 8003a94:	430a      	orrs	r2, r1
 8003a96:	491f      	ldr	r1, [pc, #124]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	610b      	str	r3, [r1, #16]
 8003a9c:	e011      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	0211      	lsls	r1, r2, #8
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6952      	ldr	r2, [r2, #20]
 8003ab4:	0852      	lsrs	r2, r2, #1
 8003ab6:	3a01      	subs	r2, #1
 8003ab8:	0652      	lsls	r2, r2, #25
 8003aba:	430a      	orrs	r2, r1
 8003abc:	4915      	ldr	r1, [pc, #84]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fd f981 	bl	8000dd4 <HAL_GetTick>
 8003ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ad4:	e009      	b.n	8003aea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad6:	f7fd f97d 	bl	8000dd4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d902      	bls.n	8003aea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae8:	e005      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ef      	beq.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e095      	b.n	8003c56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d009      	beq.n	8003b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
 8003b42:	e005      	b.n	8003b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fc ffe6 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b90:	d902      	bls.n	8003b98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e002      	b.n	8003b9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ba6:	d007      	beq.n	8003bb8 <HAL_SPI_Init+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	ea42 0103 	orr.w	r1, r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	f003 0204 	and.w	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c34:	ea42 0103 	orr.w	r1, r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e049      	b.n	8003d04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fc ff9d 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f000 f987 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0202 	mvn.w	r2, #2
 8003d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f90f 	bl	8003f72 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f901 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f912 	bl	8003f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0204 	mvn.w	r2, #4
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8e5 	bl	8003f72 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8d7 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8e8 	bl	8003f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0208 	mvn.w	r2, #8
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2204      	movs	r2, #4
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8bb 	bl	8003f72 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8ad 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8be 	bl	8003f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0210 	mvn.w	r2, #16
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f891 	bl	8003f72 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f883 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f894 	bl	8003f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0201 	mvn.w	r2, #1
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f85d 	bl	8003f4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b80      	cmp	r3, #128	; 0x80
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8e8 	bl	800408c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eca:	d10e      	bne.n	8003eea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d107      	bne.n	8003eea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f8db 	bl	80040a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d10e      	bne.n	8003f16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d107      	bne.n	8003f16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f842 	bl	8003f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d10e      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f06f 0220 	mvn.w	r2, #32
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f89b 	bl	8004078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <TIM_Base_SetConfig+0xbc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0x20>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d108      	bne.n	8003fe2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <TIM_Base_SetConfig+0xbc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_Base_SetConfig+0x52>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d007      	beq.n	8004002 <TIM_Base_SetConfig+0x52>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <TIM_Base_SetConfig+0xc0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_Base_SetConfig+0x52>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <TIM_Base_SetConfig+0xc4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0c      	ldr	r2, [pc, #48]	; (800406c <TIM_Base_SetConfig+0xbc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0xa0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <TIM_Base_SetConfig+0xc0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0xa0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <TIM_Base_SetConfig+0xc4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400

08004078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e040      	b.n	8004148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fcd8 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f82c 	bl	8004150 <UART_SetConfig>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e022      	b.n	8004148 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa54 	bl	80045b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800411e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800412e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fadb 	bl	80046fc <UART_CheckIdleState>
 8004146:	4603      	mov	r3, r0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4baa      	ldr	r3, [pc, #680]	; (8004424 <UART_SetConfig+0x2d4>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	69f9      	ldr	r1, [r7, #28]
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a9f      	ldr	r2, [pc, #636]	; (8004428 <UART_SetConfig+0x2d8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a96      	ldr	r2, [pc, #600]	; (800442c <UART_SetConfig+0x2dc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d121      	bne.n	800421a <UART_SetConfig+0xca>
 80041d6:	4b96      	ldr	r3, [pc, #600]	; (8004430 <UART_SetConfig+0x2e0>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d817      	bhi.n	8004214 <UART_SetConfig+0xc4>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x9c>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004203 	.word	0x08004203
 80041f8:	0800420f 	.word	0x0800420f
 80041fc:	2301      	movs	r3, #1
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e096      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004202:	2302      	movs	r3, #2
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e093      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004208:	2304      	movs	r3, #4
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	e090      	b.n	8004330 <UART_SetConfig+0x1e0>
 800420e:	2308      	movs	r3, #8
 8004210:	76fb      	strb	r3, [r7, #27]
 8004212:	e08d      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004214:	2310      	movs	r3, #16
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e08a      	b.n	8004330 <UART_SetConfig+0x1e0>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a85      	ldr	r2, [pc, #532]	; (8004434 <UART_SetConfig+0x2e4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d132      	bne.n	800428a <UART_SetConfig+0x13a>
 8004224:	4b82      	ldr	r3, [pc, #520]	; (8004430 <UART_SetConfig+0x2e0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d828      	bhi.n	8004284 <UART_SetConfig+0x134>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0xe8>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004285 	.word	0x08004285
 8004240:	08004285 	.word	0x08004285
 8004244:	08004285 	.word	0x08004285
 8004248:	08004279 	.word	0x08004279
 800424c:	08004285 	.word	0x08004285
 8004250:	08004285 	.word	0x08004285
 8004254:	08004285 	.word	0x08004285
 8004258:	08004273 	.word	0x08004273
 800425c:	08004285 	.word	0x08004285
 8004260:	08004285 	.word	0x08004285
 8004264:	08004285 	.word	0x08004285
 8004268:	0800427f 	.word	0x0800427f
 800426c:	2300      	movs	r3, #0
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	e05e      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004272:	2302      	movs	r3, #2
 8004274:	76fb      	strb	r3, [r7, #27]
 8004276:	e05b      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004278:	2304      	movs	r3, #4
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e058      	b.n	8004330 <UART_SetConfig+0x1e0>
 800427e:	2308      	movs	r3, #8
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e055      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004284:	2310      	movs	r3, #16
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e052      	b.n	8004330 <UART_SetConfig+0x1e0>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6a      	ldr	r2, [pc, #424]	; (8004438 <UART_SetConfig+0x2e8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d120      	bne.n	80042d6 <UART_SetConfig+0x186>
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <UART_SetConfig+0x2e0>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800429e:	2b30      	cmp	r3, #48	; 0x30
 80042a0:	d013      	beq.n	80042ca <UART_SetConfig+0x17a>
 80042a2:	2b30      	cmp	r3, #48	; 0x30
 80042a4:	d814      	bhi.n	80042d0 <UART_SetConfig+0x180>
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d009      	beq.n	80042be <UART_SetConfig+0x16e>
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d810      	bhi.n	80042d0 <UART_SetConfig+0x180>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x168>
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d006      	beq.n	80042c4 <UART_SetConfig+0x174>
 80042b6:	e00b      	b.n	80042d0 <UART_SetConfig+0x180>
 80042b8:	2300      	movs	r3, #0
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e038      	b.n	8004330 <UART_SetConfig+0x1e0>
 80042be:	2302      	movs	r3, #2
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e035      	b.n	8004330 <UART_SetConfig+0x1e0>
 80042c4:	2304      	movs	r3, #4
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e032      	b.n	8004330 <UART_SetConfig+0x1e0>
 80042ca:	2308      	movs	r3, #8
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e02f      	b.n	8004330 <UART_SetConfig+0x1e0>
 80042d0:	2310      	movs	r3, #16
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e02c      	b.n	8004330 <UART_SetConfig+0x1e0>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a53      	ldr	r2, [pc, #332]	; (8004428 <UART_SetConfig+0x2d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d125      	bne.n	800432c <UART_SetConfig+0x1dc>
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <UART_SetConfig+0x2e0>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ee:	d017      	beq.n	8004320 <UART_SetConfig+0x1d0>
 80042f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f4:	d817      	bhi.n	8004326 <UART_SetConfig+0x1d6>
 80042f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fa:	d00b      	beq.n	8004314 <UART_SetConfig+0x1c4>
 80042fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004300:	d811      	bhi.n	8004326 <UART_SetConfig+0x1d6>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <UART_SetConfig+0x1be>
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d006      	beq.n	800431a <UART_SetConfig+0x1ca>
 800430c:	e00b      	b.n	8004326 <UART_SetConfig+0x1d6>
 800430e:	2300      	movs	r3, #0
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e00d      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004314:	2302      	movs	r3, #2
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	e00a      	b.n	8004330 <UART_SetConfig+0x1e0>
 800431a:	2304      	movs	r3, #4
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e007      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004320:	2308      	movs	r3, #8
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e004      	b.n	8004330 <UART_SetConfig+0x1e0>
 8004326:	2310      	movs	r3, #16
 8004328:	76fb      	strb	r3, [r7, #27]
 800432a:	e001      	b.n	8004330 <UART_SetConfig+0x1e0>
 800432c:	2310      	movs	r3, #16
 800432e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <UART_SetConfig+0x2d8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	f040 8082 	bne.w	8004440 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800433c:	7efb      	ldrb	r3, [r7, #27]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d823      	bhi.n	800438a <UART_SetConfig+0x23a>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x1f8>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	0800438b 	.word	0x0800438b
 8004350:	08004375 	.word	0x08004375
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800437b 	.word	0x0800437b
 800435c:	0800438b 	.word	0x0800438b
 8004360:	0800438b 	.word	0x0800438b
 8004364:	0800438b 	.word	0x0800438b
 8004368:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7ff f82e 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 8004370:	6178      	str	r0, [r7, #20]
        break;
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <UART_SetConfig+0x2ec>)
 8004376:	617b      	str	r3, [r7, #20]
        break;
 8004378:	e00c      	b.n	8004394 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fe ff8f 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800437e:	6178      	str	r0, [r7, #20]
        break;
 8004380:	e008      	b.n	8004394 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004386:	617b      	str	r3, [r7, #20]
        break;
 8004388:	e004      	b.n	8004394 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	76bb      	strb	r3, [r7, #26]
        break;
 8004392:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8100 	beq.w	800459c <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d305      	bcc.n	80043b8 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d902      	bls.n	80043be <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	76bb      	strb	r3, [r7, #26]
 80043bc:	e0ee      	b.n	800459c <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	020b      	lsls	r3, r1, #8
 80043d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043d4:	0202      	lsls	r2, r0, #8
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	6849      	ldr	r1, [r1, #4]
 80043da:	0849      	lsrs	r1, r1, #1
 80043dc:	4608      	mov	r0, r1
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	1814      	adds	r4, r2, r0
 80043e4:	eb43 0501 	adc.w	r5, r3, r1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fb fee9 	bl	80001cc <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4613      	mov	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004408:	d308      	bcc.n	800441c <UART_SetConfig+0x2cc>
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004410:	d204      	bcs.n	800441c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e0bf      	b.n	800459c <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	76bb      	strb	r3, [r7, #26]
 8004420:	e0bc      	b.n	800459c <UART_SetConfig+0x44c>
 8004422:	bf00      	nop
 8004424:	efff69f3 	.word	0xefff69f3
 8004428:	40008000 	.word	0x40008000
 800442c:	40013800 	.word	0x40013800
 8004430:	40021000 	.word	0x40021000
 8004434:	40004400 	.word	0x40004400
 8004438:	40004800 	.word	0x40004800
 800443c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d15b      	bne.n	8004502 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 800444a:	7efb      	ldrb	r3, [r7, #27]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d828      	bhi.n	80044a2 <UART_SetConfig+0x352>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0x308>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	080044a3 	.word	0x080044a3
 8004468:	08004493 	.word	0x08004493
 800446c:	080044a3 	.word	0x080044a3
 8004470:	080044a3 	.word	0x080044a3
 8004474:	080044a3 	.word	0x080044a3
 8004478:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fe ffa6 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 8004480:	6178      	str	r0, [r7, #20]
        break;
 8004482:	e013      	b.n	80044ac <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fe ffb8 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004488:	6178      	str	r0, [r7, #20]
        break;
 800448a:	e00f      	b.n	80044ac <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <UART_SetConfig+0x464>)
 800448e:	617b      	str	r3, [r7, #20]
        break;
 8004490:	e00c      	b.n	80044ac <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7fe ff03 	bl	800329c <HAL_RCC_GetSysClockFreq>
 8004496:	6178      	str	r0, [r7, #20]
        break;
 8004498:	e008      	b.n	80044ac <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449e:	617b      	str	r3, [r7, #20]
        break;
 80044a0:	e004      	b.n	80044ac <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	76bb      	strb	r3, [r7, #26]
        break;
 80044aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d074      	beq.n	800459c <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	d916      	bls.n	80044fc <UART_SetConfig+0x3ac>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d212      	bcs.n	80044fc <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f023 030f 	bic.w	r3, r3, #15
 80044de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	89fb      	ldrh	r3, [r7, #14]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	89fa      	ldrh	r2, [r7, #14]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	e04f      	b.n	800459c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	76bb      	strb	r3, [r7, #26]
 8004500:	e04c      	b.n	800459c <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004502:	7efb      	ldrb	r3, [r7, #27]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d828      	bhi.n	800455a <UART_SetConfig+0x40a>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x3c0>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	0800455b 	.word	0x0800455b
 8004520:	0800454b 	.word	0x0800454b
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800455b 	.word	0x0800455b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fe ff4a 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 8004538:	6178      	str	r0, [r7, #20]
        break;
 800453a:	e013      	b.n	8004564 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fe ff5c 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004540:	6178      	str	r0, [r7, #20]
        break;
 8004542:	e00f      	b.n	8004564 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <UART_SetConfig+0x464>)
 8004546:	617b      	str	r3, [r7, #20]
        break;
 8004548:	e00c      	b.n	8004564 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fea7 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800454e:	6178      	str	r0, [r7, #20]
        break;
 8004550:	e008      	b.n	8004564 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	617b      	str	r3, [r7, #20]
        break;
 8004558:	e004      	b.n	8004564 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	76bb      	strb	r3, [r7, #26]
        break;
 8004562:	bf00      	nop
    }

    if (pclk != 0U)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085a      	lsrs	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b0f      	cmp	r3, #15
 8004582:	d909      	bls.n	8004598 <UART_SetConfig+0x448>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458a:	d205      	bcs.n	8004598 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdb0      	pop	{r4, r5, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	00f42400 	.word	0x00f42400

080045b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d10a      	bne.n	80046ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800470c:	f7fc fb62 	bl	8000dd4 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d10e      	bne.n	800473e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f82d 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e023      	b.n	8004786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d10e      	bne.n	800476a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f817 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00d      	b.n	8004786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b09c      	sub	sp, #112	; 0x70
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	e0a5      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	f000 80a1 	beq.w	80048ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fc fb13 	bl	8000dd4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d13e      	bne.n	800483e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047d4:	667b      	str	r3, [r7, #100]	; 0x64
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	663b      	str	r3, [r7, #96]	; 0x60
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004812:	64ba      	str	r2, [r7, #72]	; 0x48
 8004814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e067      	b.n	800490e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d04f      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485a:	d147      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004864:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
 8004886:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	613b      	str	r3, [r7, #16]
   return(result);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048b8:	623a      	str	r2, [r7, #32]
 80048ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	69f9      	ldr	r1, [r7, #28]
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e010      	b.n	800490e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	429a      	cmp	r2, r3
 8004908:	f43f af4a 	beq.w	80047a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3770      	adds	r7, #112	; 0x70
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f000 f820 	bl	8004970 <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	080049d8 	.word	0x080049d8
 8004954:	080049d8 	.word	0x080049d8
 8004958:	080049d8 	.word	0x080049d8
 800495c:	080049dc 	.word	0x080049dc

08004960 <memset>:
 8004960:	4402      	add	r2, r0
 8004962:	4603      	mov	r3, r0
 8004964:	4293      	cmp	r3, r2
 8004966:	d100      	bne.n	800496a <memset+0xa>
 8004968:	4770      	bx	lr
 800496a:	f803 1b01 	strb.w	r1, [r3], #1
 800496e:	e7f9      	b.n	8004964 <memset+0x4>

08004970 <_init>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr

0800497c <_fini>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr
