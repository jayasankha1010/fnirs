
nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a00  08004a00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a08  08004a08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004a80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004a80  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e71  00000000  00000000  00030ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00032d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000339d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b87f  00000000  00000000  00034590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000decc  00000000  00000000  0004fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b38e4  00000000  00000000  0005dcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001115bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ec  00000000  00000000  00111614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004964 	.word	0x08004964

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004964 	.word	0x08004964

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fb3d 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f849 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f93d 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f90b 	bl	80007a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800058e:	f000 f893 	bl	80006b8 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f002 f834 	bl	8002608 <HAL_GPIO_WritePin>

	  HAL_ADC_Start(&hadc1);
 80005a0:	4819      	ldr	r0, [pc, #100]	; (8000608 <main+0x90>)
 80005a2:	f000 ff11 	bl	80013c8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a6:	f04f 31ff 	mov.w	r1, #4294967295
 80005aa:	4817      	ldr	r0, [pc, #92]	; (8000608 <main+0x90>)
 80005ac:	f000 ffc6 	bl	800153c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80005b0:	4815      	ldr	r0, [pc, #84]	; (8000608 <main+0x90>)
 80005b2:	f001 f89b 	bl	80016ec <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	81fb      	strh	r3, [r7, #14]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f002 f820 	bl	8002608 <HAL_GPIO_WritePin>

	  sprintf(msg, "%hu\r\n", raw);
 80005c8:	89fa      	ldrh	r2, [r7, #14]
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <main+0x94>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fd9a 	bl	8004108 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdfa 	bl	80001d0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x98>)
 80005e8:	f003 f8e4 	bl	80037b4 <HAL_UART_Transmit>


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x9c>)
 80005f2:	f002 f821 	bl	8002638 <HAL_GPIO_TogglePin>
	  HAL_Delay(raw*10);
 80005f6:	89fa      	ldrh	r2, [r7, #14]
 80005f8:	4613      	mov	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fb77 	bl	8000cf4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000606:	e7c4      	b.n	8000592 <main+0x1a>
 8000608:	20000098 	.word	0x20000098
 800060c:	0800497c 	.word	0x0800497c
 8000610:	200000fc 	.word	0x200000fc
 8000614:	48000400 	.word	0x48000400

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fd66 	bl	80040f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f002 f823 	bl	8002688 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f968 	bl	800091c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064c:	2310      	movs	r3, #16
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000658:	2360      	movs	r3, #96	; 0x60
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000660:	2301      	movs	r3, #1
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000668:	2328      	movs	r3, #40	; 0x28
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f85b 	bl	8002734 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000684:	f000 f94a 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2104      	movs	r1, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fcad 	bl	8003000 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f936 	bl	800091c <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	; 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006dc:	4a2f      	ldr	r2, [pc, #188]	; (800079c <MX_ADC1_Init+0xe4>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006e8:	2210      	movs	r2, #16
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000706:	2200      	movs	r2, #0
 8000708:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_ADC1_Init+0xe0>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <MX_ADC1_Init+0xe0>)
 800073c:	f000 fcf4 	bl	8001128 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000746:	f000 f8e9 	bl	800091c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000756:	f001 fc5b 	bl	8002010 <HAL_ADCEx_MultiModeConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000760:	f000 f8dc 	bl	800091c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_ADC1_Init+0xe8>)
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2306      	movs	r3, #6
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000770:	237f      	movs	r3, #127	; 0x7f
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000774:	2304      	movs	r3, #4
 8000776:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000782:	f000 ffc1 	bl	8001708 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800078c:	f000 f8c6 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000098 	.word	0x20000098
 800079c:	50040000 	.word	0x50040000
 80007a0:	14f00020 	.word	0x14f00020

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	f002 ff96 	bl	8003718 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f893 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000fc 	.word	0x200000fc
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <MX_GPIO_Init+0x10c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a3c      	ldr	r2, [pc, #240]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a36      	ldr	r2, [pc, #216]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_GPIO_Init+0x10c>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a2a      	ldr	r2, [pc, #168]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_GPIO_Init+0x10c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|GPIO_PIN_8
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f001 fec0 	bl	8002608 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <MX_GPIO_Init+0x110>)
 8000890:	f001 feba 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <MX_GPIO_Init+0x114>)
 80008ac:	f001 fd3a 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin PA8
                           PA10 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|GPIO_PIN_8
 80008b0:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
 80008b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f001 fd2a 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f001 fd1d 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0x110>)
 8000904:	f001 fd0e 	bl	8002324 <HAL_GPIO_Init>

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400
 8000918:	48000800 	.word	0x48000800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	; 0x58
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2234      	movs	r2, #52	; 0x34
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fbb1 	bl	80040f8 <memset>
  if(hadc->Instance==ADC1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <HAL_ADC_MspInit+0x9c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d131      	bne.n	8000a04 <HAL_ADC_MspInit+0x94>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009a4:	613b      	str	r3, [r7, #16]
    //PeriphClkInit.AdcClockSelection = ADCCLockSelection;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fd2e 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_ADC_MspInit+0x4a>
    {
      Error_Handler();
 80009b6:	f7ff ffb1 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_ADC_MspInit+0xa0>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <HAL_ADC_MspInit+0xa0>)
 80009c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_ADC_MspInit+0xa0>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_ADC_MspInit+0xa0>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_ADC_MspInit+0xa0>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_ADC_MspInit+0xa0>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ea:	2301      	movs	r3, #1
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009ee:	230b      	movs	r3, #11
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f001 fc90 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3758      	adds	r7, #88	; 0x58
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	50040000 	.word	0x50040000
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	; 0x58
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	2234      	movs	r2, #52	; 0x34
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fb5f 	bl	80040f8 <memset>
  if(huart->Instance==USART2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <HAL_UART_MspInit+0xa8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d136      	bne.n	8000ab2 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fcdb 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a5c:	f7ff ff5e 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0xac>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <HAL_UART_MspInit+0xac>)
 8000a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0xac>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0xac>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0xac>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0xac>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a90:	230c      	movs	r3, #12
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f001 fc39 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3758      	adds	r7, #88	; 0x58
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f8d0 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f003 faac 	bl	80040a4 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20008000 	.word	0x20008000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	2000008c 	.word	0x2000008c
 8000b80:	20000198 	.word	0x20000198

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f003 fa6b 	bl	80040b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fccd 	bl	8000578 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bec:	08004a10 	.word	0x08004a10
  ldr r2, =_sbss
 8000bf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf4:	20000194 	.word	0x20000194

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_Init+0x3c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_Init+0x3c>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f001 fb52 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f80f 	bl	8000c3c <HAL_InitTick>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	e001      	b.n	8000c2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2a:	f7ff fe7d 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_InitTick+0x6c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d023      	beq.n	8000c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_InitTick+0x70>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_InitTick+0x6c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fb4f 	bl	800230a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10f      	bne.n	8000c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d809      	bhi.n	8000c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f001 fb27 	bl	80022d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_InitTick+0x74>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e007      	b.n	8000c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e004      	b.n	8000c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e001      	b.n	8000c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000180 	.word	0x20000180

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000180 	.word	0x20000180

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008

08000d3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	609a      	str	r2, [r3, #8]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3360      	adds	r3, #96	; 0x60
 8000db6:	461a      	mov	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <LL_ADC_SetOffset+0x44>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	03fff000 	.word	0x03fff000

08000dec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3360      	adds	r3, #96	; 0x60
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3360      	adds	r3, #96	; 0x60
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e42:	bf00      	nop
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	615a      	str	r2, [r3, #20]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b087      	sub	sp, #28
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3330      	adds	r3, #48	; 0x30
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	4413      	add	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	211f      	movs	r1, #31
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0e9b      	lsrs	r3, r3, #26
 8000ed2:	f003 011f 	and.w	r1, r3, #31
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ee6:	bf00      	nop
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b087      	sub	sp, #28
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3314      	adds	r3, #20
 8000f02:	461a      	mov	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	0e5b      	lsrs	r3, r3, #25
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	0d1b      	lsrs	r3, r3, #20
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	2107      	movs	r1, #7
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	0d1b      	lsrs	r3, r3, #20
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f60:	43db      	mvns	r3, r3
 8000f62:	401a      	ands	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0318 	and.w	r3, r3, #24
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f6c:	40d9      	lsrs	r1, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	400b      	ands	r3, r1
 8000f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f76:	431a      	orrs	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0007ffff 	.word	0x0007ffff

08000f90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6093      	str	r3, [r2, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001000:	d101      	bne.n	8001006 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001050:	d101      	bne.n	8001056 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001078:	f043 0201 	orr.w	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <LL_ADC_IsEnabled+0x18>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_ADC_IsEnabled+0x1a>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c6:	f043 0204 	orr.w	r2, r3, #4
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d101      	bne.n	80010f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b08      	cmp	r3, #8
 8001112:	d101      	bne.n	8001118 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e131      	b.n	80013a6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114c:	2b00      	cmp	r3, #0
 800114e:	d109      	bne.n	8001164 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fc0d 	bl	8000970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff3f 	bl	8000fec <LL_ADC_IsDeepPowerDownEnabled>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff25 	bl	8000fc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff5a 	bl	800103c <LL_ADC_IsInternalRegulatorEnabled>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d115      	bne.n	80011ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff3e 	bl	8001014 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001198:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <HAL_ADC_Init+0x288>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	099b      	lsrs	r3, r3, #6
 800119e:	4a85      	ldr	r2, [pc, #532]	; (80013b4 <HAL_ADC_Init+0x28c>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	3301      	adds	r3, #1
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff3c 	bl	800103c <LL_ADC_IsInternalRegulatorEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10d      	bne.n	80011e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	f043 0210 	orr.w	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff75 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 80011f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 80ca 	bne.w	8001394 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80c6 	bne.w	8001394 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001210:	f043 0202 	orr.w	r2, r3, #2
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff35 	bl	800108c <LL_ADC_IsEnabled>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d110      	bne.n	800124a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001228:	4863      	ldr	r0, [pc, #396]	; (80013b8 <HAL_ADC_Init+0x290>)
 800122a:	f7ff ff2f 	bl	800108c <LL_ADC_IsEnabled>
 800122e:	4604      	mov	r4, r0
 8001230:	4862      	ldr	r0, [pc, #392]	; (80013bc <HAL_ADC_Init+0x294>)
 8001232:	f7ff ff2b 	bl	800108c <LL_ADC_IsEnabled>
 8001236:	4603      	mov	r3, r0
 8001238:	4323      	orrs	r3, r4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4619      	mov	r1, r3
 8001244:	485e      	ldr	r0, [pc, #376]	; (80013c0 <HAL_ADC_Init+0x298>)
 8001246:	f7ff fd79 	bl	8000d3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e5b      	ldrb	r3, [r3, #25]
 800124e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001254:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800125a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001260:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	3b01      	subs	r3, #1
 800127e:	045b      	lsls	r3, r3, #17
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_ADC_Init+0x29c>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	69b9      	ldr	r1, [r7, #24]
 80012b2:	430b      	orrs	r3, r1
 80012b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff0d 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 80012c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff1a 	bl	8001100 <LL_ADC_INJ_IsConversionOngoing>
 80012cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d13d      	bne.n	8001350 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d13a      	bne.n	8001350 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012f6:	f023 0302 	bic.w	r3, r3, #2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	430b      	orrs	r3, r1
 8001302:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800130a:	2b01      	cmp	r3, #1
 800130c:	d118      	bne.n	8001340 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001330:	430a      	orrs	r2, r1
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	e007      	b.n	8001350 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10c      	bne.n	8001372 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f023 010f 	bic.w	r1, r3, #15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
 8001370:	e007      	b.n	8001382 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020f 	bic.w	r2, r2, #15
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001386:	f023 0303 	bic.w	r3, r3, #3
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
 8001392:	e007      	b.n	80013a4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001398:	f043 0210 	orr.w	r2, r3, #16
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000
 80013b4:	053e2d63 	.word	0x053e2d63
 80013b8:	50040000 	.word	0x50040000
 80013bc:	50040100 	.word	0x50040100
 80013c0:	50040300 	.word	0x50040300
 80013c4:	fff0c007 	.word	0xfff0c007

080013c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013d0:	4857      	ldr	r0, [pc, #348]	; (8001530 <HAL_ADC_Start+0x168>)
 80013d2:	f7ff fddd 	bl	8000f90 <LL_ADC_GetMultimode>
 80013d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fe7c 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 809c 	bne.w	8001522 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_Start+0x30>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e097      	b.n	8001528 <HAL_ADC_Start+0x160>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fd7d 	bl	8001f00 <ADC_Enable>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8083 	bne.w	8001518 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a42      	ldr	r2, [pc, #264]	; (8001534 <HAL_ADC_Start+0x16c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d002      	beq.n	8001436 <HAL_ADC_Start+0x6e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e000      	b.n	8001438 <HAL_ADC_Start+0x70>
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_ADC_Start+0x170>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	4293      	cmp	r3, r2
 800143e:	d002      	beq.n	8001446 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800145e:	d106      	bne.n	800146e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	f023 0206 	bic.w	r2, r3, #6
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
 800146c:	e002      	b.n	8001474 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	221c      	movs	r2, #28
 800147a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <HAL_ADC_Start+0x16c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d002      	beq.n	8001494 <HAL_ADC_Start+0xcc>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	e000      	b.n	8001496 <HAL_ADC_Start+0xce>
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_ADC_Start+0x170>)
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	4293      	cmp	r3, r2
 800149c:	d008      	beq.n	80014b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d002      	beq.n	80014b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d114      	bne.n	80014da <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fded 	bl	80010b2 <LL_ADC_REG_StartConversion>
 80014d8:	e025      	b.n	8001526 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_ADC_Start+0x16c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d002      	beq.n	80014f6 <HAL_ADC_Start+0x12e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	e000      	b.n	80014f8 <HAL_ADC_Start+0x130>
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_ADC_Start+0x170>)
 80014f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00f      	beq.n	8001526 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
 8001516:	e006      	b.n	8001526 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001520:	e001      	b.n	8001526 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001522:	2302      	movs	r3, #2
 8001524:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001526:	7dfb      	ldrb	r3, [r7, #23]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	50040300 	.word	0x50040300
 8001534:	50040100 	.word	0x50040100
 8001538:	50040000 	.word	0x50040000

0800153c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001546:	4866      	ldr	r0, [pc, #408]	; (80016e0 <HAL_ADC_PollForConversion+0x1a4>)
 8001548:	f7ff fd22 	bl	8000f90 <LL_ADC_GetMultimode>
 800154c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d102      	bne.n	800155c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001556:	2308      	movs	r3, #8
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e02a      	b.n	80015b2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d002      	beq.n	800156e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b09      	cmp	r3, #9
 800156c:	d111      	bne.n	8001592 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0a4      	b.n	80016d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800158c:	2304      	movs	r3, #4
 800158e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001590:	e00f      	b.n	80015b2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001592:	4853      	ldr	r0, [pc, #332]	; (80016e0 <HAL_ADC_PollForConversion+0x1a4>)
 8001594:	f7ff fd0a 	bl	8000fac <LL_ADC_GetMultiDMATransfer>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	f043 0220 	orr.w	r2, r3, #32
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e093      	b.n	80016d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015ae:	2304      	movs	r3, #4
 80015b0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015b2:	f7ff fb93 	bl	8000cdc <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015b8:	e021      	b.n	80015fe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d01d      	beq.n	80015fe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015c2:	f7ff fb8b 	bl	8000cdc <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d302      	bcc.n	80015d8 <HAL_ADC_PollForConversion+0x9c>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d112      	bne.n	80015fe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10b      	bne.n	80015fe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f043 0204 	orr.w	r2, r3, #4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e06b      	b.n	80016d6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0d6      	beq.n	80015ba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001610:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc29 	bl	8000e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7e5b      	ldrb	r3, [r3, #25]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d118      	bne.n	8001662 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b08      	cmp	r3, #8
 800163c:	d111      	bne.n	8001662 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_ADC_PollForConversion+0x1a8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d002      	beq.n	8001672 <HAL_ADC_PollForConversion+0x136>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	e000      	b.n	8001674 <HAL_ADC_PollForConversion+0x138>
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_ADC_PollForConversion+0x1ac>)
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	4293      	cmp	r3, r2
 800167a:	d008      	beq.n	800168e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d002      	beq.n	800168e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b09      	cmp	r3, #9
 800168c:	d104      	bne.n	8001698 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	e00c      	b.n	80016b2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_ADC_PollForConversion+0x1a8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d002      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x16c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	e000      	b.n	80016aa <HAL_ADC_PollForConversion+0x16e>
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_ADC_PollForConversion+0x1ac>)
 80016aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d104      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2208      	movs	r2, #8
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e008      	b.n	80016d4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d103      	bne.n	80016d4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	220c      	movs	r2, #12
 80016d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	50040300 	.word	0x50040300
 80016e4:	50040100 	.word	0x50040100
 80016e8:	50040000 	.word	0x50040000

080016ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0b6      	sub	sp, #216	; 0xd8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADC_ConfigChannel+0x22>
 8001726:	2302      	movs	r3, #2
 8001728:	e3d5      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x7ce>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fccf 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 83ba 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	3b02      	subs	r3, #2
 8001752:	2b03      	cmp	r3, #3
 8001754:	d81b      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x86>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_ADC_ConfigChannel+0x54>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	08001775 	.word	0x08001775
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001785 	.word	0x08001785
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	220c      	movs	r2, #12
 8001770:	605a      	str	r2, [r3, #4]
          break;
 8001772:	e011      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2212      	movs	r2, #18
 8001778:	605a      	str	r2, [r3, #4]
          break;
 800177a:	e00d      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2218      	movs	r2, #24
 8001780:	605a      	str	r2, [r3, #4]
          break;
 8001782:	e009      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	605a      	str	r2, [r3, #4]
          break;
 800178c:	e004      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2206      	movs	r2, #6
 8001792:	605a      	str	r2, [r3, #4]
          break;
 8001794:	e000      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001796:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f7ff fb78 	bl	8000e9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc93 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 80017b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fc9f 	bl	8001100 <LL_ADC_INJ_IsConversionOngoing>
 80017c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 81c1 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 81bc 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017e2:	d10f      	bne.n	8001804 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fb7f 	bl	8000ef2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb26 	bl	8000e4e <LL_ADC_SetSamplingTimeCommonConfig>
 8001802:	e00e      	b.n	8001822 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	461a      	mov	r2, r3
 8001812:	f7ff fb6e 	bl	8000ef2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb16 	bl	8000e4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00a      	beq.n	800185a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6919      	ldr	r1, [r3, #16]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001854:	f7ff faa6 	bl	8000da4 <LL_ADC_SetOffset>
 8001858:	e17b      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fac3 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x17e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fab8 	bl	8000dec <LL_ADC_GetOffsetChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	e01e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1bc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff faad 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e004      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80018b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1d4>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	e018      	b.n	800190e <HAL_ADC_ConfigChannel+0x206>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	e004      	b.n	800190e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800190e:	429a      	cmp	r2, r3
 8001910:	d106      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa7c 	bl	8000e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fa60 	bl	8000dec <LL_ADC_GetOffsetChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_ADC_ConfigChannel+0x244>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa55 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	0e9b      	lsrs	r3, r3, #26
 8001946:	f003 021f 	and.w	r2, r3, #31
 800194a:	e01e      	b.n	800198a <HAL_ADC_ConfigChannel+0x282>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fa4a 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800196a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800196e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e004      	b.n	8001988 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800197e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x29a>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	e018      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x2cc>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e004      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80019ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	2101      	movs	r1, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fa19 	bl	8000e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f9fd 	bl	8000dec <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x30a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2102      	movs	r1, #2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f9f2 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	0e9b      	lsrs	r3, r3, #26
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	e01e      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x348>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9e7 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e004      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x360>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	e016      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x38e>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	e004      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d106      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f9b8 	bl	8000e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2103      	movs	r1, #3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f99c 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x3cc>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f991 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 021f 	and.w	r2, r3, #31
 8001ad2:	e017      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x3fc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2103      	movs	r1, #3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f986 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e003      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x414>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0e9b      	lsrs	r3, r3, #26
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	e011      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x438>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001b34:	2320      	movs	r3, #32
 8001b36:	e003      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f963 	bl	8000e18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa98 	bl	800108c <LL_ADC_IsEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8140 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	461a      	mov	r2, r3
 8001b72:	f7ff f9e9 	bl	8000f48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4a8f      	ldr	r2, [pc, #572]	; (8001db8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f040 8131 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10b      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x4a2>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0e9b      	lsrs	r3, r3, #26
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	bf94      	ite	ls
 8001ba2:	2301      	movls	r3, #1
 8001ba4:	2300      	movhi	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	e019      	b.n	8001bde <HAL_ADC_ConfigChannel+0x4d6>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bba:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d079      	beq.n	8001cd6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x4f6>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	069b      	lsls	r3, r3, #26
 8001bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfc:	e015      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x522>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001c16:	2320      	movs	r3, #32
 8001c18:	e003      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	069b      	lsls	r3, r3, #26
 8001c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x542>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	e017      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x572>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e003      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	ea42 0103 	orr.w	r1, r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x598>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0e9b      	lsrs	r3, r3, #26
 8001c90:	3301      	adds	r3, #1
 8001c92:	f003 021f 	and.w	r2, r3, #31
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	051b      	lsls	r3, r3, #20
 8001c9e:	e018      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x5ca>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 021f 	and.w	r2, r3, #31
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	e081      	b.n	8001dda <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x5ea>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	3301      	adds	r3, #1
 8001cea:	069b      	lsls	r3, r3, #26
 8001cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf0:	e015      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x616>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	069b      	lsls	r3, r3, #26
 8001d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x636>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	3301      	adds	r3, #1
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	e017      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x666>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e003      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x692>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0e9b      	lsrs	r3, r3, #26
 8001d84:	3301      	adds	r3, #1
 8001d86:	f003 021f 	and.w	r2, r3, #31
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b1e      	subs	r3, #30
 8001d92:	051b      	lsls	r3, r3, #20
 8001d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d98:	e01e      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x6d0>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	613b      	str	r3, [r7, #16]
  return result;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e006      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x6bc>
 8001db6:	bf00      	nop
 8001db8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	051b      	lsls	r3, r3, #20
 8001dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	6892      	ldr	r2, [r2, #8]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff f887 	bl	8000ef2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d06c      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df0:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001df2:	f7fe ffc9 	bl	8000d88 <LL_ADC_GetCommonPathInternalCh>
 8001df6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d127      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d121      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a35      	ldr	r2, [pc, #212]	; (8001eec <HAL_ADC_ConfigChannel+0x7e4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d157      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e22:	4619      	mov	r1, r3
 8001e24:	482f      	ldr	r0, [pc, #188]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e26:	f7fe ff9c 	bl	8000d62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	4a30      	ldr	r2, [pc, #192]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e52:	e03a      	b.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d113      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x77e>
 8001e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_ADC_ConfigChannel+0x7e4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d12a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4819      	ldr	r0, [pc, #100]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e80:	f7fe ff6f 	bl	8000d62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e84:	e021      	b.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_ADC_ConfigChannel+0x7f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d11c      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d116      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_ADC_ConfigChannel+0x7e4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d111      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001eb2:	f7fe ff56 	bl	8000d62 <LL_ADC_SetCommonPathInternalCh>
 8001eb6:	e008      	b.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ed2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	37d8      	adds	r7, #216	; 0xd8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	80080000 	.word	0x80080000
 8001ee4:	50040300 	.word	0x50040300
 8001ee8:	c7520000 	.word	0xc7520000
 8001eec:	50040000 	.word	0x50040000
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	053e2d63 	.word	0x053e2d63
 8001ef8:	cb840000 	.word	0xcb840000
 8001efc:	80000001 	.word	0x80000001

08001f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f8bd 	bl	800108c <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d14d      	bne.n	8001fb4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <ADC_Enable+0xc0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f043 0210 	orr.w	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e039      	b.n	8001fb6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f88c 	bl	8001064 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fec6 	bl	8000cdc <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f52:	e028      	b.n	8001fa6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f897 	bl	800108c <LL_ADC_IsEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f87b 	bl	8001064 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f6e:	f7fe feb5 	bl	8000cdc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d914      	bls.n	8001fa6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d00d      	beq.n	8001fa6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e007      	b.n	8001fb6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d1cf      	bne.n	8001f54 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	8000003f 	.word	0x8000003f

08001fc4 <LL_ADC_IsEnabled>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_IsEnabled+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_IsEnabled+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_REG_IsConversionOngoing>:
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b09f      	sub	sp, #124	; 0x7c
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800202a:	2302      	movs	r3, #2
 800202c:	e089      	b.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002036:	2300      	movs	r3, #0
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800203a:	2300      	movs	r3, #0
 800203c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a42      	ldr	r2, [pc, #264]	; (800214c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	e001      	b.n	8002052 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e068      	b.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ffb9 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 8002078:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffb3 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d14a      	bne.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800208a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800208c:	2b00      	cmp	r3, #0
 800208e:	d147      	bne.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002092:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d027      	beq.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ae:	035b      	lsls	r3, r3, #13
 80020b0:	430b      	orrs	r3, r1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b8:	4824      	ldr	r0, [pc, #144]	; (800214c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020ba:	f7ff ff83 	bl	8001fc4 <LL_ADC_IsEnabled>
 80020be:	4604      	mov	r4, r0
 80020c0:	4823      	ldr	r0, [pc, #140]	; (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020c2:	f7ff ff7f 	bl	8001fc4 <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4323      	orrs	r3, r4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d132      	bne.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020d6:	f023 030f 	bic.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	6811      	ldr	r1, [r2, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6892      	ldr	r2, [r2, #8]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	431a      	orrs	r2, r3
 80020e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020ea:	e023      	b.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f8:	4814      	ldr	r0, [pc, #80]	; (800214c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020fa:	f7ff ff63 	bl	8001fc4 <LL_ADC_IsEnabled>
 80020fe:	4604      	mov	r4, r0
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002102:	f7ff ff5f 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	4323      	orrs	r3, r4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d112      	bne.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800210e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002116:	f023 030f 	bic.w	r3, r3, #15
 800211a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800211c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800211e:	e009      	b.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002132:	e000      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002134:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800213e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002142:	4618      	mov	r0, r3
 8002144:	377c      	adds	r7, #124	; 0x7c
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	50040000 	.word	0x50040000
 8002150:	50040100 	.word	0x50040100
 8002154:	50040300 	.word	0x50040300

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ff8e 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff47 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff5c 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff8e 	bl	8002210 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffb0 	bl	8002278 <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	e14e      	b.n	80025d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8140 	beq.w	80025cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <HAL_GPIO_Init+0x40>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0201 	and.w	r2, r3, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d017      	beq.n	8002402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	6939      	ldr	r1, [r7, #16]
 8002452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0203 	and.w	r2, r3, #3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 809a 	beq.w	80025cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002498:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <HAL_GPIO_Init+0x2cc>)
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	4a54      	ldr	r2, [pc, #336]	; (80025f0 <HAL_GPIO_Init+0x2cc>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6613      	str	r3, [r2, #96]	; 0x60
 80024a4:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x2cc>)
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024b0:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	220f      	movs	r2, #15
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1e0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_GPIO_Init+0x2d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1dc>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a45      	ldr	r2, [pc, #276]	; (80025fc <HAL_GPIO_Init+0x2d8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1d8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a44      	ldr	r2, [pc, #272]	; (8002600 <HAL_GPIO_Init+0x2dc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1d4>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 80024f8:	2307      	movs	r3, #7
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002516:	4937      	ldr	r1, [pc, #220]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002524:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f aea9 	bne.w	8002334 <HAL_GPIO_Init+0x10>
  }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000800 	.word	0x48000800
 8002600:	48000c00 	.word	0x48000c00
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002624:	e002      	b.n	800262c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43d9      	mvns	r1, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	400b      	ands	r3, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_PWREx_GetVoltageRange+0x18>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000

08002688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002696:	d130      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a4:	d038      	beq.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ae:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2232      	movs	r2, #50	; 0x32
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	3301      	adds	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026cc:	e002      	b.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e0:	d102      	bne.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f2      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d110      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e00f      	b.n	800271a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d007      	beq.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002716:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000
 800272c:	20000000 	.word	0x20000000
 8002730:	431bde83 	.word	0x431bde83

08002734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f000 bc56 	b.w	8002ff4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002748:	4ba1      	ldr	r3, [pc, #644]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002752:	4b9f      	ldr	r3, [pc, #636]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80e6 	beq.w	8002936 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_RCC_OscConfig+0x4c>
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	f040 808d 	bne.w	8002892 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 8089 	bne.w	8002892 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002780:	4b93      	ldr	r3, [pc, #588]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_RCC_OscConfig+0x66>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f000 bc2d 	b.w	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279e:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <HAL_RCC_OscConfig+0x80>
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b2:	e005      	b.n	80027c0 <HAL_RCC_OscConfig+0x8c>
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d224      	bcs.n	800280e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fdbf 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f000 bc0d 	b.w	8002ff4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7c      	ldr	r2, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	4977      	ldr	r1, [pc, #476]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	4972      	ldr	r1, [pc, #456]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e025      	b.n	800285a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280e:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6f      	ldr	r2, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	496a      	ldr	r1, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fd7e 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e3cc      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285a:	f000 fcb3 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 800285e:	4602      	mov	r2, r0
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	495a      	ldr	r1, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x2a0>)
 800286c:	5ccb      	ldrb	r3, [r1, r3]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_OscConfig+0x2a4>)
 8002878:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_RCC_OscConfig+0x2a8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f9dc 	bl	8000c3c <HAL_InitTick>
 8002884:	4603      	mov	r3, r0
 8002886:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d052      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	e3b0      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d032      	beq.n	8002900 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fa19 	bl	8000cdc <HAL_GetTick>
 80028aa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ae:	f7fe fa15 	bl	8000cdc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e399      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	493a      	ldr	r1, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
 80028fe:	e01a      	b.n	8002936 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290c:	f7fe f9e6 	bl	8000cdc <HAL_GetTick>
 8002910:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002914:	f7fe f9e2 	bl	8000cdc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e366      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x1e0>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d073      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d10e      	bne.n	800296c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d063      	beq.n	8002a28 <HAL_RCC_OscConfig+0x2f4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d15f      	bne.n	8002a28 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e343      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x250>
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0x28c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x274>
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0x28c>
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <HAL_RCC_OscConfig+0x29c>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe f988 	bl	8000cdc <HAL_GetTick>
 80029cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ce:	e010      	b.n	80029f2 <HAL_RCC_OscConfig+0x2be>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08004984 	.word	0x08004984
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe f97c 	bl	8000cdc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e300      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f2:	4ba0      	ldr	r3, [pc, #640]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2ac>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe f96c 	bl	8000cdc <HAL_GetTick>
 8002a04:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe f968 	bl	8000cdc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e2ec      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1a:	4b96      	ldr	r3, [pc, #600]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2d4>
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d060      	beq.n	8002af8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_OscConfig+0x314>
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d116      	bne.n	8002a76 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a48:	4b8a      	ldr	r3, [pc, #552]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x32c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e2c9      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	4981      	ldr	r1, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a74:	e040      	b.n	8002af8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d023      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7c      	ldr	r2, [pc, #496]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f927 	bl	8000cdc <HAL_GetTick>
 8002a8e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe f923 	bl	8000cdc <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e2a7      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa4:	4b73      	ldr	r3, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b70      	ldr	r3, [pc, #448]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	496d      	ldr	r1, [pc, #436]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e018      	b.n	8002af8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f903 	bl	8000cdc <HAL_GetTick>
 8002ad6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe f8ff 	bl	8000cdc <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e283      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d07f      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d05f      	beq.n	8002bcc <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002b0c:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b12:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d037      	beq.n	8002b92 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e25c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4a:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b54:	f7fe f8c2 	bl	8000cdc <HAL_GetTick>
 8002b58:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7fe f8be 	bl	8000cdc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b11      	cmp	r3, #17
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e242      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6e:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ef      	bne.n	8002b5c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002b7c:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	f023 0210 	bic.w	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	493a      	ldr	r1, [pc, #232]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b98:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe f89b 	bl	8000cdc <HAL_GetTick>
 8002ba6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002baa:	f7fe f897 	bl	8000cdc <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b11      	cmp	r3, #17
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e21b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ef      	beq.n	8002baa <HAL_RCC_OscConfig+0x476>
 8002bca:	e01b      	b.n	8002c04 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd2:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe f87e 	bl	8000cdc <HAL_GetTick>
 8002be0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fe f87a 	bl	8000cdc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b11      	cmp	r3, #17
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1fe      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ef      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80c1 	beq.w	8002d94 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10e      	bne.n	8002c42 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_OscConfig+0x540>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_OscConfig+0x544>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCC_OscConfig+0x544>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_OscConfig+0x544>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f83f 	bl	8000cdc <HAL_GetTick>
 8002c5e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c60:	e00c      	b.n	8002c7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7fe f83b 	bl	8000cdc <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d905      	bls.n	8002c7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1bf      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7c:	4bb1      	ldr	r3, [pc, #708]	; (8002f44 <HAL_RCC_OscConfig+0x810>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ec      	beq.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d02c      	beq.n	8002cee <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002c94:	4bac      	ldr	r3, [pc, #688]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	49a8      	ldr	r1, [pc, #672]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cba:	4ba3      	ldr	r3, [pc, #652]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4aa1      	ldr	r2, [pc, #644]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cca:	4b9f      	ldr	r3, [pc, #636]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a9d      	ldr	r2, [pc, #628]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cda:	e018      	b.n	8002d0e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cdc:	4b9a      	ldr	r3, [pc, #616]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	4a99      	ldr	r2, [pc, #612]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cec:	e00f      	b.n	8002d0e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cee:	4b96      	ldr	r3, [pc, #600]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	4a94      	ldr	r2, [pc, #592]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cfe:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	4a90      	ldr	r2, [pc, #576]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fd ffe1 	bl	8000cdc <HAL_GetTick>
 8002d1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fd ffdd 	bl	8000cdc <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e15f      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d34:	4b84      	ldr	r3, [pc, #528]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0ed      	beq.n	8002d1e <HAL_RCC_OscConfig+0x5ea>
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fd ffca 	bl	8000cdc <HAL_GetTick>
 8002d48:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7fd ffc6 	bl	8000cdc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e148      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d62:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ed      	bne.n	8002d4c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002d70:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a74      	ldr	r2, [pc, #464]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002da8:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dae:	4a66      	ldr	r2, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fd ff90 	bl	8000cdc <HAL_GetTick>
 8002dbc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc0:	f7fd ff8c 	bl	8000cdc <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e110      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x68c>
 8002de0:	e01b      	b.n	8002e1a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fd ff73 	bl	8000cdc <HAL_GetTick>
 8002df6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dfa:	f7fd ff6f 	bl	8000cdc <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0f3      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ef      	bne.n	8002dfa <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80e7 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f040 80b7 	bne.w	8002f9c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0203 	and.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d124      	bne.n	8002e8c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d11b      	bne.n	8002e8c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d113      	bne.n	8002e8c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d109      	bne.n	8002e8c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d061      	beq.n	8002f50 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d056      	beq.n	8002f40 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e9e:	f7fd ff1d 	bl	8000cdc <HAL_GetTick>
 8002ea2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd ff19 	bl	8000cdc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e09d      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_OscConfig+0x818>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ede:	0212      	lsls	r2, r2, #8
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	0552      	lsls	r2, r2, #21
 8002eec:	4311      	orrs	r1, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef2:	0852      	lsrs	r2, r2, #1
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	0652      	lsls	r2, r2, #25
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	4913      	ldr	r1, [pc, #76]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f18:	f7fd fee0 	bl	8000cdc <HAL_GetTick>
 8002f1c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fd fedc 	bl	8000cdc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e060      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x814>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f3e:	e058      	b.n	8002ff2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e057      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
 8002f44:	40007000 	.word	0x40007000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f50:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d14a      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f74:	f7fd feb2 	bl	8000cdc <HAL_GetTick>
 8002f78:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fd feae 	bl	8000cdc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e032      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x848>
 8002f9a:	e02a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d025      	beq.n	8002fee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fac:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fb4:	f023 0303 	bic.w	r3, r3, #3
 8002fb8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fc4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fd fe89 	bl	8000cdc <HAL_GetTick>
 8002fca:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fd fe85 	bl	8000cdc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e009      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x8c8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x89a>
 8002fec:	e001      	b.n	8002ff2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3728      	adds	r7, #40	; 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0c8      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4961      	ldr	r1, [pc, #388]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b0      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d04c      	beq.n	80030ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003058:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d121      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e09e      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d107      	bne.n	8003080 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003070:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d115      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e092      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d107      	bne.n	8003098 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003088:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e086      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003098:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e07e      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a8:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 0203 	bic.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	493f      	ldr	r1, [pc, #252]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ba:	f7fd fe0f 	bl	8000cdc <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7fd fe0b 	bl	8000cdc <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e066      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 020c 	and.w	r2, r3, #12
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d1eb      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	492c      	ldr	r1, [pc, #176]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d210      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 0207 	bic.w	r2, r3, #7
 800311e:	4924      	ldr	r1, [pc, #144]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e036      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4918      	ldr	r1, [pc, #96]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4910      	ldr	r1, [pc, #64]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003176:	f000 f825 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 800317a:	4602      	mov	r2, r0
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	490c      	ldr	r1, [pc, #48]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	5ccb      	ldrb	r3, [r1, r3]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fd4e 	bl	8000c3c <HAL_InitTick>
 80031a0:	4603      	mov	r3, r0
 80031a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80031a4:	7afb      	ldrb	r3, [r7, #11]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08004984 	.word	0x08004984
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031dc:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x34>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d121      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d11e      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003204:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e005      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003234:	e00a      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d102      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e004      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d101      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800324a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d134      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0xa6>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d003      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0xac>
 8003268:	e005      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800326c:	617b      	str	r3, [r7, #20]
      break;
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003272:	617b      	str	r3, [r7, #20]
      break;
 8003274:	e002      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	617b      	str	r3, [r7, #20]
      break;
 800327a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	3301      	adds	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	fb02 f203 	mul.w	r2, r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	0e5b      	lsrs	r3, r3, #25
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	3301      	adds	r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032bc:	69bb      	ldr	r3, [r7, #24]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	0800499c 	.word	0x0800499c
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	007a1200 	.word	0x007a1200

080032dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4904      	ldr	r1, [pc, #16]	; (800331c <HAL_RCC_GetPCLK1Freq+0x28>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	08004994 	.word	0x08004994

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003324:	f7ff ffda 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0adb      	lsrs	r3, r3, #11
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4904      	ldr	r1, [pc, #16]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	08004994 	.word	0x08004994

0800334c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003358:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003364:	f7ff f982 	bl	800266c <HAL_PWREx_GetVoltageRange>
 8003368:	6178      	str	r0, [r7, #20]
 800336a:	e014      	b.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003384:	f7ff f972 	bl	800266c <HAL_PWREx_GetVoltageRange>
 8003388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d10b      	bne.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d919      	bls.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2ba0      	cmp	r3, #160	; 0xa0
 80033a8:	d902      	bls.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033aa:	2302      	movs	r3, #2
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e013      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b0:	2301      	movs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e010      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d902      	bls.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033bc:	2303      	movs	r3, #3
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e00a      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d102      	bne.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c8:	2302      	movs	r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	e004      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d101      	bne.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	4909      	ldr	r1, [pc, #36]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40022000 	.word	0x40022000

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003414:	2300      	movs	r3, #0
 8003416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003418:	2300      	movs	r3, #0
 800341a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 809e 	beq.w	8003566 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	4a3f      	ldr	r2, [pc, #252]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	6593      	str	r3, [r2, #88]	; 0x58
 8003450:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003460:	4b3a      	ldr	r3, [pc, #232]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a39      	ldr	r2, [pc, #228]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800346c:	f7fd fc36 	bl	8000cdc <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003472:	e009      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fd fc32 	bl	8000cdc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d902      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	74fb      	strb	r3, [r7, #19]
        break;
 8003486:	e005      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ef      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d15a      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01e      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d019      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034e2:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d016      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fbf2 	bl	8000cdc <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fa:	e00b      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fbee 	bl	8000cdc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d902      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	74fb      	strb	r3, [r7, #19]
            break;
 8003512:	e006      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ec      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4904      	ldr	r1, [pc, #16]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800353e:	e009      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
 8003544:	e006      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003554:	7c7b      	ldrb	r3, [r7, #17]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355a:	4b6e      	ldr	r3, [pc, #440]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	4a6d      	ldr	r2, [pc, #436]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003564:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003572:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f023 0203 	bic.w	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4964      	ldr	r1, [pc, #400]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003594:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 020c 	bic.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	495c      	ldr	r1, [pc, #368]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4953      	ldr	r1, [pc, #332]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035d8:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	494b      	ldr	r1, [pc, #300]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fa:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4942      	ldr	r1, [pc, #264]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800361c:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	493a      	ldr	r1, [pc, #232]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363e:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	4931      	ldr	r1, [pc, #196]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4929      	ldr	r1, [pc, #164]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4920      	ldr	r1, [pc, #128]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	4918      	ldr	r1, [pc, #96]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	490a      	ldr	r1, [pc, #40]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003708:	7cbb      	ldrb	r3, [r7, #18]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e040      	b.n	80037ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd f96a 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8c0 	bl	80038dc <UART_SetConfig>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e022      	b.n	80037ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fae8 	bl	8003d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fb6f 	bl	8003e88 <UART_CheckIdleState>
 80037aa:	4603      	mov	r3, r0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 8082 	bne.w	80038d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_Transmit+0x26>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07a      	b.n	80038d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Transmit+0x38>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e073      	b.n	80038d4 <HAL_UART_Transmit+0x120>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2221      	movs	r2, #33	; 0x21
 8003800:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003802:	f7fd fa6b 	bl	8000cdc <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003820:	d108      	bne.n	8003834 <HAL_UART_Transmit+0x80>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e003      	b.n	800383c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003844:	e02d      	b.n	80038a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fb62 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e039      	b.n	80038d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003872:	b292      	uxth	r2, r2
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	3302      	adds	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	e008      	b.n	8003890 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b292      	uxth	r2, r2
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3301      	adds	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1cb      	bne.n	8003846 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2140      	movs	r1, #64	; 0x40
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fb2e 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e005      	b.n	80038d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b5b0      	push	{r4, r5, r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4baa      	ldr	r3, [pc, #680]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	69f9      	ldr	r1, [r7, #28]
 8003910:	430b      	orrs	r3, r1
 8003912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a9f      	ldr	r2, [pc, #636]	; (8003bb4 <UART_SetConfig+0x2d8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a96      	ldr	r2, [pc, #600]	; (8003bb8 <UART_SetConfig+0x2dc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d121      	bne.n	80039a6 <UART_SetConfig+0xca>
 8003962:	4b96      	ldr	r3, [pc, #600]	; (8003bbc <UART_SetConfig+0x2e0>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d817      	bhi.n	80039a0 <UART_SetConfig+0xc4>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x9c>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	08003989 	.word	0x08003989
 800397c:	08003995 	.word	0x08003995
 8003980:	0800398f 	.word	0x0800398f
 8003984:	0800399b 	.word	0x0800399b
 8003988:	2301      	movs	r3, #1
 800398a:	76fb      	strb	r3, [r7, #27]
 800398c:	e096      	b.n	8003abc <UART_SetConfig+0x1e0>
 800398e:	2302      	movs	r3, #2
 8003990:	76fb      	strb	r3, [r7, #27]
 8003992:	e093      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003994:	2304      	movs	r3, #4
 8003996:	76fb      	strb	r3, [r7, #27]
 8003998:	e090      	b.n	8003abc <UART_SetConfig+0x1e0>
 800399a:	2308      	movs	r3, #8
 800399c:	76fb      	strb	r3, [r7, #27]
 800399e:	e08d      	b.n	8003abc <UART_SetConfig+0x1e0>
 80039a0:	2310      	movs	r3, #16
 80039a2:	76fb      	strb	r3, [r7, #27]
 80039a4:	e08a      	b.n	8003abc <UART_SetConfig+0x1e0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a85      	ldr	r2, [pc, #532]	; (8003bc0 <UART_SetConfig+0x2e4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d132      	bne.n	8003a16 <UART_SetConfig+0x13a>
 80039b0:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <UART_SetConfig+0x2e0>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d828      	bhi.n	8003a10 <UART_SetConfig+0x134>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0xe8>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a11 	.word	0x08003a11
 80039cc:	08003a11 	.word	0x08003a11
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a05 	.word	0x08003a05
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a11 	.word	0x08003a11
 80039e4:	080039ff 	.word	0x080039ff
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a11 	.word	0x08003a11
 80039f0:	08003a11 	.word	0x08003a11
 80039f4:	08003a0b 	.word	0x08003a0b
 80039f8:	2300      	movs	r3, #0
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e05e      	b.n	8003abc <UART_SetConfig+0x1e0>
 80039fe:	2302      	movs	r3, #2
 8003a00:	76fb      	strb	r3, [r7, #27]
 8003a02:	e05b      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a04:	2304      	movs	r3, #4
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e058      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e055      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a10:	2310      	movs	r3, #16
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e052      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <UART_SetConfig+0x2e8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d120      	bne.n	8003a62 <UART_SetConfig+0x186>
 8003a20:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <UART_SetConfig+0x2e0>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a2a:	2b30      	cmp	r3, #48	; 0x30
 8003a2c:	d013      	beq.n	8003a56 <UART_SetConfig+0x17a>
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	d814      	bhi.n	8003a5c <UART_SetConfig+0x180>
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d009      	beq.n	8003a4a <UART_SetConfig+0x16e>
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d810      	bhi.n	8003a5c <UART_SetConfig+0x180>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <UART_SetConfig+0x168>
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d006      	beq.n	8003a50 <UART_SetConfig+0x174>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x180>
 8003a44:	2300      	movs	r3, #0
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e038      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	76fb      	strb	r3, [r7, #27]
 8003a4e:	e035      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a50:	2304      	movs	r3, #4
 8003a52:	76fb      	strb	r3, [r7, #27]
 8003a54:	e032      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a56:	2308      	movs	r3, #8
 8003a58:	76fb      	strb	r3, [r7, #27]
 8003a5a:	e02f      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	e02c      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <UART_SetConfig+0x2d8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d125      	bne.n	8003ab8 <UART_SetConfig+0x1dc>
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <UART_SetConfig+0x2e0>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a7a:	d017      	beq.n	8003aac <UART_SetConfig+0x1d0>
 8003a7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a80:	d817      	bhi.n	8003ab2 <UART_SetConfig+0x1d6>
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a86:	d00b      	beq.n	8003aa0 <UART_SetConfig+0x1c4>
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d811      	bhi.n	8003ab2 <UART_SetConfig+0x1d6>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <UART_SetConfig+0x1be>
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d006      	beq.n	8003aa6 <UART_SetConfig+0x1ca>
 8003a98:	e00b      	b.n	8003ab2 <UART_SetConfig+0x1d6>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e00d      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	76fb      	strb	r3, [r7, #27]
 8003aa4:	e00a      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	76fb      	strb	r3, [r7, #27]
 8003aaa:	e007      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003aac:	2308      	movs	r3, #8
 8003aae:	76fb      	strb	r3, [r7, #27]
 8003ab0:	e004      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	76fb      	strb	r3, [r7, #27]
 8003ab6:	e001      	b.n	8003abc <UART_SetConfig+0x1e0>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	; (8003bb4 <UART_SetConfig+0x2d8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f040 8082 	bne.w	8003bcc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac8:	7efb      	ldrb	r3, [r7, #27]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d823      	bhi.n	8003b16 <UART_SetConfig+0x23a>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x1f8>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003b07 	.word	0x08003b07
 8003ae8:	08003b17 	.word	0x08003b17
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b17 	.word	0x08003b17
 8003af4:	08003b0f 	.word	0x08003b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7ff fbfc 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8003afc:	6178      	str	r0, [r7, #20]
        break;
 8003afe:	e00f      	b.n	8003b20 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <UART_SetConfig+0x2ec>)
 8003b02:	617b      	str	r3, [r7, #20]
        break;
 8003b04:	e00c      	b.n	8003b20 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7ff fb5d 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003b0a:	6178      	str	r0, [r7, #20]
        break;
 8003b0c:	e008      	b.n	8003b20 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	617b      	str	r3, [r7, #20]
        break;
 8003b14:	e004      	b.n	8003b20 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8100 	beq.w	8003d28 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d305      	bcc.n	8003b44 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d902      	bls.n	8003b4a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	76bb      	strb	r3, [r7, #26]
 8003b48:	e0ee      	b.n	8003d28 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	020b      	lsls	r3, r1, #8
 8003b5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b60:	0202      	lsls	r2, r0, #8
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	6849      	ldr	r1, [r1, #4]
 8003b66:	0849      	lsrs	r1, r1, #1
 8003b68:	4608      	mov	r0, r1
 8003b6a:	f04f 0100 	mov.w	r1, #0
 8003b6e:	1814      	adds	r4, r2, r0
 8003b70:	eb43 0501 	adc.w	r5, r3, r1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	4620      	mov	r0, r4
 8003b80:	4629      	mov	r1, r5
 8003b82:	f7fc fb7d 	bl	8000280 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b94:	d308      	bcc.n	8003ba8 <UART_SetConfig+0x2cc>
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9c:	d204      	bcs.n	8003ba8 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e0bf      	b.n	8003d28 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	76bb      	strb	r3, [r7, #26]
 8003bac:	e0bc      	b.n	8003d28 <UART_SetConfig+0x44c>
 8003bae:	bf00      	nop
 8003bb0:	efff69f3 	.word	0xefff69f3
 8003bb4:	40008000 	.word	0x40008000
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd4:	d15b      	bne.n	8003c8e <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8003bd6:	7efb      	ldrb	r3, [r7, #27]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d828      	bhi.n	8003c2e <UART_SetConfig+0x352>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x308>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7ff fb74 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	6178      	str	r0, [r7, #20]
        break;
 8003c0e:	e013      	b.n	8003c38 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7ff fb86 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8003c14:	6178      	str	r0, [r7, #20]
        break;
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <UART_SetConfig+0x464>)
 8003c1a:	617b      	str	r3, [r7, #20]
        break;
 8003c1c:	e00c      	b.n	8003c38 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7ff fad1 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003c22:	6178      	str	r0, [r7, #20]
        break;
 8003c24:	e008      	b.n	8003c38 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	617b      	str	r3, [r7, #20]
        break;
 8003c2c:	e004      	b.n	8003c38 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	76bb      	strb	r3, [r7, #26]
        break;
 8003c36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d074      	beq.n	8003d28 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	005a      	lsls	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d916      	bls.n	8003c88 <UART_SetConfig+0x3ac>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d212      	bcs.n	8003c88 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f023 030f 	bic.w	r3, r3, #15
 8003c6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	89fa      	ldrh	r2, [r7, #14]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	e04f      	b.n	8003d28 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	76bb      	strb	r3, [r7, #26]
 8003c8c:	e04c      	b.n	8003d28 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c8e:	7efb      	ldrb	r3, [r7, #27]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d828      	bhi.n	8003ce6 <UART_SetConfig+0x40a>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x3c0>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	08003ce7 	.word	0x08003ce7
 8003cac:	08003cd7 	.word	0x08003cd7
 8003cb0:	08003ce7 	.word	0x08003ce7
 8003cb4:	08003ce7 	.word	0x08003ce7
 8003cb8:	08003ce7 	.word	0x08003ce7
 8003cbc:	08003cdf 	.word	0x08003cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7ff fb18 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	6178      	str	r0, [r7, #20]
        break;
 8003cc6:	e013      	b.n	8003cf0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc8:	f7ff fb2a 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8003ccc:	6178      	str	r0, [r7, #20]
        break;
 8003cce:	e00f      	b.n	8003cf0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <UART_SetConfig+0x464>)
 8003cd2:	617b      	str	r3, [r7, #20]
        break;
 8003cd4:	e00c      	b.n	8003cf0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7ff fa75 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003cda:	6178      	str	r0, [r7, #20]
        break;
 8003cdc:	e008      	b.n	8003cf0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	617b      	str	r3, [r7, #20]
        break;
 8003ce4:	e004      	b.n	8003cf0 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	76bb      	strb	r3, [r7, #26]
        break;
 8003cee:	bf00      	nop
    }

    if (pclk != 0U)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	085a      	lsrs	r2, r3, #1
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	441a      	add	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d909      	bls.n	8003d24 <UART_SetConfig+0x448>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d16:	d205      	bcs.n	8003d24 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	e001      	b.n	8003d28 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d34:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	00f42400 	.word	0x00f42400

08003d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e42:	d10a      	bne.n	8003e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e98:	f7fc ff20 	bl	8000cdc <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d10e      	bne.n	8003eca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f82d 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e023      	b.n	8003f12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d10e      	bne.n	8003ef6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f817 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e00d      	b.n	8003f12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b09c      	sub	sp, #112	; 0x70
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	e0a5      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	f000 80a1 	beq.w	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fc fed1 	bl	8000cdc <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d13e      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f60:	667b      	str	r3, [r7, #100]	; 0x64
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	663b      	str	r3, [r7, #96]	; 0x60
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e067      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d04f      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe6:	d147      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
 8004012:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	613b      	str	r3, [r7, #16]
   return(result);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	66bb      	str	r3, [r7, #104]	; 0x68
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004044:	623a      	str	r2, [r7, #32]
 8004046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	6a3a      	ldr	r2, [r7, #32]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	61bb      	str	r3, [r7, #24]
   return(result);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e010      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	429a      	cmp	r2, r3
 8004094:	f43f af4a 	beq.w	8003f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3770      	adds	r7, #112	; 0x70
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <__errno>:
 80040a4:	4b01      	ldr	r3, [pc, #4]	; (80040ac <__errno+0x8>)
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <__libc_init_array>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	4d0d      	ldr	r5, [pc, #52]	; (80040e8 <__libc_init_array+0x38>)
 80040b4:	4c0d      	ldr	r4, [pc, #52]	; (80040ec <__libc_init_array+0x3c>)
 80040b6:	1b64      	subs	r4, r4, r5
 80040b8:	10a4      	asrs	r4, r4, #2
 80040ba:	2600      	movs	r6, #0
 80040bc:	42a6      	cmp	r6, r4
 80040be:	d109      	bne.n	80040d4 <__libc_init_array+0x24>
 80040c0:	4d0b      	ldr	r5, [pc, #44]	; (80040f0 <__libc_init_array+0x40>)
 80040c2:	4c0c      	ldr	r4, [pc, #48]	; (80040f4 <__libc_init_array+0x44>)
 80040c4:	f000 fc4e 	bl	8004964 <_init>
 80040c8:	1b64      	subs	r4, r4, r5
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	2600      	movs	r6, #0
 80040ce:	42a6      	cmp	r6, r4
 80040d0:	d105      	bne.n	80040de <__libc_init_array+0x2e>
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d8:	4798      	blx	r3
 80040da:	3601      	adds	r6, #1
 80040dc:	e7ee      	b.n	80040bc <__libc_init_array+0xc>
 80040de:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e2:	4798      	blx	r3
 80040e4:	3601      	adds	r6, #1
 80040e6:	e7f2      	b.n	80040ce <__libc_init_array+0x1e>
 80040e8:	08004a08 	.word	0x08004a08
 80040ec:	08004a08 	.word	0x08004a08
 80040f0:	08004a08 	.word	0x08004a08
 80040f4:	08004a0c 	.word	0x08004a0c

080040f8 <memset>:
 80040f8:	4402      	add	r2, r0
 80040fa:	4603      	mov	r3, r0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d100      	bne.n	8004102 <memset+0xa>
 8004100:	4770      	bx	lr
 8004102:	f803 1b01 	strb.w	r1, [r3], #1
 8004106:	e7f9      	b.n	80040fc <memset+0x4>

08004108 <siprintf>:
 8004108:	b40e      	push	{r1, r2, r3}
 800410a:	b500      	push	{lr}
 800410c:	b09c      	sub	sp, #112	; 0x70
 800410e:	ab1d      	add	r3, sp, #116	; 0x74
 8004110:	9002      	str	r0, [sp, #8]
 8004112:	9006      	str	r0, [sp, #24]
 8004114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004118:	4809      	ldr	r0, [pc, #36]	; (8004140 <siprintf+0x38>)
 800411a:	9107      	str	r1, [sp, #28]
 800411c:	9104      	str	r1, [sp, #16]
 800411e:	4909      	ldr	r1, [pc, #36]	; (8004144 <siprintf+0x3c>)
 8004120:	f853 2b04 	ldr.w	r2, [r3], #4
 8004124:	9105      	str	r1, [sp, #20]
 8004126:	6800      	ldr	r0, [r0, #0]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	a902      	add	r1, sp, #8
 800412c:	f000 f868 	bl	8004200 <_svfiprintf_r>
 8004130:	9b02      	ldr	r3, [sp, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	b01c      	add	sp, #112	; 0x70
 8004138:	f85d eb04 	ldr.w	lr, [sp], #4
 800413c:	b003      	add	sp, #12
 800413e:	4770      	bx	lr
 8004140:	2000000c 	.word	0x2000000c
 8004144:	ffff0208 	.word	0xffff0208

08004148 <__ssputs_r>:
 8004148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414c:	688e      	ldr	r6, [r1, #8]
 800414e:	429e      	cmp	r6, r3
 8004150:	4682      	mov	sl, r0
 8004152:	460c      	mov	r4, r1
 8004154:	4690      	mov	r8, r2
 8004156:	461f      	mov	r7, r3
 8004158:	d838      	bhi.n	80041cc <__ssputs_r+0x84>
 800415a:	898a      	ldrh	r2, [r1, #12]
 800415c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004160:	d032      	beq.n	80041c8 <__ssputs_r+0x80>
 8004162:	6825      	ldr	r5, [r4, #0]
 8004164:	6909      	ldr	r1, [r1, #16]
 8004166:	eba5 0901 	sub.w	r9, r5, r1
 800416a:	6965      	ldr	r5, [r4, #20]
 800416c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004170:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004174:	3301      	adds	r3, #1
 8004176:	444b      	add	r3, r9
 8004178:	106d      	asrs	r5, r5, #1
 800417a:	429d      	cmp	r5, r3
 800417c:	bf38      	it	cc
 800417e:	461d      	movcc	r5, r3
 8004180:	0553      	lsls	r3, r2, #21
 8004182:	d531      	bpl.n	80041e8 <__ssputs_r+0xa0>
 8004184:	4629      	mov	r1, r5
 8004186:	f000 fb47 	bl	8004818 <_malloc_r>
 800418a:	4606      	mov	r6, r0
 800418c:	b950      	cbnz	r0, 80041a4 <__ssputs_r+0x5c>
 800418e:	230c      	movs	r3, #12
 8004190:	f8ca 3000 	str.w	r3, [sl]
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	6921      	ldr	r1, [r4, #16]
 80041a6:	464a      	mov	r2, r9
 80041a8:	f000 fabe 	bl	8004728 <memcpy>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	6126      	str	r6, [r4, #16]
 80041ba:	6165      	str	r5, [r4, #20]
 80041bc:	444e      	add	r6, r9
 80041be:	eba5 0509 	sub.w	r5, r5, r9
 80041c2:	6026      	str	r6, [r4, #0]
 80041c4:	60a5      	str	r5, [r4, #8]
 80041c6:	463e      	mov	r6, r7
 80041c8:	42be      	cmp	r6, r7
 80041ca:	d900      	bls.n	80041ce <__ssputs_r+0x86>
 80041cc:	463e      	mov	r6, r7
 80041ce:	4632      	mov	r2, r6
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	4641      	mov	r1, r8
 80041d4:	f000 fab6 	bl	8004744 <memmove>
 80041d8:	68a3      	ldr	r3, [r4, #8]
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	1b9b      	subs	r3, r3, r6
 80041de:	4432      	add	r2, r6
 80041e0:	60a3      	str	r3, [r4, #8]
 80041e2:	6022      	str	r2, [r4, #0]
 80041e4:	2000      	movs	r0, #0
 80041e6:	e7db      	b.n	80041a0 <__ssputs_r+0x58>
 80041e8:	462a      	mov	r2, r5
 80041ea:	f000 fb6f 	bl	80048cc <_realloc_r>
 80041ee:	4606      	mov	r6, r0
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d1e1      	bne.n	80041b8 <__ssputs_r+0x70>
 80041f4:	6921      	ldr	r1, [r4, #16]
 80041f6:	4650      	mov	r0, sl
 80041f8:	f000 fabe 	bl	8004778 <_free_r>
 80041fc:	e7c7      	b.n	800418e <__ssputs_r+0x46>
	...

08004200 <_svfiprintf_r>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	4698      	mov	r8, r3
 8004206:	898b      	ldrh	r3, [r1, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	b09d      	sub	sp, #116	; 0x74
 800420c:	4607      	mov	r7, r0
 800420e:	460d      	mov	r5, r1
 8004210:	4614      	mov	r4, r2
 8004212:	d50e      	bpl.n	8004232 <_svfiprintf_r+0x32>
 8004214:	690b      	ldr	r3, [r1, #16]
 8004216:	b963      	cbnz	r3, 8004232 <_svfiprintf_r+0x32>
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	f000 fafd 	bl	8004818 <_malloc_r>
 800421e:	6028      	str	r0, [r5, #0]
 8004220:	6128      	str	r0, [r5, #16]
 8004222:	b920      	cbnz	r0, 800422e <_svfiprintf_r+0x2e>
 8004224:	230c      	movs	r3, #12
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	e0d1      	b.n	80043d2 <_svfiprintf_r+0x1d2>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	616b      	str	r3, [r5, #20]
 8004232:	2300      	movs	r3, #0
 8004234:	9309      	str	r3, [sp, #36]	; 0x24
 8004236:	2320      	movs	r3, #32
 8004238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800423c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004240:	2330      	movs	r3, #48	; 0x30
 8004242:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043ec <_svfiprintf_r+0x1ec>
 8004246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800424a:	f04f 0901 	mov.w	r9, #1
 800424e:	4623      	mov	r3, r4
 8004250:	469a      	mov	sl, r3
 8004252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004256:	b10a      	cbz	r2, 800425c <_svfiprintf_r+0x5c>
 8004258:	2a25      	cmp	r2, #37	; 0x25
 800425a:	d1f9      	bne.n	8004250 <_svfiprintf_r+0x50>
 800425c:	ebba 0b04 	subs.w	fp, sl, r4
 8004260:	d00b      	beq.n	800427a <_svfiprintf_r+0x7a>
 8004262:	465b      	mov	r3, fp
 8004264:	4622      	mov	r2, r4
 8004266:	4629      	mov	r1, r5
 8004268:	4638      	mov	r0, r7
 800426a:	f7ff ff6d 	bl	8004148 <__ssputs_r>
 800426e:	3001      	adds	r0, #1
 8004270:	f000 80aa 	beq.w	80043c8 <_svfiprintf_r+0x1c8>
 8004274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004276:	445a      	add	r2, fp
 8004278:	9209      	str	r2, [sp, #36]	; 0x24
 800427a:	f89a 3000 	ldrb.w	r3, [sl]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80a2 	beq.w	80043c8 <_svfiprintf_r+0x1c8>
 8004284:	2300      	movs	r3, #0
 8004286:	f04f 32ff 	mov.w	r2, #4294967295
 800428a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800428e:	f10a 0a01 	add.w	sl, sl, #1
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	9307      	str	r3, [sp, #28]
 8004296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800429a:	931a      	str	r3, [sp, #104]	; 0x68
 800429c:	4654      	mov	r4, sl
 800429e:	2205      	movs	r2, #5
 80042a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a4:	4851      	ldr	r0, [pc, #324]	; (80043ec <_svfiprintf_r+0x1ec>)
 80042a6:	f7fb ff9b 	bl	80001e0 <memchr>
 80042aa:	9a04      	ldr	r2, [sp, #16]
 80042ac:	b9d8      	cbnz	r0, 80042e6 <_svfiprintf_r+0xe6>
 80042ae:	06d0      	lsls	r0, r2, #27
 80042b0:	bf44      	itt	mi
 80042b2:	2320      	movmi	r3, #32
 80042b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b8:	0711      	lsls	r1, r2, #28
 80042ba:	bf44      	itt	mi
 80042bc:	232b      	movmi	r3, #43	; 0x2b
 80042be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c2:	f89a 3000 	ldrb.w	r3, [sl]
 80042c6:	2b2a      	cmp	r3, #42	; 0x2a
 80042c8:	d015      	beq.n	80042f6 <_svfiprintf_r+0xf6>
 80042ca:	9a07      	ldr	r2, [sp, #28]
 80042cc:	4654      	mov	r4, sl
 80042ce:	2000      	movs	r0, #0
 80042d0:	f04f 0c0a 	mov.w	ip, #10
 80042d4:	4621      	mov	r1, r4
 80042d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042da:	3b30      	subs	r3, #48	; 0x30
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d94e      	bls.n	800437e <_svfiprintf_r+0x17e>
 80042e0:	b1b0      	cbz	r0, 8004310 <_svfiprintf_r+0x110>
 80042e2:	9207      	str	r2, [sp, #28]
 80042e4:	e014      	b.n	8004310 <_svfiprintf_r+0x110>
 80042e6:	eba0 0308 	sub.w	r3, r0, r8
 80042ea:	fa09 f303 	lsl.w	r3, r9, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	46a2      	mov	sl, r4
 80042f4:	e7d2      	b.n	800429c <_svfiprintf_r+0x9c>
 80042f6:	9b03      	ldr	r3, [sp, #12]
 80042f8:	1d19      	adds	r1, r3, #4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	9103      	str	r1, [sp, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfbb      	ittet	lt
 8004302:	425b      	neglt	r3, r3
 8004304:	f042 0202 	orrlt.w	r2, r2, #2
 8004308:	9307      	strge	r3, [sp, #28]
 800430a:	9307      	strlt	r3, [sp, #28]
 800430c:	bfb8      	it	lt
 800430e:	9204      	strlt	r2, [sp, #16]
 8004310:	7823      	ldrb	r3, [r4, #0]
 8004312:	2b2e      	cmp	r3, #46	; 0x2e
 8004314:	d10c      	bne.n	8004330 <_svfiprintf_r+0x130>
 8004316:	7863      	ldrb	r3, [r4, #1]
 8004318:	2b2a      	cmp	r3, #42	; 0x2a
 800431a:	d135      	bne.n	8004388 <_svfiprintf_r+0x188>
 800431c:	9b03      	ldr	r3, [sp, #12]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	9203      	str	r2, [sp, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	bfb8      	it	lt
 8004328:	f04f 33ff 	movlt.w	r3, #4294967295
 800432c:	3402      	adds	r4, #2
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043fc <_svfiprintf_r+0x1fc>
 8004334:	7821      	ldrb	r1, [r4, #0]
 8004336:	2203      	movs	r2, #3
 8004338:	4650      	mov	r0, sl
 800433a:	f7fb ff51 	bl	80001e0 <memchr>
 800433e:	b140      	cbz	r0, 8004352 <_svfiprintf_r+0x152>
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	eba0 000a 	sub.w	r0, r0, sl
 8004346:	fa03 f000 	lsl.w	r0, r3, r0
 800434a:	9b04      	ldr	r3, [sp, #16]
 800434c:	4303      	orrs	r3, r0
 800434e:	3401      	adds	r4, #1
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004356:	4826      	ldr	r0, [pc, #152]	; (80043f0 <_svfiprintf_r+0x1f0>)
 8004358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800435c:	2206      	movs	r2, #6
 800435e:	f7fb ff3f 	bl	80001e0 <memchr>
 8004362:	2800      	cmp	r0, #0
 8004364:	d038      	beq.n	80043d8 <_svfiprintf_r+0x1d8>
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <_svfiprintf_r+0x1f4>)
 8004368:	bb1b      	cbnz	r3, 80043b2 <_svfiprintf_r+0x1b2>
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	3307      	adds	r3, #7
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	3308      	adds	r3, #8
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004378:	4433      	add	r3, r6
 800437a:	9309      	str	r3, [sp, #36]	; 0x24
 800437c:	e767      	b.n	800424e <_svfiprintf_r+0x4e>
 800437e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004382:	460c      	mov	r4, r1
 8004384:	2001      	movs	r0, #1
 8004386:	e7a5      	b.n	80042d4 <_svfiprintf_r+0xd4>
 8004388:	2300      	movs	r3, #0
 800438a:	3401      	adds	r4, #1
 800438c:	9305      	str	r3, [sp, #20]
 800438e:	4619      	mov	r1, r3
 8004390:	f04f 0c0a 	mov.w	ip, #10
 8004394:	4620      	mov	r0, r4
 8004396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439a:	3a30      	subs	r2, #48	; 0x30
 800439c:	2a09      	cmp	r2, #9
 800439e:	d903      	bls.n	80043a8 <_svfiprintf_r+0x1a8>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0c5      	beq.n	8004330 <_svfiprintf_r+0x130>
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	e7c3      	b.n	8004330 <_svfiprintf_r+0x130>
 80043a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ac:	4604      	mov	r4, r0
 80043ae:	2301      	movs	r3, #1
 80043b0:	e7f0      	b.n	8004394 <_svfiprintf_r+0x194>
 80043b2:	ab03      	add	r3, sp, #12
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	462a      	mov	r2, r5
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <_svfiprintf_r+0x1f8>)
 80043ba:	a904      	add	r1, sp, #16
 80043bc:	4638      	mov	r0, r7
 80043be:	f3af 8000 	nop.w
 80043c2:	1c42      	adds	r2, r0, #1
 80043c4:	4606      	mov	r6, r0
 80043c6:	d1d6      	bne.n	8004376 <_svfiprintf_r+0x176>
 80043c8:	89ab      	ldrh	r3, [r5, #12]
 80043ca:	065b      	lsls	r3, r3, #25
 80043cc:	f53f af2c 	bmi.w	8004228 <_svfiprintf_r+0x28>
 80043d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043d2:	b01d      	add	sp, #116	; 0x74
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d8:	ab03      	add	r3, sp, #12
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	462a      	mov	r2, r5
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <_svfiprintf_r+0x1f8>)
 80043e0:	a904      	add	r1, sp, #16
 80043e2:	4638      	mov	r0, r7
 80043e4:	f000 f87a 	bl	80044dc <_printf_i>
 80043e8:	e7eb      	b.n	80043c2 <_svfiprintf_r+0x1c2>
 80043ea:	bf00      	nop
 80043ec:	080049cc 	.word	0x080049cc
 80043f0:	080049d6 	.word	0x080049d6
 80043f4:	00000000 	.word	0x00000000
 80043f8:	08004149 	.word	0x08004149
 80043fc:	080049d2 	.word	0x080049d2

08004400 <_printf_common>:
 8004400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	4616      	mov	r6, r2
 8004406:	4699      	mov	r9, r3
 8004408:	688a      	ldr	r2, [r1, #8]
 800440a:	690b      	ldr	r3, [r1, #16]
 800440c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004410:	4293      	cmp	r3, r2
 8004412:	bfb8      	it	lt
 8004414:	4613      	movlt	r3, r2
 8004416:	6033      	str	r3, [r6, #0]
 8004418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800441c:	4607      	mov	r7, r0
 800441e:	460c      	mov	r4, r1
 8004420:	b10a      	cbz	r2, 8004426 <_printf_common+0x26>
 8004422:	3301      	adds	r3, #1
 8004424:	6033      	str	r3, [r6, #0]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	0699      	lsls	r1, r3, #26
 800442a:	bf42      	ittt	mi
 800442c:	6833      	ldrmi	r3, [r6, #0]
 800442e:	3302      	addmi	r3, #2
 8004430:	6033      	strmi	r3, [r6, #0]
 8004432:	6825      	ldr	r5, [r4, #0]
 8004434:	f015 0506 	ands.w	r5, r5, #6
 8004438:	d106      	bne.n	8004448 <_printf_common+0x48>
 800443a:	f104 0a19 	add.w	sl, r4, #25
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	6832      	ldr	r2, [r6, #0]
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	42ab      	cmp	r3, r5
 8004446:	dc26      	bgt.n	8004496 <_printf_common+0x96>
 8004448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800444c:	1e13      	subs	r3, r2, #0
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	bf18      	it	ne
 8004452:	2301      	movne	r3, #1
 8004454:	0692      	lsls	r2, r2, #26
 8004456:	d42b      	bmi.n	80044b0 <_printf_common+0xb0>
 8004458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800445c:	4649      	mov	r1, r9
 800445e:	4638      	mov	r0, r7
 8004460:	47c0      	blx	r8
 8004462:	3001      	adds	r0, #1
 8004464:	d01e      	beq.n	80044a4 <_printf_common+0xa4>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	68e5      	ldr	r5, [r4, #12]
 800446a:	6832      	ldr	r2, [r6, #0]
 800446c:	f003 0306 	and.w	r3, r3, #6
 8004470:	2b04      	cmp	r3, #4
 8004472:	bf08      	it	eq
 8004474:	1aad      	subeq	r5, r5, r2
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	bf0c      	ite	eq
 800447c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004480:	2500      	movne	r5, #0
 8004482:	4293      	cmp	r3, r2
 8004484:	bfc4      	itt	gt
 8004486:	1a9b      	subgt	r3, r3, r2
 8004488:	18ed      	addgt	r5, r5, r3
 800448a:	2600      	movs	r6, #0
 800448c:	341a      	adds	r4, #26
 800448e:	42b5      	cmp	r5, r6
 8004490:	d11a      	bne.n	80044c8 <_printf_common+0xc8>
 8004492:	2000      	movs	r0, #0
 8004494:	e008      	b.n	80044a8 <_printf_common+0xa8>
 8004496:	2301      	movs	r3, #1
 8004498:	4652      	mov	r2, sl
 800449a:	4649      	mov	r1, r9
 800449c:	4638      	mov	r0, r7
 800449e:	47c0      	blx	r8
 80044a0:	3001      	adds	r0, #1
 80044a2:	d103      	bne.n	80044ac <_printf_common+0xac>
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ac:	3501      	adds	r5, #1
 80044ae:	e7c6      	b.n	800443e <_printf_common+0x3e>
 80044b0:	18e1      	adds	r1, r4, r3
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	2030      	movs	r0, #48	; 0x30
 80044b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ba:	4422      	add	r2, r4
 80044bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c4:	3302      	adds	r3, #2
 80044c6:	e7c7      	b.n	8004458 <_printf_common+0x58>
 80044c8:	2301      	movs	r3, #1
 80044ca:	4622      	mov	r2, r4
 80044cc:	4649      	mov	r1, r9
 80044ce:	4638      	mov	r0, r7
 80044d0:	47c0      	blx	r8
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0e6      	beq.n	80044a4 <_printf_common+0xa4>
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7d9      	b.n	800448e <_printf_common+0x8e>
	...

080044dc <_printf_i>:
 80044dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	460c      	mov	r4, r1
 80044e2:	4691      	mov	r9, r2
 80044e4:	7e27      	ldrb	r7, [r4, #24]
 80044e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044e8:	2f78      	cmp	r7, #120	; 0x78
 80044ea:	4680      	mov	r8, r0
 80044ec:	469a      	mov	sl, r3
 80044ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f2:	d807      	bhi.n	8004504 <_printf_i+0x28>
 80044f4:	2f62      	cmp	r7, #98	; 0x62
 80044f6:	d80a      	bhi.n	800450e <_printf_i+0x32>
 80044f8:	2f00      	cmp	r7, #0
 80044fa:	f000 80d8 	beq.w	80046ae <_printf_i+0x1d2>
 80044fe:	2f58      	cmp	r7, #88	; 0x58
 8004500:	f000 80a3 	beq.w	800464a <_printf_i+0x16e>
 8004504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800450c:	e03a      	b.n	8004584 <_printf_i+0xa8>
 800450e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004512:	2b15      	cmp	r3, #21
 8004514:	d8f6      	bhi.n	8004504 <_printf_i+0x28>
 8004516:	a001      	add	r0, pc, #4	; (adr r0, 800451c <_printf_i+0x40>)
 8004518:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800451c:	08004575 	.word	0x08004575
 8004520:	08004589 	.word	0x08004589
 8004524:	08004505 	.word	0x08004505
 8004528:	08004505 	.word	0x08004505
 800452c:	08004505 	.word	0x08004505
 8004530:	08004505 	.word	0x08004505
 8004534:	08004589 	.word	0x08004589
 8004538:	08004505 	.word	0x08004505
 800453c:	08004505 	.word	0x08004505
 8004540:	08004505 	.word	0x08004505
 8004544:	08004505 	.word	0x08004505
 8004548:	08004695 	.word	0x08004695
 800454c:	080045b9 	.word	0x080045b9
 8004550:	08004677 	.word	0x08004677
 8004554:	08004505 	.word	0x08004505
 8004558:	08004505 	.word	0x08004505
 800455c:	080046b7 	.word	0x080046b7
 8004560:	08004505 	.word	0x08004505
 8004564:	080045b9 	.word	0x080045b9
 8004568:	08004505 	.word	0x08004505
 800456c:	08004505 	.word	0x08004505
 8004570:	0800467f 	.word	0x0800467f
 8004574:	680b      	ldr	r3, [r1, #0]
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	600a      	str	r2, [r1, #0]
 800457c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004584:	2301      	movs	r3, #1
 8004586:	e0a3      	b.n	80046d0 <_printf_i+0x1f4>
 8004588:	6825      	ldr	r5, [r4, #0]
 800458a:	6808      	ldr	r0, [r1, #0]
 800458c:	062e      	lsls	r6, r5, #24
 800458e:	f100 0304 	add.w	r3, r0, #4
 8004592:	d50a      	bpl.n	80045aa <_printf_i+0xce>
 8004594:	6805      	ldr	r5, [r0, #0]
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	2d00      	cmp	r5, #0
 800459a:	da03      	bge.n	80045a4 <_printf_i+0xc8>
 800459c:	232d      	movs	r3, #45	; 0x2d
 800459e:	426d      	negs	r5, r5
 80045a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a4:	485e      	ldr	r0, [pc, #376]	; (8004720 <_printf_i+0x244>)
 80045a6:	230a      	movs	r3, #10
 80045a8:	e019      	b.n	80045de <_printf_i+0x102>
 80045aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045ae:	6805      	ldr	r5, [r0, #0]
 80045b0:	600b      	str	r3, [r1, #0]
 80045b2:	bf18      	it	ne
 80045b4:	b22d      	sxthne	r5, r5
 80045b6:	e7ef      	b.n	8004598 <_printf_i+0xbc>
 80045b8:	680b      	ldr	r3, [r1, #0]
 80045ba:	6825      	ldr	r5, [r4, #0]
 80045bc:	1d18      	adds	r0, r3, #4
 80045be:	6008      	str	r0, [r1, #0]
 80045c0:	0628      	lsls	r0, r5, #24
 80045c2:	d501      	bpl.n	80045c8 <_printf_i+0xec>
 80045c4:	681d      	ldr	r5, [r3, #0]
 80045c6:	e002      	b.n	80045ce <_printf_i+0xf2>
 80045c8:	0669      	lsls	r1, r5, #25
 80045ca:	d5fb      	bpl.n	80045c4 <_printf_i+0xe8>
 80045cc:	881d      	ldrh	r5, [r3, #0]
 80045ce:	4854      	ldr	r0, [pc, #336]	; (8004720 <_printf_i+0x244>)
 80045d0:	2f6f      	cmp	r7, #111	; 0x6f
 80045d2:	bf0c      	ite	eq
 80045d4:	2308      	moveq	r3, #8
 80045d6:	230a      	movne	r3, #10
 80045d8:	2100      	movs	r1, #0
 80045da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045de:	6866      	ldr	r6, [r4, #4]
 80045e0:	60a6      	str	r6, [r4, #8]
 80045e2:	2e00      	cmp	r6, #0
 80045e4:	bfa2      	ittt	ge
 80045e6:	6821      	ldrge	r1, [r4, #0]
 80045e8:	f021 0104 	bicge.w	r1, r1, #4
 80045ec:	6021      	strge	r1, [r4, #0]
 80045ee:	b90d      	cbnz	r5, 80045f4 <_printf_i+0x118>
 80045f0:	2e00      	cmp	r6, #0
 80045f2:	d04d      	beq.n	8004690 <_printf_i+0x1b4>
 80045f4:	4616      	mov	r6, r2
 80045f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80045fa:	fb03 5711 	mls	r7, r3, r1, r5
 80045fe:	5dc7      	ldrb	r7, [r0, r7]
 8004600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004604:	462f      	mov	r7, r5
 8004606:	42bb      	cmp	r3, r7
 8004608:	460d      	mov	r5, r1
 800460a:	d9f4      	bls.n	80045f6 <_printf_i+0x11a>
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10b      	bne.n	8004628 <_printf_i+0x14c>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	07df      	lsls	r7, r3, #31
 8004614:	d508      	bpl.n	8004628 <_printf_i+0x14c>
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	6861      	ldr	r1, [r4, #4]
 800461a:	4299      	cmp	r1, r3
 800461c:	bfde      	ittt	le
 800461e:	2330      	movle	r3, #48	; 0x30
 8004620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004628:	1b92      	subs	r2, r2, r6
 800462a:	6122      	str	r2, [r4, #16]
 800462c:	f8cd a000 	str.w	sl, [sp]
 8004630:	464b      	mov	r3, r9
 8004632:	aa03      	add	r2, sp, #12
 8004634:	4621      	mov	r1, r4
 8004636:	4640      	mov	r0, r8
 8004638:	f7ff fee2 	bl	8004400 <_printf_common>
 800463c:	3001      	adds	r0, #1
 800463e:	d14c      	bne.n	80046da <_printf_i+0x1fe>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	b004      	add	sp, #16
 8004646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464a:	4835      	ldr	r0, [pc, #212]	; (8004720 <_printf_i+0x244>)
 800464c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	680e      	ldr	r6, [r1, #0]
 8004654:	061f      	lsls	r7, r3, #24
 8004656:	f856 5b04 	ldr.w	r5, [r6], #4
 800465a:	600e      	str	r6, [r1, #0]
 800465c:	d514      	bpl.n	8004688 <_printf_i+0x1ac>
 800465e:	07d9      	lsls	r1, r3, #31
 8004660:	bf44      	itt	mi
 8004662:	f043 0320 	orrmi.w	r3, r3, #32
 8004666:	6023      	strmi	r3, [r4, #0]
 8004668:	b91d      	cbnz	r5, 8004672 <_printf_i+0x196>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f023 0320 	bic.w	r3, r3, #32
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	2310      	movs	r3, #16
 8004674:	e7b0      	b.n	80045d8 <_printf_i+0xfc>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	f043 0320 	orr.w	r3, r3, #32
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	2378      	movs	r3, #120	; 0x78
 8004680:	4828      	ldr	r0, [pc, #160]	; (8004724 <_printf_i+0x248>)
 8004682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004686:	e7e3      	b.n	8004650 <_printf_i+0x174>
 8004688:	065e      	lsls	r6, r3, #25
 800468a:	bf48      	it	mi
 800468c:	b2ad      	uxthmi	r5, r5
 800468e:	e7e6      	b.n	800465e <_printf_i+0x182>
 8004690:	4616      	mov	r6, r2
 8004692:	e7bb      	b.n	800460c <_printf_i+0x130>
 8004694:	680b      	ldr	r3, [r1, #0]
 8004696:	6826      	ldr	r6, [r4, #0]
 8004698:	6960      	ldr	r0, [r4, #20]
 800469a:	1d1d      	adds	r5, r3, #4
 800469c:	600d      	str	r5, [r1, #0]
 800469e:	0635      	lsls	r5, r6, #24
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	d501      	bpl.n	80046a8 <_printf_i+0x1cc>
 80046a4:	6018      	str	r0, [r3, #0]
 80046a6:	e002      	b.n	80046ae <_printf_i+0x1d2>
 80046a8:	0671      	lsls	r1, r6, #25
 80046aa:	d5fb      	bpl.n	80046a4 <_printf_i+0x1c8>
 80046ac:	8018      	strh	r0, [r3, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	4616      	mov	r6, r2
 80046b4:	e7ba      	b.n	800462c <_printf_i+0x150>
 80046b6:	680b      	ldr	r3, [r1, #0]
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	600a      	str	r2, [r1, #0]
 80046bc:	681e      	ldr	r6, [r3, #0]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	2100      	movs	r1, #0
 80046c2:	4630      	mov	r0, r6
 80046c4:	f7fb fd8c 	bl	80001e0 <memchr>
 80046c8:	b108      	cbz	r0, 80046ce <_printf_i+0x1f2>
 80046ca:	1b80      	subs	r0, r0, r6
 80046cc:	6060      	str	r0, [r4, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	2300      	movs	r3, #0
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d8:	e7a8      	b.n	800462c <_printf_i+0x150>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	4632      	mov	r2, r6
 80046de:	4649      	mov	r1, r9
 80046e0:	4640      	mov	r0, r8
 80046e2:	47d0      	blx	sl
 80046e4:	3001      	adds	r0, #1
 80046e6:	d0ab      	beq.n	8004640 <_printf_i+0x164>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	079b      	lsls	r3, r3, #30
 80046ec:	d413      	bmi.n	8004716 <_printf_i+0x23a>
 80046ee:	68e0      	ldr	r0, [r4, #12]
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	4298      	cmp	r0, r3
 80046f4:	bfb8      	it	lt
 80046f6:	4618      	movlt	r0, r3
 80046f8:	e7a4      	b.n	8004644 <_printf_i+0x168>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4632      	mov	r2, r6
 80046fe:	4649      	mov	r1, r9
 8004700:	4640      	mov	r0, r8
 8004702:	47d0      	blx	sl
 8004704:	3001      	adds	r0, #1
 8004706:	d09b      	beq.n	8004640 <_printf_i+0x164>
 8004708:	3501      	adds	r5, #1
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	9903      	ldr	r1, [sp, #12]
 800470e:	1a5b      	subs	r3, r3, r1
 8004710:	42ab      	cmp	r3, r5
 8004712:	dcf2      	bgt.n	80046fa <_printf_i+0x21e>
 8004714:	e7eb      	b.n	80046ee <_printf_i+0x212>
 8004716:	2500      	movs	r5, #0
 8004718:	f104 0619 	add.w	r6, r4, #25
 800471c:	e7f5      	b.n	800470a <_printf_i+0x22e>
 800471e:	bf00      	nop
 8004720:	080049dd 	.word	0x080049dd
 8004724:	080049ee 	.word	0x080049ee

08004728 <memcpy>:
 8004728:	440a      	add	r2, r1
 800472a:	4291      	cmp	r1, r2
 800472c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004730:	d100      	bne.n	8004734 <memcpy+0xc>
 8004732:	4770      	bx	lr
 8004734:	b510      	push	{r4, lr}
 8004736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800473a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473e:	4291      	cmp	r1, r2
 8004740:	d1f9      	bne.n	8004736 <memcpy+0xe>
 8004742:	bd10      	pop	{r4, pc}

08004744 <memmove>:
 8004744:	4288      	cmp	r0, r1
 8004746:	b510      	push	{r4, lr}
 8004748:	eb01 0402 	add.w	r4, r1, r2
 800474c:	d902      	bls.n	8004754 <memmove+0x10>
 800474e:	4284      	cmp	r4, r0
 8004750:	4623      	mov	r3, r4
 8004752:	d807      	bhi.n	8004764 <memmove+0x20>
 8004754:	1e43      	subs	r3, r0, #1
 8004756:	42a1      	cmp	r1, r4
 8004758:	d008      	beq.n	800476c <memmove+0x28>
 800475a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800475e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004762:	e7f8      	b.n	8004756 <memmove+0x12>
 8004764:	4402      	add	r2, r0
 8004766:	4601      	mov	r1, r0
 8004768:	428a      	cmp	r2, r1
 800476a:	d100      	bne.n	800476e <memmove+0x2a>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004776:	e7f7      	b.n	8004768 <memmove+0x24>

08004778 <_free_r>:
 8004778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800477a:	2900      	cmp	r1, #0
 800477c:	d048      	beq.n	8004810 <_free_r+0x98>
 800477e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004782:	9001      	str	r0, [sp, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f1a1 0404 	sub.w	r4, r1, #4
 800478a:	bfb8      	it	lt
 800478c:	18e4      	addlt	r4, r4, r3
 800478e:	f000 f8d3 	bl	8004938 <__malloc_lock>
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <_free_r+0x9c>)
 8004794:	9801      	ldr	r0, [sp, #4]
 8004796:	6813      	ldr	r3, [r2, #0]
 8004798:	4615      	mov	r5, r2
 800479a:	b933      	cbnz	r3, 80047aa <_free_r+0x32>
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	6014      	str	r4, [r2, #0]
 80047a0:	b003      	add	sp, #12
 80047a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047a6:	f000 b8cd 	b.w	8004944 <__malloc_unlock>
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	d90b      	bls.n	80047c6 <_free_r+0x4e>
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	1862      	adds	r2, r4, r1
 80047b2:	4293      	cmp	r3, r2
 80047b4:	bf04      	itt	eq
 80047b6:	681a      	ldreq	r2, [r3, #0]
 80047b8:	685b      	ldreq	r3, [r3, #4]
 80047ba:	6063      	str	r3, [r4, #4]
 80047bc:	bf04      	itt	eq
 80047be:	1852      	addeq	r2, r2, r1
 80047c0:	6022      	streq	r2, [r4, #0]
 80047c2:	602c      	str	r4, [r5, #0]
 80047c4:	e7ec      	b.n	80047a0 <_free_r+0x28>
 80047c6:	461a      	mov	r2, r3
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b10b      	cbz	r3, 80047d0 <_free_r+0x58>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d9fa      	bls.n	80047c6 <_free_r+0x4e>
 80047d0:	6811      	ldr	r1, [r2, #0]
 80047d2:	1855      	adds	r5, r2, r1
 80047d4:	42a5      	cmp	r5, r4
 80047d6:	d10b      	bne.n	80047f0 <_free_r+0x78>
 80047d8:	6824      	ldr	r4, [r4, #0]
 80047da:	4421      	add	r1, r4
 80047dc:	1854      	adds	r4, r2, r1
 80047de:	42a3      	cmp	r3, r4
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	d1dd      	bne.n	80047a0 <_free_r+0x28>
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	6053      	str	r3, [r2, #4]
 80047ea:	4421      	add	r1, r4
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	e7d7      	b.n	80047a0 <_free_r+0x28>
 80047f0:	d902      	bls.n	80047f8 <_free_r+0x80>
 80047f2:	230c      	movs	r3, #12
 80047f4:	6003      	str	r3, [r0, #0]
 80047f6:	e7d3      	b.n	80047a0 <_free_r+0x28>
 80047f8:	6825      	ldr	r5, [r4, #0]
 80047fa:	1961      	adds	r1, r4, r5
 80047fc:	428b      	cmp	r3, r1
 80047fe:	bf04      	itt	eq
 8004800:	6819      	ldreq	r1, [r3, #0]
 8004802:	685b      	ldreq	r3, [r3, #4]
 8004804:	6063      	str	r3, [r4, #4]
 8004806:	bf04      	itt	eq
 8004808:	1949      	addeq	r1, r1, r5
 800480a:	6021      	streq	r1, [r4, #0]
 800480c:	6054      	str	r4, [r2, #4]
 800480e:	e7c7      	b.n	80047a0 <_free_r+0x28>
 8004810:	b003      	add	sp, #12
 8004812:	bd30      	pop	{r4, r5, pc}
 8004814:	20000090 	.word	0x20000090

08004818 <_malloc_r>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	1ccd      	adds	r5, r1, #3
 800481c:	f025 0503 	bic.w	r5, r5, #3
 8004820:	3508      	adds	r5, #8
 8004822:	2d0c      	cmp	r5, #12
 8004824:	bf38      	it	cc
 8004826:	250c      	movcc	r5, #12
 8004828:	2d00      	cmp	r5, #0
 800482a:	4606      	mov	r6, r0
 800482c:	db01      	blt.n	8004832 <_malloc_r+0x1a>
 800482e:	42a9      	cmp	r1, r5
 8004830:	d903      	bls.n	800483a <_malloc_r+0x22>
 8004832:	230c      	movs	r3, #12
 8004834:	6033      	str	r3, [r6, #0]
 8004836:	2000      	movs	r0, #0
 8004838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483a:	f000 f87d 	bl	8004938 <__malloc_lock>
 800483e:	4921      	ldr	r1, [pc, #132]	; (80048c4 <_malloc_r+0xac>)
 8004840:	680a      	ldr	r2, [r1, #0]
 8004842:	4614      	mov	r4, r2
 8004844:	b99c      	cbnz	r4, 800486e <_malloc_r+0x56>
 8004846:	4f20      	ldr	r7, [pc, #128]	; (80048c8 <_malloc_r+0xb0>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b923      	cbnz	r3, 8004856 <_malloc_r+0x3e>
 800484c:	4621      	mov	r1, r4
 800484e:	4630      	mov	r0, r6
 8004850:	f000 f862 	bl	8004918 <_sbrk_r>
 8004854:	6038      	str	r0, [r7, #0]
 8004856:	4629      	mov	r1, r5
 8004858:	4630      	mov	r0, r6
 800485a:	f000 f85d 	bl	8004918 <_sbrk_r>
 800485e:	1c43      	adds	r3, r0, #1
 8004860:	d123      	bne.n	80048aa <_malloc_r+0x92>
 8004862:	230c      	movs	r3, #12
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	4630      	mov	r0, r6
 8004868:	f000 f86c 	bl	8004944 <__malloc_unlock>
 800486c:	e7e3      	b.n	8004836 <_malloc_r+0x1e>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	1b5b      	subs	r3, r3, r5
 8004872:	d417      	bmi.n	80048a4 <_malloc_r+0x8c>
 8004874:	2b0b      	cmp	r3, #11
 8004876:	d903      	bls.n	8004880 <_malloc_r+0x68>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	441c      	add	r4, r3
 800487c:	6025      	str	r5, [r4, #0]
 800487e:	e004      	b.n	800488a <_malloc_r+0x72>
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	42a2      	cmp	r2, r4
 8004884:	bf0c      	ite	eq
 8004886:	600b      	streq	r3, [r1, #0]
 8004888:	6053      	strne	r3, [r2, #4]
 800488a:	4630      	mov	r0, r6
 800488c:	f000 f85a 	bl	8004944 <__malloc_unlock>
 8004890:	f104 000b 	add.w	r0, r4, #11
 8004894:	1d23      	adds	r3, r4, #4
 8004896:	f020 0007 	bic.w	r0, r0, #7
 800489a:	1ac2      	subs	r2, r0, r3
 800489c:	d0cc      	beq.n	8004838 <_malloc_r+0x20>
 800489e:	1a1b      	subs	r3, r3, r0
 80048a0:	50a3      	str	r3, [r4, r2]
 80048a2:	e7c9      	b.n	8004838 <_malloc_r+0x20>
 80048a4:	4622      	mov	r2, r4
 80048a6:	6864      	ldr	r4, [r4, #4]
 80048a8:	e7cc      	b.n	8004844 <_malloc_r+0x2c>
 80048aa:	1cc4      	adds	r4, r0, #3
 80048ac:	f024 0403 	bic.w	r4, r4, #3
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d0e3      	beq.n	800487c <_malloc_r+0x64>
 80048b4:	1a21      	subs	r1, r4, r0
 80048b6:	4630      	mov	r0, r6
 80048b8:	f000 f82e 	bl	8004918 <_sbrk_r>
 80048bc:	3001      	adds	r0, #1
 80048be:	d1dd      	bne.n	800487c <_malloc_r+0x64>
 80048c0:	e7cf      	b.n	8004862 <_malloc_r+0x4a>
 80048c2:	bf00      	nop
 80048c4:	20000090 	.word	0x20000090
 80048c8:	20000094 	.word	0x20000094

080048cc <_realloc_r>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	4607      	mov	r7, r0
 80048d0:	4614      	mov	r4, r2
 80048d2:	460e      	mov	r6, r1
 80048d4:	b921      	cbnz	r1, 80048e0 <_realloc_r+0x14>
 80048d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048da:	4611      	mov	r1, r2
 80048dc:	f7ff bf9c 	b.w	8004818 <_malloc_r>
 80048e0:	b922      	cbnz	r2, 80048ec <_realloc_r+0x20>
 80048e2:	f7ff ff49 	bl	8004778 <_free_r>
 80048e6:	4625      	mov	r5, r4
 80048e8:	4628      	mov	r0, r5
 80048ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ec:	f000 f830 	bl	8004950 <_malloc_usable_size_r>
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d20f      	bcs.n	8004914 <_realloc_r+0x48>
 80048f4:	4621      	mov	r1, r4
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff ff8e 	bl	8004818 <_malloc_r>
 80048fc:	4605      	mov	r5, r0
 80048fe:	2800      	cmp	r0, #0
 8004900:	d0f2      	beq.n	80048e8 <_realloc_r+0x1c>
 8004902:	4631      	mov	r1, r6
 8004904:	4622      	mov	r2, r4
 8004906:	f7ff ff0f 	bl	8004728 <memcpy>
 800490a:	4631      	mov	r1, r6
 800490c:	4638      	mov	r0, r7
 800490e:	f7ff ff33 	bl	8004778 <_free_r>
 8004912:	e7e9      	b.n	80048e8 <_realloc_r+0x1c>
 8004914:	4635      	mov	r5, r6
 8004916:	e7e7      	b.n	80048e8 <_realloc_r+0x1c>

08004918 <_sbrk_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4d06      	ldr	r5, [pc, #24]	; (8004934 <_sbrk_r+0x1c>)
 800491c:	2300      	movs	r3, #0
 800491e:	4604      	mov	r4, r0
 8004920:	4608      	mov	r0, r1
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	f7fc f8f8 	bl	8000b18 <_sbrk>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_sbrk_r+0x1a>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_sbrk_r+0x1a>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000184 	.word	0x20000184

08004938 <__malloc_lock>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__malloc_lock+0x8>)
 800493a:	f000 b811 	b.w	8004960 <__retarget_lock_acquire_recursive>
 800493e:	bf00      	nop
 8004940:	2000018c 	.word	0x2000018c

08004944 <__malloc_unlock>:
 8004944:	4801      	ldr	r0, [pc, #4]	; (800494c <__malloc_unlock+0x8>)
 8004946:	f000 b80c 	b.w	8004962 <__retarget_lock_release_recursive>
 800494a:	bf00      	nop
 800494c:	2000018c 	.word	0x2000018c

08004950 <_malloc_usable_size_r>:
 8004950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004954:	1f18      	subs	r0, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	bfbc      	itt	lt
 800495a:	580b      	ldrlt	r3, [r1, r0]
 800495c:	18c0      	addlt	r0, r0, r3
 800495e:	4770      	bx	lr

08004960 <__retarget_lock_acquire_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_release_recursive>:
 8004962:	4770      	bx	lr

08004964 <_init>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr

08004970 <_fini>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr
