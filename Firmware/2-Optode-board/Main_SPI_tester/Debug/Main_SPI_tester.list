
Main_SPI_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b30  08001b30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b30  08001b30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b30  08001b30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08001b44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08001b44  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ba6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001761  00000000  00000000  00027bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00029340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634c  00000000  00000000  0002a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b19  00000000  00000000  000406b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fdf9  00000000  00000000  000491cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002158  00000000  00000000  000c901c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001af4 	.word	0x08001af4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001af4 	.word	0x08001af4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b09c      	sub	sp, #112	; 0x70
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f937 	bl	80003c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f865 	bl	8000224 <SystemClock_Config>

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */

  uint8_t n = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  //bool x = false;
  //uint8_t TX_Data[] = "1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n";
  uint8_t TX_data[10];
  TX_data[0] = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  TX_data[1] = 1;
 8000166:	2301      	movs	r3, #1
 8000168:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  TX_data[2] = 2;
 800016c:	2302      	movs	r3, #2
 800016e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  TX_data[3] = 3;
 8000172:	2303      	movs	r3, #3
 8000174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  TX_data[4] = 4;
 8000178:	2304      	movs	r3, #4
 800017a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  TX_data[5] = 5;
 800017e:	2305      	movs	r3, #5
 8000180:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  TX_data[6] = 6;
 8000184:	2306      	movs	r3, #6
 8000186:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  TX_data[7] = 7;
 800018a:	2307      	movs	r3, #7
 800018c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  TX_data[8] = 8;
 8000190:	2308      	movs	r3, #8
 8000192:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  TX_data[9] = 9;
 8000196:	2309      	movs	r3, #9
 8000198:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  uint8_t RX_data[100] = {};
 800019c:	2300      	movs	r3, #0
 800019e:	603b      	str	r3, [r7, #0]
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2260      	movs	r2, #96	; 0x60
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fc9c 	bl	8001ae4 <memset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	HAL_GPIO_WritePin(GPIOA,SPI1_NSS_Pin,0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <main+0xc8>)
 80001b2:	f000 fae7 	bl	8000784 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &RX_data[n], sizeof(RX_data[n]), 5000); //reading in normal mode
 80001b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80001ba:	463a      	mov	r2, r7
 80001bc:	18d1      	adds	r1, r2, r3
 80001be:	f241 3388 	movw	r3, #5000	; 0x1388
 80001c2:	2201      	movs	r2, #1
 80001c4:	4814      	ldr	r0, [pc, #80]	; (8000218 <main+0xcc>)
 80001c6:	f000 fedd 	bl	8000f84 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA,SPI1_NSS_Pin,1);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2110      	movs	r1, #16
 80001ce:	4811      	ldr	r0, [pc, #68]	; (8000214 <main+0xc8>)
 80001d0:	f000 fad8 	bl	8000784 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,&RX_data[n],sizeof(RX_data[n]),10);// Sending in normal mode to uart
 80001d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80001d8:	463a      	mov	r2, r7
 80001da:	18d1      	adds	r1, r2, r3
 80001dc:	230a      	movs	r3, #10
 80001de:	2201      	movs	r2, #1
 80001e0:	480e      	ldr	r0, [pc, #56]	; (800021c <main+0xd0>)
 80001e2:	f001 fb7f 	bl	80018e4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
 80001e6:	230a      	movs	r3, #10
 80001e8:	2202      	movs	r2, #2
 80001ea:	490d      	ldr	r1, [pc, #52]	; (8000220 <main+0xd4>)
 80001ec:	480b      	ldr	r0, [pc, #44]	; (800021c <main+0xd0>)
 80001ee:	f001 fb79 	bl	80018e4 <HAL_UART_Transmit>
	n=n+1;
 80001f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80001f6:	3301      	adds	r3, #1
 80001f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(n==100){
 80001fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000200:	2b64      	cmp	r3, #100	; 0x64
 8000202:	d102      	bne.n	800020a <main+0xbe>
		n=0;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}
	HAL_Delay(100);
 800020a:	2064      	movs	r0, #100	; 0x64
 800020c:	f000 f93c 	bl	8000488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,SPI1_NSS_Pin,0);
 8000210:	e7cc      	b.n	80001ac <main+0x60>
 8000212:	bf00      	nop
 8000214:	40010800 	.word	0x40010800
 8000218:	2000006c 	.word	0x2000006c
 800021c:	20000028 	.word	0x20000028
 8000220:	08001b0c 	.word	0x08001b0c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fc56 	bl	8001ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 faaa 	bl	80007b4 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f818 	bl	800029a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fd16 	bl	8000cb4 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f804 	bl	800029a <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800029e:	b672      	cpsid	i
}
 80002a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <Error_Handler+0x8>

080002a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <HAL_MspInit+0x5c>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a14      	ldr	r2, [pc, #80]	; (8000300 <HAL_MspInit+0x5c>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6193      	str	r3, [r2, #24]
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_MspInit+0x5c>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <HAL_MspInit+0x5c>)
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <HAL_MspInit+0x5c>)
 80002c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002cc:	61d3      	str	r3, [r2, #28]
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <HAL_MspInit+0x5c>)
 80002d0:	69db      	ldr	r3, [r3, #28]
 80002d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <HAL_MspInit+0x60>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <HAL_MspInit+0x60>)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000
 8000304:	40010000 	.word	0x40010000

08000308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800030c:	e7fe      	b.n	800030c <NMI_Handler+0x4>

0800030e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <HardFault_Handler+0x4>

08000314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <MemManage_Handler+0x4>

0800031a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <BusFault_Handler+0x4>

08000320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <UsageFault_Handler+0x4>

08000326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr

08000332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034e:	f000 f87f 	bl	8000450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800035c:	4802      	ldr	r0, [pc, #8]	; (8000368 <SPI1_IRQHandler+0x10>)
 800035e:	f001 f8c5 	bl	80014ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000006c 	.word	0x2000006c

0800036c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800039e:	f7ff ffe5 	bl	800036c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a2:	f001 fb7b 	bl	8001a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff fed1 	bl	800014c <main>
  bx lr
 80003aa:	4770      	bx	lr
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003b4:	08001b38 	.word	0x08001b38
  ldr r2, =_sbss
 80003b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003bc:	200000c8 	.word	0x200000c8

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HAL_Init+0x28>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a07      	ldr	r2, [pc, #28]	; (80003ec <HAL_Init+0x28>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003d4:	2003      	movs	r0, #3
 80003d6:	f000 f92b 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003da:	200f      	movs	r0, #15
 80003dc:	f000 f808 	bl	80003f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003e0:	f7ff ff60 	bl	80002a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40022000 	.word	0x40022000

080003f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_InitTick+0x54>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_InitTick+0x58>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000406:	fbb3 f3f1 	udiv	r3, r3, r1
 800040a:	fbb2 f3f3 	udiv	r3, r2, r3
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f935 	bl	800067e <HAL_SYSTICK_Config>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800041a:	2301      	movs	r3, #1
 800041c:	e00e      	b.n	800043c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b0f      	cmp	r3, #15
 8000422:	d80a      	bhi.n	800043a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000424:	2200      	movs	r2, #0
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	f04f 30ff 	mov.w	r0, #4294967295
 800042c:	f000 f90b 	bl	8000646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000430:	4a06      	ldr	r2, [pc, #24]	; (800044c <HAL_InitTick+0x5c>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000436:	2300      	movs	r3, #0
 8000438:	e000      	b.n	800043c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000000 	.word	0x20000000
 8000448:	20000008 	.word	0x20000008
 800044c:	20000004 	.word	0x20000004

08000450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <HAL_IncTick+0x1c>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <HAL_IncTick+0x20>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4413      	add	r3, r2
 8000460:	4a03      	ldr	r2, [pc, #12]	; (8000470 <HAL_IncTick+0x20>)
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	20000008 	.word	0x20000008
 8000470:	200000c4 	.word	0x200000c4

08000474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  return uwTick;
 8000478:	4b02      	ldr	r3, [pc, #8]	; (8000484 <HAL_GetTick+0x10>)
 800047a:	681b      	ldr	r3, [r3, #0]
}
 800047c:	4618      	mov	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	200000c4 	.word	0x200000c4

08000488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000490:	f7ff fff0 	bl	8000474 <HAL_GetTick>
 8000494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004a0:	d005      	beq.n	80004ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_Delay+0x44>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	4413      	add	r3, r2
 80004ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004ae:	bf00      	nop
 80004b0:	f7ff ffe0 	bl	8000474 <HAL_GetTick>
 80004b4:	4602      	mov	r2, r0
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d8f7      	bhi.n	80004b0 <HAL_Delay+0x28>
  {
  }
}
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000008 	.word	0x20000008

080004d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <__NVIC_SetPriorityGrouping+0x44>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <__NVIC_SetPriorityGrouping+0x44>)
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	60d3      	str	r3, [r2, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <__NVIC_GetPriorityGrouping+0x18>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	f003 0307 	and.w	r3, r3, #7
}
 8000526:	4618      	mov	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	db0a      	blt.n	800055e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b2da      	uxtb	r2, r3
 800054c:	490c      	ldr	r1, [pc, #48]	; (8000580 <__NVIC_SetPriority+0x4c>)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	0112      	lsls	r2, r2, #4
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	440b      	add	r3, r1
 8000558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800055c:	e00a      	b.n	8000574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4908      	ldr	r1, [pc, #32]	; (8000584 <__NVIC_SetPriority+0x50>)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f003 030f 	and.w	r3, r3, #15
 800056a:	3b04      	subs	r3, #4
 800056c:	0112      	lsls	r2, r2, #4
 800056e:	b2d2      	uxtb	r2, r2
 8000570:	440b      	add	r3, r1
 8000572:	761a      	strb	r2, [r3, #24]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000e100 	.word	0xe000e100
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000588:	b480      	push	{r7}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	f1c3 0307 	rsb	r3, r3, #7
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	bf28      	it	cs
 80005a6:	2304      	movcs	r3, #4
 80005a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3304      	adds	r3, #4
 80005ae:	2b06      	cmp	r3, #6
 80005b0:	d902      	bls.n	80005b8 <NVIC_EncodePriority+0x30>
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	3b03      	subs	r3, #3
 80005b6:	e000      	b.n	80005ba <NVIC_EncodePriority+0x32>
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 32ff 	mov.w	r2, #4294967295
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	43da      	mvns	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d0:	f04f 31ff 	mov.w	r1, #4294967295
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	43d9      	mvns	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	4313      	orrs	r3, r2
         );
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3724      	adds	r7, #36	; 0x24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005fc:	d301      	bcc.n	8000602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005fe:	2301      	movs	r3, #1
 8000600:	e00f      	b.n	8000622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <SysTick_Config+0x40>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800060a:	210f      	movs	r1, #15
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f7ff ff90 	bl	8000534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <SysTick_Config+0x40>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <SysTick_Config+0x40>)
 800061c:	2207      	movs	r2, #7
 800061e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	e000e010 	.word	0xe000e010

08000630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ff49 	bl	80004d0 <__NVIC_SetPriorityGrouping>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000646:	b580      	push	{r7, lr}
 8000648:	b086      	sub	sp, #24
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000658:	f7ff ff5e 	bl	8000518 <__NVIC_GetPriorityGrouping>
 800065c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	68b9      	ldr	r1, [r7, #8]
 8000662:	6978      	ldr	r0, [r7, #20]
 8000664:	f7ff ff90 	bl	8000588 <NVIC_EncodePriority>
 8000668:	4602      	mov	r2, r0
 800066a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff5f 	bl	8000534 <__NVIC_SetPriority>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffb0 	bl	80005ec <SysTick_Config>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d005      	beq.n	80006ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2204      	movs	r2, #4
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e051      	b.n	800075e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f022 020e 	bic.w	r2, r2, #14
 80006c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f022 0201 	bic.w	r2, r2, #1
 80006d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a22      	ldr	r2, [pc, #136]	; (8000768 <HAL_DMA_Abort_IT+0xd0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d029      	beq.n	8000738 <HAL_DMA_Abort_IT+0xa0>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <HAL_DMA_Abort_IT+0xd4>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d022      	beq.n	8000734 <HAL_DMA_Abort_IT+0x9c>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <HAL_DMA_Abort_IT+0xd8>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d01a      	beq.n	800072e <HAL_DMA_Abort_IT+0x96>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_DMA_Abort_IT+0xdc>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d012      	beq.n	8000728 <HAL_DMA_Abort_IT+0x90>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <HAL_DMA_Abort_IT+0xe0>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d00a      	beq.n	8000722 <HAL_DMA_Abort_IT+0x8a>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <HAL_DMA_Abort_IT+0xe4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d102      	bne.n	800071c <HAL_DMA_Abort_IT+0x84>
 8000716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800071a:	e00e      	b.n	800073a <HAL_DMA_Abort_IT+0xa2>
 800071c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000720:	e00b      	b.n	800073a <HAL_DMA_Abort_IT+0xa2>
 8000722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000726:	e008      	b.n	800073a <HAL_DMA_Abort_IT+0xa2>
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	e005      	b.n	800073a <HAL_DMA_Abort_IT+0xa2>
 800072e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000732:	e002      	b.n	800073a <HAL_DMA_Abort_IT+0xa2>
 8000734:	2310      	movs	r3, #16
 8000736:	e000      	b.n	800073a <HAL_DMA_Abort_IT+0xa2>
 8000738:	2301      	movs	r3, #1
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <HAL_DMA_Abort_IT+0xe8>)
 800073c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000752:	2b00      	cmp	r3, #0
 8000754:	d003      	beq.n	800075e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	4798      	blx	r3
    } 
  }
  return status;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020008 	.word	0x40020008
 800076c:	4002001c 	.word	0x4002001c
 8000770:	40020030 	.word	0x40020030
 8000774:	40020044 	.word	0x40020044
 8000778:	40020058 	.word	0x40020058
 800077c:	4002006c 	.word	0x4002006c
 8000780:	40020000 	.word	0x40020000

08000784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
 8000790:	4613      	mov	r3, r2
 8000792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000794:	787b      	ldrb	r3, [r7, #1]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800079a:	887a      	ldrh	r2, [r7, #2]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80007a0:	e003      	b.n	80007aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	041a      	lsls	r2, r3, #16
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	611a      	str	r2, [r3, #16]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e26c      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f000 8087 	beq.w	80008e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007d4:	4b92      	ldr	r3, [pc, #584]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 030c 	and.w	r3, r3, #12
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d00c      	beq.n	80007fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007e0:	4b8f      	ldr	r3, [pc, #572]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 030c 	and.w	r3, r3, #12
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d112      	bne.n	8000812 <HAL_RCC_OscConfig+0x5e>
 80007ec:	4b8c      	ldr	r3, [pc, #560]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f8:	d10b      	bne.n	8000812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007fa:	4b89      	ldr	r3, [pc, #548]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d06c      	beq.n	80008e0 <HAL_RCC_OscConfig+0x12c>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d168      	bne.n	80008e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e246      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800081a:	d106      	bne.n	800082a <HAL_RCC_OscConfig+0x76>
 800081c:	4b80      	ldr	r3, [pc, #512]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a7f      	ldr	r2, [pc, #508]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	e02e      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10c      	bne.n	800084c <HAL_RCC_OscConfig+0x98>
 8000832:	4b7b      	ldr	r3, [pc, #492]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a7a      	ldr	r2, [pc, #488]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b78      	ldr	r3, [pc, #480]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a77      	ldr	r2, [pc, #476]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e01d      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000854:	d10c      	bne.n	8000870 <HAL_RCC_OscConfig+0xbc>
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a71      	ldr	r2, [pc, #452]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800085c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a6e      	ldr	r2, [pc, #440]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e00b      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
 8000870:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a6a      	ldr	r2, [pc, #424]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a67      	ldr	r2, [pc, #412]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d013      	beq.n	80008b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000890:	f7ff fdf0 	bl	8000474 <HAL_GetTick>
 8000894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000896:	e008      	b.n	80008aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000898:	f7ff fdec 	bl	8000474 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b64      	cmp	r3, #100	; 0x64
 80008a4:	d901      	bls.n	80008aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e1fa      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f0      	beq.n	8000898 <HAL_RCC_OscConfig+0xe4>
 80008b6:	e014      	b.n	80008e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b8:	f7ff fddc 	bl	8000474 <HAL_GetTick>
 80008bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008be:	e008      	b.n	80008d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008c0:	f7ff fdd8 	bl	8000474 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b64      	cmp	r3, #100	; 0x64
 80008cc:	d901      	bls.n	80008d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e1e6      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f0      	bne.n	80008c0 <HAL_RCC_OscConfig+0x10c>
 80008de:	e000      	b.n	80008e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d063      	beq.n	80009b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00b      	beq.n	8000912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 030c 	and.w	r3, r3, #12
 8000902:	2b08      	cmp	r3, #8
 8000904:	d11c      	bne.n	8000940 <HAL_RCC_OscConfig+0x18c>
 8000906:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d116      	bne.n	8000940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000912:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <HAL_RCC_OscConfig+0x176>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d001      	beq.n	800092a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e1ba      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4939      	ldr	r1, [pc, #228]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800093a:	4313      	orrs	r3, r2
 800093c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093e:	e03a      	b.n	80009b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d020      	beq.n	800098a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <HAL_RCC_OscConfig+0x270>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800094e:	f7ff fd91 	bl	8000474 <HAL_GetTick>
 8000952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000954:	e008      	b.n	8000968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000956:	f7ff fd8d 	bl	8000474 <HAL_GetTick>
 800095a:	4602      	mov	r2, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	2b02      	cmp	r3, #2
 8000962:	d901      	bls.n	8000968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000964:	2303      	movs	r3, #3
 8000966:	e19b      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f0      	beq.n	8000956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	4927      	ldr	r1, [pc, #156]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000984:	4313      	orrs	r3, r2
 8000986:	600b      	str	r3, [r1, #0]
 8000988:	e015      	b.n	80009b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <HAL_RCC_OscConfig+0x270>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000990:	f7ff fd70 	bl	8000474 <HAL_GetTick>
 8000994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fd6c 	bl	8000474 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e17a      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f0      	bne.n	8000998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d03a      	beq.n	8000a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d019      	beq.n	80009fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_RCC_OscConfig+0x274>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d0:	f7ff fd50 	bl	8000474 <HAL_GetTick>
 80009d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d6:	e008      	b.n	80009ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009d8:	f7ff fd4c 	bl	8000474 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d901      	bls.n	80009ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e15a      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0f0      	beq.n	80009d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 faa6 	bl	8000f48 <RCC_Delay>
 80009fc:	e01c      	b.n	8000a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_RCC_OscConfig+0x274>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a04:	f7ff fd36 	bl	8000474 <HAL_GetTick>
 8000a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0a:	e00f      	b.n	8000a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fd32 	bl	8000474 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d908      	bls.n	8000a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e140      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	42420000 	.word	0x42420000
 8000a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a2c:	4b9e      	ldr	r3, [pc, #632]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1e9      	bne.n	8000a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f000 80a6 	beq.w	8000b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4a:	4b97      	ldr	r3, [pc, #604]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10d      	bne.n	8000a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b94      	ldr	r3, [pc, #592]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a93      	ldr	r2, [pc, #588]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b91      	ldr	r3, [pc, #580]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a72:	4b8e      	ldr	r3, [pc, #568]	; (8000cac <HAL_RCC_OscConfig+0x4f8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d118      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a7e:	4b8b      	ldr	r3, [pc, #556]	; (8000cac <HAL_RCC_OscConfig+0x4f8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a8a      	ldr	r2, [pc, #552]	; (8000cac <HAL_RCC_OscConfig+0x4f8>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a8a:	f7ff fcf3 	bl	8000474 <HAL_GetTick>
 8000a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	e008      	b.n	8000aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a92:	f7ff fcef 	bl	8000474 <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b64      	cmp	r3, #100	; 0x64
 8000a9e:	d901      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e0fd      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa4:	4b81      	ldr	r3, [pc, #516]	; (8000cac <HAL_RCC_OscConfig+0x4f8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f0      	beq.n	8000a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x312>
 8000ab8:	4b7b      	ldr	r3, [pc, #492]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	4a7a      	ldr	r2, [pc, #488]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6213      	str	r3, [r2, #32]
 8000ac4:	e02d      	b.n	8000b22 <HAL_RCC_OscConfig+0x36e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10c      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x334>
 8000ace:	4b76      	ldr	r3, [pc, #472]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	4a75      	ldr	r2, [pc, #468]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	6213      	str	r3, [r2, #32]
 8000ada:	4b73      	ldr	r3, [pc, #460]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a72      	ldr	r2, [pc, #456]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000ae0:	f023 0304 	bic.w	r3, r3, #4
 8000ae4:	6213      	str	r3, [r2, #32]
 8000ae6:	e01c      	b.n	8000b22 <HAL_RCC_OscConfig+0x36e>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2b05      	cmp	r3, #5
 8000aee:	d10c      	bne.n	8000b0a <HAL_RCC_OscConfig+0x356>
 8000af0:	4b6d      	ldr	r3, [pc, #436]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a6c      	ldr	r2, [pc, #432]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6213      	str	r3, [r2, #32]
 8000afc:	4b6a      	ldr	r3, [pc, #424]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a69      	ldr	r2, [pc, #420]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6213      	str	r3, [r2, #32]
 8000b08:	e00b      	b.n	8000b22 <HAL_RCC_OscConfig+0x36e>
 8000b0a:	4b67      	ldr	r3, [pc, #412]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a66      	ldr	r2, [pc, #408]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6213      	str	r3, [r2, #32]
 8000b16:	4b64      	ldr	r3, [pc, #400]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	4a63      	ldr	r2, [pc, #396]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b1c:	f023 0304 	bic.w	r3, r3, #4
 8000b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d015      	beq.n	8000b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fca3 	bl	8000474 <HAL_GetTick>
 8000b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b30:	e00a      	b.n	8000b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fc9f 	bl	8000474 <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d901      	bls.n	8000b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e0ab      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b48:	4b57      	ldr	r3, [pc, #348]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0ee      	beq.n	8000b32 <HAL_RCC_OscConfig+0x37e>
 8000b54:	e014      	b.n	8000b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b56:	f7ff fc8d 	bl	8000474 <HAL_GetTick>
 8000b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5c:	e00a      	b.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fc89 	bl	8000474 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e095      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b74:	4b4c      	ldr	r3, [pc, #304]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1ee      	bne.n	8000b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d105      	bne.n	8000b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8081 	beq.w	8000c9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b9c:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d061      	beq.n	8000c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d146      	bne.n	8000c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb0:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <HAL_RCC_OscConfig+0x4fc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fc5d 	bl	8000474 <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fc59 	bl	8000474 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e067      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f0      	bne.n	8000bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be4:	d108      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	492d      	ldr	r1, [pc, #180]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a19      	ldr	r1, [r3, #32]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	4927      	ldr	r1, [pc, #156]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <HAL_RCC_OscConfig+0x4fc>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c16:	f7ff fc2d 	bl	8000474 <HAL_GetTick>
 8000c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c1c:	e008      	b.n	8000c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1e:	f7ff fc29 	bl	8000474 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e037      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f0      	beq.n	8000c1e <HAL_RCC_OscConfig+0x46a>
 8000c3c:	e02f      	b.n	8000c9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_RCC_OscConfig+0x4fc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fc16 	bl	8000474 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4c:	f7ff fc12 	bl	8000474 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e020      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0x498>
 8000c6a:	e018      	b.n	8000c9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e013      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40007000 	.word	0x40007000
 8000cb0:	42420060 	.word	0x42420060

08000cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e0d0      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc8:	4b6a      	ldr	r3, [pc, #424]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d910      	bls.n	8000cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd6:	4b67      	ldr	r3, [pc, #412]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 0207 	bic.w	r2, r3, #7
 8000cde:	4965      	ldr	r1, [pc, #404]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce6:	4b63      	ldr	r3, [pc, #396]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d001      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e0b8      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d020      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d10:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d28:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a52      	ldr	r2, [pc, #328]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d34:	4b50      	ldr	r3, [pc, #320]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	494d      	ldr	r1, [pc, #308]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d040      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d107      	bne.n	8000d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d115      	bne.n	8000d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e07f      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d107      	bne.n	8000d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d72:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e073      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e06b      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d92:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f023 0203 	bic.w	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4936      	ldr	r1, [pc, #216]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000da4:	f7ff fb66 	bl	8000474 <HAL_GetTick>
 8000da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000daa:	e00a      	b.n	8000dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dac:	f7ff fb62 	bl	8000474 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e053      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 020c 	and.w	r2, r3, #12
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d1eb      	bne.n	8000dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d210      	bcs.n	8000e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 0207 	bic.w	r2, r3, #7
 8000dea:	4922      	ldr	r1, [pc, #136]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_RCC_ClockConfig+0x1c0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d001      	beq.n	8000e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e032      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	4916      	ldr	r1, [pc, #88]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d009      	beq.n	8000e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	490e      	ldr	r1, [pc, #56]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e42:	f000 f821 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8000e46:	4602      	mov	r2, r0
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_RCC_ClockConfig+0x1c4>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	490a      	ldr	r1, [pc, #40]	; (8000e7c <HAL_RCC_ClockConfig+0x1c8>)
 8000e54:	5ccb      	ldrb	r3, [r1, r3]
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <HAL_RCC_ClockConfig+0x1cc>)
 8000e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_RCC_ClockConfig+0x1d0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fac4 	bl	80003f0 <HAL_InitTick>

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	08001b20 	.word	0x08001b20
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e88:	b490      	push	{r4, r7}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e90:	1d3c      	adds	r4, r7, #4
 8000e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e98:	f240 2301 	movw	r3, #513	; 0x201
 8000e9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d002      	beq.n	8000ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d003      	beq.n	8000ece <HAL_RCC_GetSysClockFreq+0x46>
 8000ec6:	e02d      	b.n	8000f24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eca:	623b      	str	r3, [r7, #32]
      break;
 8000ecc:	e02d      	b.n	8000f2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	0c9b      	lsrs	r3, r3, #18
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eda:	4413      	add	r3, r2
 8000edc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000ee0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	0c5b      	lsrs	r3, r3, #17
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000efa:	4413      	add	r3, r2
 8000efc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f06:	fb02 f203 	mul.w	r2, r2, r3
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	e004      	b.n	8000f1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	623b      	str	r3, [r7, #32]
      break;
 8000f22:	e002      	b.n	8000f2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f26:	623b      	str	r3, [r7, #32]
      break;
 8000f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc90      	pop	{r4, r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	08001b10 	.word	0x08001b10
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	007a1200 	.word	0x007a1200
 8000f44:	003d0900 	.word	0x003d0900

08000f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <RCC_Delay+0x34>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <RCC_Delay+0x38>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0a5b      	lsrs	r3, r3, #9
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f64:	bf00      	nop
  }
  while (Delay --);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	60fa      	str	r2, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f9      	bne.n	8000f64 <RCC_Delay+0x1c>
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fa0:	d112      	bne.n	8000fc8 <HAL_SPI_Receive+0x44>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10e      	bne.n	8000fc8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2204      	movs	r2, #4
 8000fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f8f1 	bl	80011a6 <HAL_SPI_TransmitReceive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	e0ea      	b.n	800119e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_SPI_Receive+0x52>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e0e3      	b.n	800119e <HAL_SPI_Receive+0x21a>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000fde:	f7ff fa49 	bl	8000474 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d002      	beq.n	8000ff6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000ff4:	e0ca      	b.n	800118c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <HAL_SPI_Receive+0x7e>
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001006:	e0c1      	b.n	800118c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2204      	movs	r2, #4
 800100c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800104e:	d10f      	bne.n	8001070 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800105e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800106e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107a:	2b40      	cmp	r3, #64	; 0x40
 800107c:	d007      	beq.n	800108e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d162      	bne.n	800115c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001096:	e02e      	b.n	80010f6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d115      	bne.n	80010d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f103 020c 	add.w	r2, r3, #12
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80010d0:	e011      	b.n	80010f6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80010d2:	f7ff f9cf 	bl	8000474 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d803      	bhi.n	80010ea <HAL_SPI_Receive+0x166>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d102      	bne.n	80010f0 <HAL_SPI_Receive+0x16c>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80010f4:	e04a      	b.n	800118c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1cb      	bne.n	8001098 <HAL_SPI_Receive+0x114>
 8001100:	e031      	b.n	8001166 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d113      	bne.n	8001138 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	b292      	uxth	r2, r2
 800111c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001122:	1c9a      	adds	r2, r3, #2
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001136:	e011      	b.n	800115c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001138:	f7ff f99c 	bl	8000474 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d803      	bhi.n	8001150 <HAL_SPI_Receive+0x1cc>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d102      	bne.n	8001156 <HAL_SPI_Receive+0x1d2>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	75fb      	strb	r3, [r7, #23]
          goto error;
 800115a:	e017      	b.n	800118c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1cd      	bne.n	8001102 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 fb4a 	bl	8001804 <SPI_EndRxTransaction>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2220      	movs	r2, #32
 800117a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	75fb      	strb	r3, [r7, #23]
 8001188:	e000      	b.n	800118c <HAL_SPI_Receive+0x208>
  }

error :
 800118a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800119c:	7dfb      	ldrb	r3, [r7, #23]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b08c      	sub	sp, #48	; 0x30
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <HAL_SPI_TransmitReceive+0x26>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e18a      	b.n	80014e2 <HAL_SPI_TransmitReceive+0x33c>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80011d4:	f7ff f94e 	bl	8000474 <HAL_GetTick>
 80011d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80011ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d00f      	beq.n	8001216 <HAL_SPI_TransmitReceive+0x70>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011fc:	d107      	bne.n	800120e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <HAL_SPI_TransmitReceive+0x68>
 8001206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800120a:	2b04      	cmp	r3, #4
 800120c:	d003      	beq.n	8001216 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800120e:	2302      	movs	r3, #2
 8001210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001214:	e15b      	b.n	80014ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_SPI_TransmitReceive+0x82>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <HAL_SPI_TransmitReceive+0x82>
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800122e:	e14e      	b.n	80014ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b04      	cmp	r3, #4
 800123a:	d003      	beq.n	8001244 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2205      	movs	r2, #5
 8001240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001284:	2b40      	cmp	r3, #64	; 0x40
 8001286:	d007      	beq.n	8001298 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012a0:	d178      	bne.n	8001394 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_SPI_TransmitReceive+0x10a>
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d166      	bne.n	800137e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	1c9a      	adds	r2, r3, #2
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80012d4:	e053      	b.n	800137e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d11b      	bne.n	800131c <HAL_SPI_TransmitReceive+0x176>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_SPI_TransmitReceive+0x176>
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d113      	bne.n	800131c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	881a      	ldrh	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	1c9a      	adds	r2, r3, #2
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d119      	bne.n	800135e <HAL_SPI_TransmitReceive+0x1b8>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800132e:	b29b      	uxth	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d014      	beq.n	800135e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	b292      	uxth	r2, r2
 8001340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	1c9a      	adds	r2, r3, #2
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001350:	b29b      	uxth	r3, r3
 8001352:	3b01      	subs	r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800135a:	2301      	movs	r3, #1
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800135e:	f7ff f889 	bl	8000474 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800136a:	429a      	cmp	r2, r3
 800136c:	d807      	bhi.n	800137e <HAL_SPI_TransmitReceive+0x1d8>
 800136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d003      	beq.n	800137e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800137c:	e0a7      	b.n	80014ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1a6      	bne.n	80012d6 <HAL_SPI_TransmitReceive+0x130>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800138c:	b29b      	uxth	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1a1      	bne.n	80012d6 <HAL_SPI_TransmitReceive+0x130>
 8001392:	e07c      	b.n	800148e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <HAL_SPI_TransmitReceive+0x1fc>
 800139c:	8b7b      	ldrh	r3, [r7, #26]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d16b      	bne.n	800147a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	330c      	adds	r3, #12
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013c8:	e057      	b.n	800147a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d11c      	bne.n	8001412 <HAL_SPI_TransmitReceive+0x26c>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d017      	beq.n	8001412 <HAL_SPI_TransmitReceive+0x26c>
 80013e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d114      	bne.n	8001412 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	330c      	adds	r3, #12
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001404:	b29b      	uxth	r3, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	d119      	bne.n	8001454 <HAL_SPI_TransmitReceive+0x2ae>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001446:	b29b      	uxth	r3, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	b29a      	uxth	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001450:	2301      	movs	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001454:	f7ff f80e 	bl	8000474 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001460:	429a      	cmp	r2, r3
 8001462:	d803      	bhi.n	800146c <HAL_SPI_TransmitReceive+0x2c6>
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146a:	d102      	bne.n	8001472 <HAL_SPI_TransmitReceive+0x2cc>
 800146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146e:	2b00      	cmp	r3, #0
 8001470:	d103      	bne.n	800147a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001478:	e029      	b.n	80014ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800147e:	b29b      	uxth	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1a2      	bne.n	80013ca <HAL_SPI_TransmitReceive+0x224>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001488:	b29b      	uxth	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d19d      	bne.n	80013ca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 fa08 	bl	80018a8 <SPI_EndRxTxTransaction>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2220      	movs	r2, #32
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80014aa:	e010      	b.n	80014ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10b      	bne.n	80014cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	e000      	b.n	80014ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80014cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80014de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	099b      	lsrs	r3, r3, #6
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10f      	bne.n	8001530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
    return;
 800152e:	e0be      	b.n	80016ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00a      	beq.n	8001552 <HAL_SPI_IRQHandler+0x66>
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	09db      	lsrs	r3, r3, #7
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	4798      	blx	r3
    return;
 8001550:	e0ad      	b.n	80016ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_SPI_IRQHandler+0x80>
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	099b      	lsrs	r3, r3, #6
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80a1 	beq.w	80016ae <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 809a 	beq.w	80016ae <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d023      	beq.n	80015ce <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b03      	cmp	r3, #3
 8001590:	d011      	beq.n	80015b6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f043 0204 	orr.w	r2, r3, #4
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	e00b      	b.n	80015ce <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
        return;
 80015cc:	e06f      	b.n	80016ae <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	095b      	lsrs	r3, r3, #5
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d014      	beq.n	8001604 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	2b00      	cmp	r3, #0
 800160a:	d04f      	beq.n	80016ac <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800161a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <HAL_SPI_IRQHandler+0x14c>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d034      	beq.n	80016a2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0203 	bic.w	r2, r2, #3
 8001646:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d011      	beq.n	8001674 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <HAL_SPI_IRQHandler+0x1c8>)
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f81b 	bl	8000698 <HAL_DMA_Abort_IT>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001678:	2b00      	cmp	r3, #0
 800167a:	d016      	beq.n	80016aa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <HAL_SPI_IRQHandler+0x1c8>)
 8001682:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f805 	bl	8000698 <HAL_DMA_Abort_IT>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80016a0:	e003      	b.n	80016aa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f808 	bl	80016b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80016a8:	e000      	b.n	80016ac <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80016aa:	bf00      	nop
    return;
 80016ac:	bf00      	nop
  }
}
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	080016cb 	.word	0x080016cb

080016b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff ffe7 	bl	80016b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001704:	f7fe feb6 	bl	8000474 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001714:	f7fe feae 	bl	8000474 <HAL_GetTick>
 8001718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	015b      	lsls	r3, r3, #5
 8001720:	0d1b      	lsrs	r3, r3, #20
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800172a:	e054      	b.n	80017d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001732:	d050      	beq.n	80017d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001734:	f7fe fe9e 	bl	8000474 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	429a      	cmp	r2, r3
 8001742:	d902      	bls.n	800174a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d13d      	bne.n	80017c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001762:	d111      	bne.n	8001788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800176c:	d004      	beq.n	8001778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001776:	d107      	bne.n	8001788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001790:	d10f      	bne.n	80017b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e017      	b.n	80017f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4013      	ands	r3, r2
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d19b      	bne.n	800172c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000

08001804 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001818:	d111      	bne.n	800183e <SPI_EndRxTransaction+0x3a>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001822:	d004      	beq.n	800182e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182c:	d107      	bne.n	800183e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800183c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001846:	d117      	bne.n	8001878 <SPI_EndRxTransaction+0x74>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001850:	d112      	bne.n	8001878 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	2101      	movs	r1, #1
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff ff49 	bl	80016f4 <SPI_WaitFlagStateUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01a      	beq.n	800189e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e013      	b.n	80018a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7ff ff36 	bl	80016f4 <SPI_WaitFlagStateUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e000      	b.n	80018a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff ff18 	bl	80016f4 <SPI_WaitFlagStateUntilTimeout>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f043 0220 	orr.w	r2, r3, #32
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e000      	b.n	80018dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b20      	cmp	r3, #32
 8001902:	d17c      	bne.n	80019fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_UART_Transmit+0x2c>
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e075      	b.n	8001a00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_UART_Transmit+0x3e>
 800191e:	2302      	movs	r3, #2
 8001920:	e06e      	b.n	8001a00 <HAL_UART_Transmit+0x11c>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2221      	movs	r2, #33	; 0x21
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001938:	f7fe fd9c 	bl	8000474 <HAL_GetTick>
 800193c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001952:	d108      	bne.n	8001966 <HAL_UART_Transmit+0x82>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	e003      	b.n	800196e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001976:	e02a      	b.n	80019ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2200      	movs	r2, #0
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f840 	bl	8001a08 <UART_WaitOnFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e036      	b.n	8001a00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	3302      	adds	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	e007      	b.n	80019c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3301      	adds	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1cf      	bne.n	8001978 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2200      	movs	r2, #0
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f810 	bl	8001a08 <UART_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e006      	b.n	8001a00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a18:	e02c      	b.n	8001a74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d028      	beq.n	8001a74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a28:	f7fe fd24 	bl	8000474 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d21d      	bcs.n	8001a74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e00f      	b.n	8001a94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d0c3      	beq.n	8001a1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <__libc_init_array>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	2600      	movs	r6, #0
 8001aa0:	4d0c      	ldr	r5, [pc, #48]	; (8001ad4 <__libc_init_array+0x38>)
 8001aa2:	4c0d      	ldr	r4, [pc, #52]	; (8001ad8 <__libc_init_array+0x3c>)
 8001aa4:	1b64      	subs	r4, r4, r5
 8001aa6:	10a4      	asrs	r4, r4, #2
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d109      	bne.n	8001ac0 <__libc_init_array+0x24>
 8001aac:	f000 f822 	bl	8001af4 <_init>
 8001ab0:	2600      	movs	r6, #0
 8001ab2:	4d0a      	ldr	r5, [pc, #40]	; (8001adc <__libc_init_array+0x40>)
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <__libc_init_array+0x44>)
 8001ab6:	1b64      	subs	r4, r4, r5
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	42a6      	cmp	r6, r4
 8001abc:	d105      	bne.n	8001aca <__libc_init_array+0x2e>
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac4:	4798      	blx	r3
 8001ac6:	3601      	adds	r6, #1
 8001ac8:	e7ee      	b.n	8001aa8 <__libc_init_array+0xc>
 8001aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ace:	4798      	blx	r3
 8001ad0:	3601      	adds	r6, #1
 8001ad2:	e7f2      	b.n	8001aba <__libc_init_array+0x1e>
 8001ad4:	08001b30 	.word	0x08001b30
 8001ad8:	08001b30 	.word	0x08001b30
 8001adc:	08001b30 	.word	0x08001b30
 8001ae0:	08001b34 	.word	0x08001b34

08001ae4 <memset>:
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4402      	add	r2, r0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d100      	bne.n	8001aee <memset+0xa>
 8001aec:	4770      	bx	lr
 8001aee:	f803 1b01 	strb.w	r1, [r3], #1
 8001af2:	e7f9      	b.n	8001ae8 <memset+0x4>

08001af4 <_init>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	bf00      	nop
 8001af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afa:	bc08      	pop	{r3}
 8001afc:	469e      	mov	lr, r3
 8001afe:	4770      	bx	lr

08001b00 <_fini>:
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	bf00      	nop
 8001b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b06:	bc08      	pop	{r3}
 8001b08:	469e      	mov	lr, r3
 8001b0a:	4770      	bx	lr
