
Simple _combined_central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cfc  08003cfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003cfc  08003cfc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cfc  08003cfc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000074  08003d78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08003d78  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ffa  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029be  00000000  00000000  00033097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00035a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00036c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019287  00000000  00000000  00037d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f0d  00000000  00000000  00050fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e18  00000000  00000000  00063ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  000f5d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c70 	.word	0x08003c70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003c70 	.word	0x08003c70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc19 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f879 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9c3 	bl	80004f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f8f1 	bl	8000354 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f973 	bl	800045c <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000176:	f000 f99b 	bl	80004b0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800017a:	f000 f921 	bl	80003c0 <MX_TIM2_Init>
  MX_RTC_Init();
 800017e:	f000 f8cd 	bl	800031c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //to reset the the j9 optode
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2101      	movs	r1, #1
 8000186:	482d      	ldr	r0, [pc, #180]	; (800023c <main+0xe0>)
 8000188:	f000 ff94 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2102      	movs	r1, #2
 8000190:	482a      	ldr	r0, [pc, #168]	; (800023c <main+0xe0>)
 8000192:	f000 ff8f 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	4828      	ldr	r0, [pc, #160]	; (800023c <main+0xe0>)
 800019c:	f000 ff8a 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_Delay(1500);
 80001a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80001a4:	f000 fc5a 	bl	8000a5c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2102      	movs	r1, #2
 80001ac:	4823      	ldr	r0, [pc, #140]	; (800023c <main+0xe0>)
 80001ae:	f000 ff81 	bl	80010b4 <HAL_GPIO_WritePin>

  //to select the j9 slave ooptode
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b8:	4821      	ldr	r0, [pc, #132]	; (8000240 <main+0xe4>)
 80001ba:	f000 ff7b 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c4:	481e      	ldr	r0, [pc, #120]	; (8000240 <main+0xe4>)
 80001c6:	f000 ff75 	bl	80010b4 <HAL_GPIO_WritePin>
//          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//          HAL_Delay(100);
//      }


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d0:	481b      	ldr	r0, [pc, #108]	; (8000240 <main+0xe4>)
 80001d2:	f000 ff6f 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001dc:	4818      	ldr	r0, [pc, #96]	; (8000240 <main+0xe4>)
 80001de:	f000 ff69 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	4815      	ldr	r0, [pc, #84]	; (8000240 <main+0xe4>)
 80001ea:	f000 ff63 	bl	80010b4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aTxBuffer, (uint8_t *)&reading , sizeof(reading), HAL_MAX_DELAY);
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2302      	movs	r3, #2
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <main+0xe8>)
 80001f8:	4913      	ldr	r1, [pc, #76]	; (8000248 <main+0xec>)
 80001fa:	4814      	ldr	r0, [pc, #80]	; (800024c <main+0xf0>)
 80001fc:	f001 ffb7 	bl	800216e <HAL_SPI_TransmitReceive>

	  sprintf(msg, "%hu\r\n", (int)reading);
 8000200:	4b10      	ldr	r3, [pc, #64]	; (8000244 <main+0xe8>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4912      	ldr	r1, [pc, #72]	; (8000250 <main+0xf4>)
 8000208:	4812      	ldr	r0, [pc, #72]	; (8000254 <main+0xf8>)
 800020a:	f003 f8f7 	bl	80033fc <siprintf>

		//HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
	  if((reading>300)&&(reading<4096)){
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <main+0xe8>)
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000216:	d9ea      	bls.n	80001ee <main+0x92>
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <main+0xe8>)
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000220:	d2e5      	bcs.n	80001ee <main+0x92>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <main+0xf8>)
 8000224:	f7ff ff92 	bl	800014c <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	4908      	ldr	r1, [pc, #32]	; (8000254 <main+0xf8>)
 8000232:	4809      	ldr	r0, [pc, #36]	; (8000258 <main+0xfc>)
 8000234:	f002 fee5 	bl	8003002 <HAL_UART_Transmit>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aTxBuffer, (uint8_t *)&reading , sizeof(reading), HAL_MAX_DELAY);
 8000238:	e7d9      	b.n	80001ee <main+0x92>
 800023a:	bf00      	nop
 800023c:	40010c00 	.word	0x40010c00
 8000240:	40010800 	.word	0x40010800
 8000244:	20000000 	.word	0x20000000
 8000248:	200004c0 	.word	0x200004c0
 800024c:	200000f0 	.word	0x200000f0
 8000250:	08003c88 	.word	0x08003c88
 8000254:	2000009c 	.word	0x2000009c
 8000258:	20000190 	.word	0x20000190

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	; 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 f8be 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800028c:	2309      	movs	r3, #9
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80002b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 f82c 	bl	8001314 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002c2:	f000 f991 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fa97 	bl	8001814 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002ec:	f000 f97c 	bl	80005e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002f0:	2311      	movs	r3, #17
 80002f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fc22 	bl	8001b4c <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800030e:	f000 f96b 	bl	80005e8 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	; 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_RTC_Init+0x30>)
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <MX_RTC_Init+0x34>)
 8000324:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_RTC_Init+0x30>)
 8000328:	f04f 32ff 	mov.w	r2, #4294967295
 800032c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_RTC_Init+0x30>)
 8000330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000334:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_RTC_Init+0x30>)
 8000338:	f001 fd82 	bl	8001e40 <HAL_RTC_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000342:	f000 f951 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000bc 	.word	0x200000bc
 8000350:	40002800 	.word	0x40002800

08000354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */
  //__HAL_RCC_SPI1_CLK_ENABLE; // I added this ******************************************************
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_SPI1_Init+0x64>)
 800035a:	4a18      	ldr	r2, [pc, #96]	; (80003bc <MX_SPI1_Init+0x68>)
 800035c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800035e:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_SPI1_Init+0x64>)
 8000360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_SPI1_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_SPI1_Init+0x64>)
 800037a:	2201      	movs	r2, #1
 800037c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_SPI1_Init+0x64>)
 8000380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_SPI1_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <MX_SPI1_Init+0x64>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_SPI1_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_SPI1_Init+0x64>)
 80003a0:	220a      	movs	r2, #10
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_SPI1_Init+0x64>)
 80003a6:	f001 fe5e 	bl	8002066 <HAL_SPI_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003b0:	f000 f91a 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200000f0 	.word	0x200000f0
 80003bc:	40013000 	.word	0x40013000

080003c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003dc:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_TIM2_Init+0x98>)
 80003de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_TIM2_Init+0x98>)
 80003e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM2_Init+0x98>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_TIM2_Init+0x98>)
 80003f4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_TIM2_Init+0x98>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_TIM2_Init+0x98>)
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_TIM2_Init+0x98>)
 8000408:	f002 f9fe 	bl	8002808 <HAL_TIM_Base_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000412:	f000 f8e9 	bl	80005e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800041c:	f107 0308 	add.w	r3, r7, #8
 8000420:	4619      	mov	r1, r3
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_TIM2_Init+0x98>)
 8000424:	f002 fb47 	bl	8002ab6 <HAL_TIM_ConfigClockSource>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800042e:	f000 f8db 	bl	80005e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000432:	2300      	movs	r3, #0
 8000434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_TIM2_Init+0x98>)
 8000440:	f002 fd22 	bl	8002e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800044a:	f000 f8cd 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000148 	.word	0x20000148

0800045c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <MX_USART2_UART_Init+0x4c>)
 8000464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <MX_USART2_UART_Init+0x50>)
 800046a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 8000480:	220c      	movs	r2, #12
 8000482:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_USART2_UART_Init+0x48>)
 8000492:	f002 fd69 	bl	8002f68 <HAL_UART_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800049c:	f000 f8a4 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000190 	.word	0x20000190
 80004a8:	40004400 	.word	0x40004400
 80004ac:	000f4240 	.word	0x000f4240

080004b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <MX_USB_PCD_Init+0x40>)
 80004b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004bc:	2208      	movs	r2, #8
 80004be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_USB_PCD_Init+0x3c>)
 80004da:	f000 fe03 	bl	80010e4 <HAL_PCD_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004e4:	f000 f880 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200001d4 	.word	0x200001d4
 80004f0:	40005c00 	.word	0x40005c00

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000508:	4b34      	ldr	r3, [pc, #208]	; (80005dc <MX_GPIO_Init+0xe8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a33      	ldr	r2, [pc, #204]	; (80005dc <MX_GPIO_Init+0xe8>)
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b31      	ldr	r3, [pc, #196]	; (80005dc <MX_GPIO_Init+0xe8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0310 	and.w	r3, r3, #16
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000520:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <MX_GPIO_Init+0xe8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a2d      	ldr	r2, [pc, #180]	; (80005dc <MX_GPIO_Init+0xe8>)
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <MX_GPIO_Init+0xe8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0320 	and.w	r3, r3, #32
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_GPIO_Init+0xe8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <MX_GPIO_Init+0xe8>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <MX_GPIO_Init+0xe8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <MX_GPIO_Init+0xe8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <MX_GPIO_Init+0xe8>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_GPIO_Init+0xe8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|A20_Pin|A21_Pin|A22_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f240 7101 	movw	r1, #1793	; 0x701
 800056e:	481c      	ldr	r0, [pc, #112]	; (80005e0 <MX_GPIO_Init+0xec>)
 8000570:	f000 fda0 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A12_Pin|A10_Pin|A11_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2107      	movs	r1, #7
 8000578:	481a      	ldr	r0, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xf0>)
 800057a:	f000 fd9b 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800057e:	2301      	movs	r3, #1
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4812      	ldr	r0, [pc, #72]	; (80005e0 <MX_GPIO_Init+0xec>)
 8000596:	f000 fc09 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pins : A12_Pin A10_Pin A11_Pin */
  GPIO_InitStruct.Pin = A12_Pin|A10_Pin|A11_Pin;
 800059a:	2307      	movs	r3, #7
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_GPIO_Init+0xf0>)
 80005b2:	f000 fbfb 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pins : A20_Pin A21_Pin A22_Pin */
  GPIO_InitStruct.Pin = A20_Pin|A21_Pin|A22_Pin;
 80005b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_GPIO_Init+0xec>)
 80005d0:	f000 fbec 	bl	8000dac <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <HAL_RTC_MspInit+0x3c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d110      	bne.n	800068c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800066a:	f000 fe47 	bl	80012fc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_RTC_MspInit+0x40>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_RTC_MspInit+0x40>)
 8000674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_RTC_MspInit+0x40>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_RTC_MspInit+0x44>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40002800 	.word	0x40002800
 8000698:	40021000 	.word	0x40021000
 800069c:	4242043c 	.word	0x4242043c

080006a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <HAL_SPI_MspInit+0x98>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d137      	bne.n	8000730 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <HAL_SPI_MspInit+0x9c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a1d      	ldr	r2, [pc, #116]	; (800073c <HAL_SPI_MspInit+0x9c>)
 80006c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <HAL_SPI_MspInit+0x9c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <HAL_SPI_MspInit+0x9c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a17      	ldr	r2, [pc, #92]	; (800073c <HAL_SPI_MspInit+0x9c>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_SPI_MspInit+0x9c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_SPI_MspInit+0xa0>)
 8000704:	f000 fb52 	bl	8000dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <HAL_SPI_MspInit+0xa0>)
 800071c:	f000 fb46 	bl	8000dac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2023      	movs	r0, #35	; 0x23
 8000726:	f000 fa94 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800072a:	2023      	movs	r0, #35	; 0x23
 800072c:	f000 faad 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013000 	.word	0x40013000
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000754:	d113      	bne.n	800077e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_TIM_Base_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <HAL_TIM_Base_MspInit+0x44>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_TIM_Base_MspInit+0x44>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	201c      	movs	r0, #28
 8000774:	f000 fa6d 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000778:	201c      	movs	r0, #28
 800077a:	f000 fa86 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d12f      	bne.n	800080c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_UART_MspInit+0x8c>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_UART_MspInit+0x8c>)
 80007b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b6:	61d3      	str	r3, [r2, #28]
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x8c>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_MspInit+0x8c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <HAL_UART_MspInit+0x8c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0x8c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007dc:	2304      	movs	r3, #4
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_UART_MspInit+0x90>)
 80007f0:	f000 fadc 	bl	8000dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f4:	2308      	movs	r3, #8
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_UART_MspInit+0x90>)
 8000808:	f000 fad0 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_PCD_MspInit+0x34>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10b      	bne.n	800084a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_PCD_MspInit+0x38>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_PCD_MspInit+0x38>)
 8000838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_PCD_MspInit+0x38>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40005c00 	.word	0x40005c00
 8000858:	40021000 	.word	0x40021000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 f8bf 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <TIM2_IRQHandler+0x10>)
 80008b2:	f001 fff8 	bl	80028a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000148 	.word	0x20000148

080008c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <SPI1_IRQHandler+0x10>)
 80008c6:	f001 fdf5 	bl	80024b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000f0 	.word	0x200000f0

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f002 fd48 	bl	8003398 <__errno>
 8000908:	4603      	mov	r3, r0
 800090a:	220c      	movs	r2, #12
 800090c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20005000 	.word	0x20005000
 8000934:	00000400 	.word	0x00000400
 8000938:	20000090 	.word	0x20000090
 800093c:	200004e8 	.word	0x200004e8

08000940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000972:	f7ff ffe5 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f002 fd15 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fbef 	bl	800015c <main>
  bx lr
 800097e:	4770      	bx	lr
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000988:	08003d04 	.word	0x08003d04
  ldr r2, =_sbss
 800098c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000990:	200004e4 	.word	0x200004e4

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x28>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x28>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f947 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fe1e 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f95f 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f927 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	2000000c 	.word	0x2000000c
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	200004d0 	.word	0x200004d0

08000a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	200004d0 	.word	0x200004d0

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff0 	bl	8000a48 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffe0 	bl	8000a48 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000000c 	.word	0x2000000c

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <__NVIC_EnableIRQ+0x34>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff90 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff2d 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff42 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff90 	bl	8000b94 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5f 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff35 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d005      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2204      	movs	r2, #4
 8000cda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e051      	b.n	8000d86 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 020e 	bic.w	r2, r2, #14
 8000cf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0201 	bic.w	r2, r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <HAL_DMA_Abort_IT+0xd0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d029      	beq.n	8000d60 <HAL_DMA_Abort_IT+0xa0>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_DMA_Abort_IT+0xd4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d022      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x9c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_DMA_Abort_IT+0xd8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d01a      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x96>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_DMA_Abort_IT+0xdc>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d012      	beq.n	8000d50 <HAL_DMA_Abort_IT+0x90>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_DMA_Abort_IT+0xe0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00a      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x8a>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_DMA_Abort_IT+0xe4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d102      	bne.n	8000d44 <HAL_DMA_Abort_IT+0x84>
 8000d3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d42:	e00e      	b.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d48:	e00b      	b.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4e:	e008      	b.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	e005      	b.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5a:	e002      	b.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	e000      	b.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d60:	2301      	movs	r3, #1
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_DMA_Abort_IT+0xe8>)
 8000d64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	4798      	blx	r3
    } 
  }
  return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40020008 	.word	0x40020008
 8000d94:	4002001c 	.word	0x4002001c
 8000d98:	40020030 	.word	0x40020030
 8000d9c:	40020044 	.word	0x40020044
 8000da0:	40020058 	.word	0x40020058
 8000da4:	4002006c 	.word	0x4002006c
 8000da8:	40020000 	.word	0x40020000

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e169      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8158 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a9a      	ldr	r2, [pc, #616]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d05e      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000de8:	4a98      	ldr	r2, [pc, #608]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d875      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dee:	4a98      	ldr	r2, [pc, #608]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d058      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000df4:	4a96      	ldr	r2, [pc, #600]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d86f      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dfa:	4a96      	ldr	r2, [pc, #600]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d052      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e00:	4a94      	ldr	r2, [pc, #592]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d869      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e06:	4a94      	ldr	r2, [pc, #592]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04c      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a92      	ldr	r2, [pc, #584]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d863      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e12:	4a92      	ldr	r2, [pc, #584]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d046      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a90      	ldr	r2, [pc, #576]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d85d      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d82a      	bhi.n	8000e78 <HAL_GPIO_Init+0xcc>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d859      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <HAL_GPIO_Init+0x80>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000ea7 	.word	0x08000ea7
 8000e30:	08000e81 	.word	0x08000e81
 8000e34:	08000e93 	.word	0x08000e93
 8000e38:	08000ed5 	.word	0x08000ed5
 8000e3c:	08000edb 	.word	0x08000edb
 8000e40:	08000edb 	.word	0x08000edb
 8000e44:	08000edb 	.word	0x08000edb
 8000e48:	08000edb 	.word	0x08000edb
 8000e4c:	08000edb 	.word	0x08000edb
 8000e50:	08000edb 	.word	0x08000edb
 8000e54:	08000edb 	.word	0x08000edb
 8000e58:	08000edb 	.word	0x08000edb
 8000e5c:	08000edb 	.word	0x08000edb
 8000e60:	08000edb 	.word	0x08000edb
 8000e64:	08000edb 	.word	0x08000edb
 8000e68:	08000edb 	.word	0x08000edb
 8000e6c:	08000edb 	.word	0x08000edb
 8000e70:	08000e89 	.word	0x08000e89
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_GPIO_Init+0x2b4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e7e:	e02c      	b.n	8000eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e029      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e024      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e01f      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e01a      	b.n	8000edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e013      	b.n	8000edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	611a      	str	r2, [r3, #16]
          break;
 8000ec6:	e009      	b.n	8000edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	615a      	str	r2, [r3, #20]
          break;
 8000ed2:	e003      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x130>
          break;
 8000eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d801      	bhi.n	8000ee6 <HAL_GPIO_Init+0x13a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	e001      	b.n	8000eea <HAL_GPIO_Init+0x13e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d802      	bhi.n	8000ef8 <HAL_GPIO_Init+0x14c>
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x152>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	3b08      	subs	r3, #8
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	210f      	movs	r1, #15
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	6a39      	ldr	r1, [r7, #32]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80b1 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_GPIO_Init+0x2c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <HAL_GPIO_Init+0x2c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <HAL_GPIO_Init+0x2cc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000faa:	492f      	ldr	r1, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	492c      	ldr	r1, [pc, #176]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4928      	ldr	r1, [pc, #160]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	491e      	ldr	r1, [pc, #120]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d021      	beq.n	8001080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	490e      	ldr	r1, [pc, #56]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
 8001048:	e021      	b.n	800108e <HAL_GPIO_Init+0x2e2>
 800104a:	bf00      	nop
 800104c:	10320000 	.word	0x10320000
 8001050:	10310000 	.word	0x10310000
 8001054:	10220000 	.word	0x10220000
 8001058:	10210000 	.word	0x10210000
 800105c:	10120000 	.word	0x10120000
 8001060:	10110000 	.word	0x10110000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_GPIO_Init+0x304>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4909      	ldr	r1, [pc, #36]	; (80010b0 <HAL_GPIO_Init+0x304>)
 800108a:	4013      	ands	r3, r2
 800108c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae8e 	bne.w	8000dc0 <HAL_GPIO_Init+0x14>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	; 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b08b      	sub	sp, #44	; 0x2c
 80010e8:	af06      	add	r7, sp, #24
 80010ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e0fd      	b.n	80012f2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fb88 	bl	8000820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f8eb 	bl	80032f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	687e      	ldr	r6, [r7, #4]
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	1d33      	adds	r3, r6, #4
 800113a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f002 f8cb 	bl	80032d8 <USB_CoreInit>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0ce      	b.n	80012f2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f002 f8e6 	bl	800332c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e04c      	b.n	8001200 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	3301      	adds	r3, #1
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	b298      	uxth	r0, r3
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3336      	adds	r3, #54	; 0x36
 80011a4:	4602      	mov	r2, r0
 80011a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	440b      	add	r3, r1
 80011b8:	3303      	adds	r3, #3
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3338      	adds	r3, #56	; 0x38
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	333c      	adds	r3, #60	; 0x3c
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3340      	adds	r3, #64	; 0x40
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	d3ad      	bcc.n	8001166 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e044      	b.n	800129a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3b5      	bcc.n	8001210 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	687e      	ldr	r6, [r7, #4]
 80012ac:	466d      	mov	r5, sp
 80012ae:	f106 0410 	add.w	r4, r6, #16
 80012b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	602b      	str	r3, [r5, #0]
 80012ba:	1d33      	adds	r3, r6, #4
 80012bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f002 f840 	bl	8003344 <USB_DevInit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2202      	movs	r2, #2
 80012ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00d      	b.n	80012f2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f84a 	bl	8003384 <USB_DevDisconnect>

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080012fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	420e0020 	.word	0x420e0020

08001314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e26c      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8087 	beq.w	8001442 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001334:	4b92      	ldr	r3, [pc, #584]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b04      	cmp	r3, #4
 800133e:	d00c      	beq.n	800135a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001340:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d112      	bne.n	8001372 <HAL_RCC_OscConfig+0x5e>
 800134c:	4b8c      	ldr	r3, [pc, #560]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d10b      	bne.n	8001372 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135a:	4b89      	ldr	r3, [pc, #548]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d06c      	beq.n	8001440 <HAL_RCC_OscConfig+0x12c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d168      	bne.n	8001440 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e246      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x76>
 800137c:	4b80      	ldr	r3, [pc, #512]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a7f      	ldr	r2, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	e02e      	b.n	80013e8 <HAL_RCC_OscConfig+0xd4>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x98>
 8001392:	4b7b      	ldr	r3, [pc, #492]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7a      	ldr	r2, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b78      	ldr	r3, [pc, #480]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a77      	ldr	r2, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e01d      	b.n	80013e8 <HAL_RCC_OscConfig+0xd4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0xbc>
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a71      	ldr	r2, [pc, #452]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6e      	ldr	r2, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0xd4>
 80013d0:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a6a      	ldr	r2, [pc, #424]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a67      	ldr	r2, [pc, #412]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb2a 	bl	8000a48 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb26 	bl	8000a48 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1fa      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe4>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb16 	bl	8000a48 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fb12 	bl	8000a48 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1e6      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x10c>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144e:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b08      	cmp	r3, #8
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x18c>
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x176>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1ba      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4939      	ldr	r1, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e03a      	b.n	8001516 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff facb 	bl	8000a48 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fac7 	bl	8000a48 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e19b      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4927      	ldr	r1, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff faaa 	bl	8000a48 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff faa6 	bl	8000a48 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e17a      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03a      	beq.n	8001598 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d019      	beq.n	800155e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_RCC_OscConfig+0x274>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fa8a 	bl	8000a48 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fa86 	bl	8000a48 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e15a      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_RCC_OscConfig+0x26c>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f000 fada 	bl	8001b10 <RCC_Delay>
 800155c:	e01c      	b.n	8001598 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_RCC_OscConfig+0x274>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001564:	f7ff fa70 	bl	8000a48 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156a:	e00f      	b.n	800158c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fa6c 	bl	8000a48 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d908      	bls.n	800158c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e140      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	42420000 	.word	0x42420000
 8001588:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	4b9e      	ldr	r3, [pc, #632]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e9      	bne.n	800156c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a6 	beq.w	80016f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015aa:	4b97      	ldr	r3, [pc, #604]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10d      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b94      	ldr	r3, [pc, #592]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a93      	ldr	r2, [pc, #588]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b91      	ldr	r3, [pc, #580]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b8e      	ldr	r3, [pc, #568]	; (800180c <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a8a      	ldr	r2, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fa2d 	bl	8000a48 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fa29 	bl	8000a48 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b64      	cmp	r3, #100	; 0x64
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0fd      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x4f8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x312>
 8001618:	4b7b      	ldr	r3, [pc, #492]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a7a      	ldr	r2, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e02d      	b.n	8001682 <HAL_RCC_OscConfig+0x36e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x334>
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a75      	ldr	r2, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a72      	ldr	r2, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	e01c      	b.n	8001682 <HAL_RCC_OscConfig+0x36e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x356>
 8001650:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a6c      	ldr	r2, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a69      	ldr	r2, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e00b      	b.n	8001682 <HAL_RCC_OscConfig+0x36e>
 800166a:	4b67      	ldr	r3, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a66      	ldr	r2, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b64      	ldr	r3, [pc, #400]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a63      	ldr	r2, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d015      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff f9dd 	bl	8000a48 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f9d9 	bl	8000a48 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e0ab      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ee      	beq.n	8001692 <HAL_RCC_OscConfig+0x37e>
 80016b4:	e014      	b.n	80016e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f9c7 	bl	8000a48 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f9c3 	bl	8000a48 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e095      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d4:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a47      	ldr	r2, [pc, #284]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8081 	beq.w	80017fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d061      	beq.n	80017cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d146      	bne.n	800179e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_OscConfig+0x4fc>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff f997 	bl	8000a48 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff f993 	bl	8000a48 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e067      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d108      	bne.n	8001758 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	492d      	ldr	r1, [pc, #180]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a19      	ldr	r1, [r3, #32]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	430b      	orrs	r3, r1
 800176a:	4927      	ldr	r1, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x4fc>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff f967 	bl	8000a48 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff f963 	bl	8000a48 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e037      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x46a>
 800179c:	e02f      	b.n	80017fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_RCC_OscConfig+0x4fc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f950 	bl	8000a48 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f94c 	bl	8000a48 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e020      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x498>
 80017ca:	e018      	b.n	80017fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e013      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	40007000 	.word	0x40007000
 8001810:	42420060 	.word	0x42420060

08001814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0d0      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4965      	ldr	r1, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800187a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d040      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e073      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4936      	ldr	r1, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff f8a0 	bl	8000a48 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f89c 	bl	8000a48 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e053      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d210      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1cc>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fffe 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08003cb0 	.word	0x08003cb0
 80019e0:	20000004 	.word	0x20000004
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b490      	push	{r4, r7}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019f0:	1d3c      	adds	r4, r7, #4
 80019f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019f8:	f240 2301 	movw	r3, #513	; 0x201
 80019fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x40>
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x46>
 8001a26:	e02d      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2a:	623b      	str	r3, [r7, #32]
      break;
 8001a2c:	e02d      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0c5b      	lsrs	r3, r3, #17
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a66:	fb02 f203 	mul.w	r2, r2, r3
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	e004      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	623b      	str	r3, [r7, #32]
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a86:	623b      	str	r3, [r7, #32]
      break;
 8001a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc90      	pop	{r4, r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	08003c90 	.word	0x08003c90
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	003d0900 	.word	0x003d0900
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff2 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08003cc0 	.word	0x08003cc0

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffde 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	0adb      	lsrs	r3, r3, #11
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08003cc0 	.word	0x08003cc0

08001b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <RCC_Delay+0x34>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <RCC_Delay+0x38>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a5b      	lsrs	r3, r3, #9
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b2c:	bf00      	nop
  }
  while (Delay --);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <RCC_Delay+0x1c>
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000004 	.word	0x20000004
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d07d      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10d      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b82:	61d3      	str	r3, [r2, #28]
 8001b84:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b90:	2301      	movs	r3, #1
 8001b92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d118      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bac:	f7fe ff4c 	bl	8000a48 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb4:	f7fe ff48 	bl	8000a48 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e06d      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d02e      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d027      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d014      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7fe ff17 	bl	8000a48 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7fe ff13 	bl	8000a48 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e036      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ee      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4917      	ldr	r1, [pc, #92]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	4a13      	ldr	r2, [pc, #76]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	490b      	ldr	r1, [pc, #44]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4904      	ldr	r1, [pc, #16]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42420440 	.word	0x42420440

08001cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b08d      	sub	sp, #52	; 0x34
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001cc2:	f107 040c 	add.w	r4, r7, #12
 8001cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ccc:	f240 2301 	movw	r3, #513	; 0x201
 8001cd0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	f200 8090 	bhi.w	8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d04c      	beq.n	8001d94 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d07b      	beq.n	8001df8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d00:	e088      	b.n	8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d08:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8081 	beq.w	8001e18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d22:	4413      	add	r3, r2
 8001d24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d28:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d018      	beq.n	8001d66 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d34:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c5b      	lsrs	r3, r3, #17
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d42:	4413      	add	r3, r2
 8001d44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d54:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d64:	e004      	b.n	8001d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d82:	e049      	b.n	8001e18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          frequency = (pllclk * 2) / 3;
 8001d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d92:	e041      	b.n	8001e18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      temp_reg = RCC->BDCR;
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da4:	d108      	bne.n	8001db8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db6:	e01e      	b.n	8001df6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc2:	d109      	bne.n	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001dd0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd6:	e00e      	b.n	8001df6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001de2:	d11b      	bne.n	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        frequency = HSE_VALUE / 128U;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001df4:	e012      	b.n	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8001df6:	e011      	b.n	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001df8:	f7ff fe76 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0b9b      	lsrs	r3, r3, #14
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e12:	e004      	b.n	8001e1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8001e14:	bf00      	nop
 8001e16:	e002      	b.n	8001e1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8001e18:	bf00      	nop
 8001e1a:	e000      	b.n	8001e1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8001e1c:	bf00      	nop
    }
  }
  return (frequency);
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3734      	adds	r7, #52	; 0x34
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	08003ca0 	.word	0x08003ca0
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	003d0900 	.word	0x003d0900
 8001e38:	aaaaaaab 	.word	0xaaaaaaab
 8001e3c:	0001e848 	.word	0x0001e848

08001e40 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e084      	b.n	8001f60 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7c5b      	ldrb	r3, [r3, #17]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fbf6 	bl	8000658 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f87a 	bl	8001f6c <HAL_RTC_WaitForSynchro>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e06b      	b.n	8001f60 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f89c 	bl	8001fc6 <RTC_EnterInitMode>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2204      	movs	r2, #4
 8001e98:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e060      	b.n	8001f60 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0207 	bic.w	r2, r2, #7
 8001eac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <HAL_RTC_Init+0x128>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_RTC_Init+0x128>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RTC_Init+0x128>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4926      	ldr	r1, [pc, #152]	; (8001f68 <HAL_RTC_Init+0x128>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d003      	beq.n	8001ee6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e00e      	b.n	8001f04 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff fee6 	bl	8001cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001eec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e030      	b.n	8001f60 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 010f 	bic.w	r1, r3, #15
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c1a      	lsrs	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	b291      	uxth	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f870 	bl	8002016 <RTC_ExitInitMode>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00c      	b.n	8001f60 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40006c00 	.word	0x40006c00

08001f6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e01d      	b.n	8001fbe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0208 	bic.w	r2, r2, #8
 8001f90:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f92:	f7fe fd59 	bl	8000a48 <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f98:	e009      	b.n	8001fae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f9a:	f7fe fd55 	bl	8000a48 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa8:	d901      	bls.n	8001fae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e007      	b.n	8001fbe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ee      	beq.n	8001f9a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001fd2:	f7fe fd39 	bl	8000a48 <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fd8:	e009      	b.n	8001fee <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fda:	f7fe fd35 	bl	8000a48 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe8:	d901      	bls.n	8001fee <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e00f      	b.n	800200e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ee      	beq.n	8001fda <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0210 	orr.w	r2, r2, #16
 800200a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0210 	bic.w	r2, r2, #16
 8002030:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002032:	f7fe fd09 	bl	8000a48 <HAL_GetTick>
 8002036:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002038:	e009      	b.n	800204e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800203a:	f7fe fd05 	bl	8000a48 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002048:	d901      	bls.n	800204e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e007      	b.n	800205e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e076      	b.n	8002166 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d108      	bne.n	8002092 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002088:	d009      	beq.n	800209e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
 8002090:	e005      	b.n	800209e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7fe faf1 	bl	80006a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	ea42 0103 	orr.w	r1, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	0c1a      	lsrs	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f002 0204 	and.w	r2, r2, #4
 8002144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08c      	sub	sp, #48	; 0x30
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x26>
 8002190:	2302      	movs	r3, #2
 8002192:	e18a      	b.n	80024aa <HAL_SPI_TransmitReceive+0x33c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800219c:	f7fe fc54 	bl	8000a48 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00f      	beq.n	80021de <HAL_SPI_TransmitReceive+0x70>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c4:	d107      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x68>
 80021ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d003      	beq.n	80021de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021dc:	e15b      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x82>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x82>
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021f6:	e14e      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b04      	cmp	r3, #4
 8002202:	d003      	beq.n	800220c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2205      	movs	r2, #5
 8002208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d007      	beq.n	8002260 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002268:	d178      	bne.n	800235c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x10a>
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d166      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	1c9a      	adds	r2, r3, #2
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229c:	e053      	b.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d11b      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d113      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	1c9a      	adds	r2, r3, #2
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d119      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x1b8>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d014      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	b292      	uxth	r2, r2
 8002308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	1c9a      	adds	r2, r3, #2
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002326:	f7fe fb8f 	bl	8000a48 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002332:	429a      	cmp	r2, r3
 8002334:	d807      	bhi.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d003      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002344:	e0a7      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1a6      	bne.n	800229e <HAL_SPI_TransmitReceive+0x130>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1a1      	bne.n	800229e <HAL_SPI_TransmitReceive+0x130>
 800235a:	e07c      	b.n	8002456 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_TransmitReceive+0x1fc>
 8002364:	8b7b      	ldrh	r3, [r7, #26]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d16b      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002390:	e057      	b.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d11c      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d017      	beq.n	80023da <HAL_SPI_TransmitReceive+0x26c>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d114      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d119      	bne.n	800241c <HAL_SPI_TransmitReceive+0x2ae>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002418:	2301      	movs	r3, #1
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800241c:	f7fe fb14 	bl	8000a48 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002428:	429a      	cmp	r2, r3
 800242a:	d803      	bhi.n	8002434 <HAL_SPI_TransmitReceive+0x2c6>
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d102      	bne.n	800243a <HAL_SPI_TransmitReceive+0x2cc>
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002440:	e029      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1a2      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x224>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d19d      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f9b6 	bl	80027cc <SPI_EndRxTxTransaction>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002472:	e010      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	e000      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
    return;
 80024f6:	e0be      	b.n	8002676 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_SPI_IRQHandler+0x66>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	09db      	lsrs	r3, r3, #7
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
    return;
 8002518:	e0ad      	b.n	8002676 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_SPI_IRQHandler+0x80>
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a1 	beq.w	8002676 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 809a 	beq.w	8002676 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d023      	beq.n	8002596 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b03      	cmp	r3, #3
 8002558:	d011      	beq.n	800257e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	e00b      	b.n	8002596 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
        return;
 8002594:	e06f      	b.n	8002676 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d04f      	beq.n	8002674 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d104      	bne.n	8002600 <HAL_SPI_IRQHandler+0x14c>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d034      	beq.n	800266a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0203 	bic.w	r2, r2, #3
 800260e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d011      	beq.n	800263c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_SPI_IRQHandler+0x1c8>)
 800261e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fb4b 	bl	8000cc0 <HAL_DMA_Abort_IT>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002640:	2b00      	cmp	r3, #0
 8002642:	d016      	beq.n	8002672 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_SPI_IRQHandler+0x1c8>)
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fb35 	bl	8000cc0 <HAL_DMA_Abort_IT>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002668:	e003      	b.n	8002672 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f808 	bl	8002680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002670:	e000      	b.n	8002674 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002672:	bf00      	nop
    return;
 8002674:	bf00      	nop
  }
}
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	08002693 	.word	0x08002693

08002680 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff ffe7 	bl	8002680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026cc:	f7fe f9bc 	bl	8000a48 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026dc:	f7fe f9b4 	bl	8000a48 <HAL_GetTick>
 80026e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	0d1b      	lsrs	r3, r3, #20
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f2:	e054      	b.n	800279e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d050      	beq.n	800279e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026fc:	f7fe f9a4 	bl	8000a48 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	429a      	cmp	r2, r3
 800270a:	d902      	bls.n	8002712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d13d      	bne.n	800278e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272a:	d111      	bne.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002734:	d004      	beq.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d107      	bne.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002758:	d10f      	bne.n	800277a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e017      	b.n	80027be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3b01      	subs	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d19b      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004

080027cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff ff6a 	bl	80026bc <SPI_WaitFlagStateUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0220 	orr.w	r2, r3, #32
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e000      	b.n	8002800 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e041      	b.n	800289e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fd ff88 	bl	8000744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 fa26 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d122      	bne.n	8002902 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d11b      	bne.n	8002902 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f06f 0202 	mvn.w	r2, #2
 80028d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f9ba 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 80028ee:	e005      	b.n	80028fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f9ad 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9bc 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d122      	bne.n	8002956 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d11b      	bne.n	8002956 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f06f 0204 	mvn.w	r2, #4
 8002926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f990 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 8002942:	e005      	b.n	8002950 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f983 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f992 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b08      	cmp	r3, #8
 8002962:	d122      	bne.n	80029aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11b      	bne.n	80029aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f06f 0208 	mvn.w	r2, #8
 800297a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f966 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 8002996:	e005      	b.n	80029a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f959 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f968 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d122      	bne.n	80029fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d11b      	bne.n	80029fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0210 	mvn.w	r2, #16
 80029ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2208      	movs	r2, #8
 80029d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f93c 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 80029ea:	e005      	b.n	80029f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f92f 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f93e 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10e      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0201 	mvn.w	r2, #1
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f90a 	bl	8002c3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d10e      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa80 	bl	8002f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d10e      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d107      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f902 	bl	8002c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d10e      	bne.n	8002aae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d107      	bne.n	8002aae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0220 	mvn.w	r2, #32
 8002aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fa4b 	bl	8002f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_ConfigClockSource+0x18>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0b3      	b.n	8002c36 <HAL_TIM_ConfigClockSource+0x180>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b06:	d03e      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xd0>
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	f200 8087 	bhi.w	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	f000 8085 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d87f      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b1e:	2b70      	cmp	r3, #112	; 0x70
 8002b20:	d01a      	beq.n	8002b58 <HAL_TIM_ConfigClockSource+0xa2>
 8002b22:	2b70      	cmp	r3, #112	; 0x70
 8002b24:	d87b      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b26:	2b60      	cmp	r3, #96	; 0x60
 8002b28:	d050      	beq.n	8002bcc <HAL_TIM_ConfigClockSource+0x116>
 8002b2a:	2b60      	cmp	r3, #96	; 0x60
 8002b2c:	d877      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b2e:	2b50      	cmp	r3, #80	; 0x50
 8002b30:	d03c      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0xf6>
 8002b32:	2b50      	cmp	r3, #80	; 0x50
 8002b34:	d873      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d058      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0x136>
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d86f      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b3e:	2b30      	cmp	r3, #48	; 0x30
 8002b40:	d064      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0x156>
 8002b42:	2b30      	cmp	r3, #48	; 0x30
 8002b44:	d86b      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d060      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0x156>
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d867      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d05c      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0x156>
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d05a      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b56:	e062      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f000 f96f 	bl	8002e4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]
      break;
 8002b84:	e04e      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f000 f958 	bl	8002e4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba8:	609a      	str	r2, [r3, #8]
      break;
 8002baa:	e03b      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f000 f8cf 	bl	8002d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2150      	movs	r1, #80	; 0x50
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f926 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002bca:	e02b      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f000 f8ed 	bl	8002db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2160      	movs	r1, #96	; 0x60
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f916 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002bea:	e01b      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f000 f8af 	bl	8002d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2140      	movs	r1, #64	; 0x40
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f906 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002c0a:	e00b      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 f8fd 	bl	8002e16 <TIM_ITRx_SetConfig>
        break;
 8002c1c:	e002      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <TIM_Base_SetConfig+0xb8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x30>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x30>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <TIM_Base_SetConfig+0xbc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x30>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <TIM_Base_SetConfig+0xc0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <TIM_Base_SetConfig+0xb8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0x62>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0x62>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <TIM_Base_SetConfig+0xbc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0x62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <TIM_Base_SetConfig+0xc0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <TIM_Base_SetConfig+0xb8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d103      	bne.n	8002d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	615a      	str	r2, [r3, #20]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800

08002d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 030a 	bic.w	r3, r3, #10
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 0210 	bic.w	r2, r3, #16
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	031b      	lsls	r3, r3, #12
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f043 0307 	orr.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	021a      	lsls	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e046      	b.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d009      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10c      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800

08002f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e03f      	b.n	8002ffa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fbfc 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f905 	bl	80031bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b08a      	sub	sp, #40	; 0x28
 8003006:	af02      	add	r7, sp, #8
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	d17c      	bne.n	800311c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_UART_Transmit+0x2c>
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e075      	b.n	800311e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x3e>
 800303c:	2302      	movs	r3, #2
 800303e:	e06e      	b.n	800311e <HAL_UART_Transmit+0x11c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003056:	f7fd fcf7 	bl	8000a48 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d108      	bne.n	8003084 <HAL_UART_Transmit+0x82>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e003      	b.n	800308c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003094:	e02a      	b.n	80030ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f840 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e036      	b.n	800311e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	3302      	adds	r3, #2
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	e007      	b.n	80030de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3301      	adds	r3, #1
 80030dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1cf      	bne.n	8003096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2140      	movs	r1, #64	; 0x40
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f810 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e006      	b.n	800311e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	e02c      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d028      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0x30>
 8003146:	f7fd fc7f 	bl	8000a48 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d21d      	bcs.n	8003192 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003164:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d0c3      	beq.n	8003138 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f6:	f023 030c 	bic.w	r3, r3, #12
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	430b      	orrs	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <UART_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe fc60 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	e002      	b.n	8003232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7fe fc48 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8003230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	0119      	lsls	r1, r3, #4
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <UART_SetConfig+0x118>)
 800326a:	fba3 0302 	umull	r0, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2064      	movs	r0, #100	; 0x64
 8003272:	fb00 f303 	mul.w	r3, r0, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <UART_SetConfig+0x118>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	4419      	add	r1, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <UART_SetConfig+0x118>)
 80032a2:	fba3 0302 	umull	r0, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	440a      	add	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40013800 	.word	0x40013800
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032d8:	b084      	sub	sp, #16
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	f107 0014 	add.w	r0, r7, #20
 80032e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	b004      	add	sp, #16
 80032f6:	4770      	bx	lr

080032f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003300:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003304:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	b29b      	uxth	r3, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	b29b      	uxth	r3, r3
 8003316:	4013      	ands	r3, r2
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003344:	b084      	sub	sp, #16
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	f107 0014 	add.w	r0, r7, #20
 8003352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	b004      	add	sp, #16
 8003382:	4770      	bx	lr

08003384 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <__errno>:
 8003398:	4b01      	ldr	r3, [pc, #4]	; (80033a0 <__errno+0x8>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000010 	.word	0x20000010

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	2600      	movs	r6, #0
 80033a8:	4d0c      	ldr	r5, [pc, #48]	; (80033dc <__libc_init_array+0x38>)
 80033aa:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	f000 fc5c 	bl	8003c70 <_init>
 80033b8:	2600      	movs	r6, #0
 80033ba:	4d0a      	ldr	r5, [pc, #40]	; (80033e4 <__libc_init_array+0x40>)
 80033bc:	4c0a      	ldr	r4, [pc, #40]	; (80033e8 <__libc_init_array+0x44>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	08003cfc 	.word	0x08003cfc
 80033e0:	08003cfc 	.word	0x08003cfc
 80033e4:	08003cfc 	.word	0x08003cfc
 80033e8:	08003d00 	.word	0x08003d00

080033ec <memset>:
 80033ec:	4603      	mov	r3, r0
 80033ee:	4402      	add	r2, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <siprintf>:
 80033fc:	b40e      	push	{r1, r2, r3}
 80033fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003402:	b500      	push	{lr}
 8003404:	b09c      	sub	sp, #112	; 0x70
 8003406:	ab1d      	add	r3, sp, #116	; 0x74
 8003408:	9002      	str	r0, [sp, #8]
 800340a:	9006      	str	r0, [sp, #24]
 800340c:	9107      	str	r1, [sp, #28]
 800340e:	9104      	str	r1, [sp, #16]
 8003410:	4808      	ldr	r0, [pc, #32]	; (8003434 <siprintf+0x38>)
 8003412:	4909      	ldr	r1, [pc, #36]	; (8003438 <siprintf+0x3c>)
 8003414:	f853 2b04 	ldr.w	r2, [r3], #4
 8003418:	9105      	str	r1, [sp, #20]
 800341a:	6800      	ldr	r0, [r0, #0]
 800341c:	a902      	add	r1, sp, #8
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	f000 f868 	bl	80034f4 <_svfiprintf_r>
 8003424:	2200      	movs	r2, #0
 8003426:	9b02      	ldr	r3, [sp, #8]
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	b01c      	add	sp, #112	; 0x70
 800342c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003430:	b003      	add	sp, #12
 8003432:	4770      	bx	lr
 8003434:	20000010 	.word	0x20000010
 8003438:	ffff0208 	.word	0xffff0208

0800343c <__ssputs_r>:
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	688e      	ldr	r6, [r1, #8]
 8003442:	4682      	mov	sl, r0
 8003444:	429e      	cmp	r6, r3
 8003446:	460c      	mov	r4, r1
 8003448:	4690      	mov	r8, r2
 800344a:	461f      	mov	r7, r3
 800344c:	d838      	bhi.n	80034c0 <__ssputs_r+0x84>
 800344e:	898a      	ldrh	r2, [r1, #12]
 8003450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003454:	d032      	beq.n	80034bc <__ssputs_r+0x80>
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	6909      	ldr	r1, [r1, #16]
 800345a:	3301      	adds	r3, #1
 800345c:	eba5 0901 	sub.w	r9, r5, r1
 8003460:	6965      	ldr	r5, [r4, #20]
 8003462:	444b      	add	r3, r9
 8003464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800346c:	106d      	asrs	r5, r5, #1
 800346e:	429d      	cmp	r5, r3
 8003470:	bf38      	it	cc
 8003472:	461d      	movcc	r5, r3
 8003474:	0553      	lsls	r3, r2, #21
 8003476:	d531      	bpl.n	80034dc <__ssputs_r+0xa0>
 8003478:	4629      	mov	r1, r5
 800347a:	f000 fb53 	bl	8003b24 <_malloc_r>
 800347e:	4606      	mov	r6, r0
 8003480:	b950      	cbnz	r0, 8003498 <__ssputs_r+0x5c>
 8003482:	230c      	movs	r3, #12
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f8ca 3000 	str.w	r3, [sl]
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003492:	81a3      	strh	r3, [r4, #12]
 8003494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003498:	464a      	mov	r2, r9
 800349a:	6921      	ldr	r1, [r4, #16]
 800349c:	f000 face 	bl	8003a3c <memcpy>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	6126      	str	r6, [r4, #16]
 80034ae:	444e      	add	r6, r9
 80034b0:	6026      	str	r6, [r4, #0]
 80034b2:	463e      	mov	r6, r7
 80034b4:	6165      	str	r5, [r4, #20]
 80034b6:	eba5 0509 	sub.w	r5, r5, r9
 80034ba:	60a5      	str	r5, [r4, #8]
 80034bc:	42be      	cmp	r6, r7
 80034be:	d900      	bls.n	80034c2 <__ssputs_r+0x86>
 80034c0:	463e      	mov	r6, r7
 80034c2:	4632      	mov	r2, r6
 80034c4:	4641      	mov	r1, r8
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	f000 fac6 	bl	8003a58 <memmove>
 80034cc:	68a3      	ldr	r3, [r4, #8]
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	1b9b      	subs	r3, r3, r6
 80034d2:	4432      	add	r2, r6
 80034d4:	2000      	movs	r0, #0
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	6022      	str	r2, [r4, #0]
 80034da:	e7db      	b.n	8003494 <__ssputs_r+0x58>
 80034dc:	462a      	mov	r2, r5
 80034de:	f000 fb7b 	bl	8003bd8 <_realloc_r>
 80034e2:	4606      	mov	r6, r0
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d1e1      	bne.n	80034ac <__ssputs_r+0x70>
 80034e8:	4650      	mov	r0, sl
 80034ea:	6921      	ldr	r1, [r4, #16]
 80034ec:	f000 face 	bl	8003a8c <_free_r>
 80034f0:	e7c7      	b.n	8003482 <__ssputs_r+0x46>
	...

080034f4 <_svfiprintf_r>:
 80034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	4698      	mov	r8, r3
 80034fa:	898b      	ldrh	r3, [r1, #12]
 80034fc:	4607      	mov	r7, r0
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	460d      	mov	r5, r1
 8003502:	4614      	mov	r4, r2
 8003504:	b09d      	sub	sp, #116	; 0x74
 8003506:	d50e      	bpl.n	8003526 <_svfiprintf_r+0x32>
 8003508:	690b      	ldr	r3, [r1, #16]
 800350a:	b963      	cbnz	r3, 8003526 <_svfiprintf_r+0x32>
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	f000 fb09 	bl	8003b24 <_malloc_r>
 8003512:	6028      	str	r0, [r5, #0]
 8003514:	6128      	str	r0, [r5, #16]
 8003516:	b920      	cbnz	r0, 8003522 <_svfiprintf_r+0x2e>
 8003518:	230c      	movs	r3, #12
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	e0d1      	b.n	80036c6 <_svfiprintf_r+0x1d2>
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	616b      	str	r3, [r5, #20]
 8003526:	2300      	movs	r3, #0
 8003528:	9309      	str	r3, [sp, #36]	; 0x24
 800352a:	2320      	movs	r3, #32
 800352c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003530:	2330      	movs	r3, #48	; 0x30
 8003532:	f04f 0901 	mov.w	r9, #1
 8003536:	f8cd 800c 	str.w	r8, [sp, #12]
 800353a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036e0 <_svfiprintf_r+0x1ec>
 800353e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003542:	4623      	mov	r3, r4
 8003544:	469a      	mov	sl, r3
 8003546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800354a:	b10a      	cbz	r2, 8003550 <_svfiprintf_r+0x5c>
 800354c:	2a25      	cmp	r2, #37	; 0x25
 800354e:	d1f9      	bne.n	8003544 <_svfiprintf_r+0x50>
 8003550:	ebba 0b04 	subs.w	fp, sl, r4
 8003554:	d00b      	beq.n	800356e <_svfiprintf_r+0x7a>
 8003556:	465b      	mov	r3, fp
 8003558:	4622      	mov	r2, r4
 800355a:	4629      	mov	r1, r5
 800355c:	4638      	mov	r0, r7
 800355e:	f7ff ff6d 	bl	800343c <__ssputs_r>
 8003562:	3001      	adds	r0, #1
 8003564:	f000 80aa 	beq.w	80036bc <_svfiprintf_r+0x1c8>
 8003568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800356a:	445a      	add	r2, fp
 800356c:	9209      	str	r2, [sp, #36]	; 0x24
 800356e:	f89a 3000 	ldrb.w	r3, [sl]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80a2 	beq.w	80036bc <_svfiprintf_r+0x1c8>
 8003578:	2300      	movs	r3, #0
 800357a:	f04f 32ff 	mov.w	r2, #4294967295
 800357e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003582:	f10a 0a01 	add.w	sl, sl, #1
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	9307      	str	r3, [sp, #28]
 800358a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800358e:	931a      	str	r3, [sp, #104]	; 0x68
 8003590:	4654      	mov	r4, sl
 8003592:	2205      	movs	r2, #5
 8003594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003598:	4851      	ldr	r0, [pc, #324]	; (80036e0 <_svfiprintf_r+0x1ec>)
 800359a:	f000 fa41 	bl	8003a20 <memchr>
 800359e:	9a04      	ldr	r2, [sp, #16]
 80035a0:	b9d8      	cbnz	r0, 80035da <_svfiprintf_r+0xe6>
 80035a2:	06d0      	lsls	r0, r2, #27
 80035a4:	bf44      	itt	mi
 80035a6:	2320      	movmi	r3, #32
 80035a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ac:	0711      	lsls	r1, r2, #28
 80035ae:	bf44      	itt	mi
 80035b0:	232b      	movmi	r3, #43	; 0x2b
 80035b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035b6:	f89a 3000 	ldrb.w	r3, [sl]
 80035ba:	2b2a      	cmp	r3, #42	; 0x2a
 80035bc:	d015      	beq.n	80035ea <_svfiprintf_r+0xf6>
 80035be:	4654      	mov	r4, sl
 80035c0:	2000      	movs	r0, #0
 80035c2:	f04f 0c0a 	mov.w	ip, #10
 80035c6:	9a07      	ldr	r2, [sp, #28]
 80035c8:	4621      	mov	r1, r4
 80035ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ce:	3b30      	subs	r3, #48	; 0x30
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d94e      	bls.n	8003672 <_svfiprintf_r+0x17e>
 80035d4:	b1b0      	cbz	r0, 8003604 <_svfiprintf_r+0x110>
 80035d6:	9207      	str	r2, [sp, #28]
 80035d8:	e014      	b.n	8003604 <_svfiprintf_r+0x110>
 80035da:	eba0 0308 	sub.w	r3, r0, r8
 80035de:	fa09 f303 	lsl.w	r3, r9, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	46a2      	mov	sl, r4
 80035e6:	9304      	str	r3, [sp, #16]
 80035e8:	e7d2      	b.n	8003590 <_svfiprintf_r+0x9c>
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	1d19      	adds	r1, r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bfbb      	ittet	lt
 80035f6:	425b      	neglt	r3, r3
 80035f8:	f042 0202 	orrlt.w	r2, r2, #2
 80035fc:	9307      	strge	r3, [sp, #28]
 80035fe:	9307      	strlt	r3, [sp, #28]
 8003600:	bfb8      	it	lt
 8003602:	9204      	strlt	r2, [sp, #16]
 8003604:	7823      	ldrb	r3, [r4, #0]
 8003606:	2b2e      	cmp	r3, #46	; 0x2e
 8003608:	d10c      	bne.n	8003624 <_svfiprintf_r+0x130>
 800360a:	7863      	ldrb	r3, [r4, #1]
 800360c:	2b2a      	cmp	r3, #42	; 0x2a
 800360e:	d135      	bne.n	800367c <_svfiprintf_r+0x188>
 8003610:	9b03      	ldr	r3, [sp, #12]
 8003612:	3402      	adds	r4, #2
 8003614:	1d1a      	adds	r2, r3, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	9203      	str	r2, [sp, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfb8      	it	lt
 800361e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003622:	9305      	str	r3, [sp, #20]
 8003624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036f0 <_svfiprintf_r+0x1fc>
 8003628:	2203      	movs	r2, #3
 800362a:	4650      	mov	r0, sl
 800362c:	7821      	ldrb	r1, [r4, #0]
 800362e:	f000 f9f7 	bl	8003a20 <memchr>
 8003632:	b140      	cbz	r0, 8003646 <_svfiprintf_r+0x152>
 8003634:	2340      	movs	r3, #64	; 0x40
 8003636:	eba0 000a 	sub.w	r0, r0, sl
 800363a:	fa03 f000 	lsl.w	r0, r3, r0
 800363e:	9b04      	ldr	r3, [sp, #16]
 8003640:	3401      	adds	r4, #1
 8003642:	4303      	orrs	r3, r0
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364a:	2206      	movs	r2, #6
 800364c:	4825      	ldr	r0, [pc, #148]	; (80036e4 <_svfiprintf_r+0x1f0>)
 800364e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003652:	f000 f9e5 	bl	8003a20 <memchr>
 8003656:	2800      	cmp	r0, #0
 8003658:	d038      	beq.n	80036cc <_svfiprintf_r+0x1d8>
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <_svfiprintf_r+0x1f4>)
 800365c:	bb1b      	cbnz	r3, 80036a6 <_svfiprintf_r+0x1b2>
 800365e:	9b03      	ldr	r3, [sp, #12]
 8003660:	3307      	adds	r3, #7
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	3308      	adds	r3, #8
 8003668:	9303      	str	r3, [sp, #12]
 800366a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366c:	4433      	add	r3, r6
 800366e:	9309      	str	r3, [sp, #36]	; 0x24
 8003670:	e767      	b.n	8003542 <_svfiprintf_r+0x4e>
 8003672:	460c      	mov	r4, r1
 8003674:	2001      	movs	r0, #1
 8003676:	fb0c 3202 	mla	r2, ip, r2, r3
 800367a:	e7a5      	b.n	80035c8 <_svfiprintf_r+0xd4>
 800367c:	2300      	movs	r3, #0
 800367e:	f04f 0c0a 	mov.w	ip, #10
 8003682:	4619      	mov	r1, r3
 8003684:	3401      	adds	r4, #1
 8003686:	9305      	str	r3, [sp, #20]
 8003688:	4620      	mov	r0, r4
 800368a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800368e:	3a30      	subs	r2, #48	; 0x30
 8003690:	2a09      	cmp	r2, #9
 8003692:	d903      	bls.n	800369c <_svfiprintf_r+0x1a8>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0c5      	beq.n	8003624 <_svfiprintf_r+0x130>
 8003698:	9105      	str	r1, [sp, #20]
 800369a:	e7c3      	b.n	8003624 <_svfiprintf_r+0x130>
 800369c:	4604      	mov	r4, r0
 800369e:	2301      	movs	r3, #1
 80036a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80036a4:	e7f0      	b.n	8003688 <_svfiprintf_r+0x194>
 80036a6:	ab03      	add	r3, sp, #12
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	462a      	mov	r2, r5
 80036ac:	4638      	mov	r0, r7
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <_svfiprintf_r+0x1f8>)
 80036b0:	a904      	add	r1, sp, #16
 80036b2:	f3af 8000 	nop.w
 80036b6:	1c42      	adds	r2, r0, #1
 80036b8:	4606      	mov	r6, r0
 80036ba:	d1d6      	bne.n	800366a <_svfiprintf_r+0x176>
 80036bc:	89ab      	ldrh	r3, [r5, #12]
 80036be:	065b      	lsls	r3, r3, #25
 80036c0:	f53f af2c 	bmi.w	800351c <_svfiprintf_r+0x28>
 80036c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036c6:	b01d      	add	sp, #116	; 0x74
 80036c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036cc:	ab03      	add	r3, sp, #12
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	462a      	mov	r2, r5
 80036d2:	4638      	mov	r0, r7
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <_svfiprintf_r+0x1f8>)
 80036d6:	a904      	add	r1, sp, #16
 80036d8:	f000 f87c 	bl	80037d4 <_printf_i>
 80036dc:	e7eb      	b.n	80036b6 <_svfiprintf_r+0x1c2>
 80036de:	bf00      	nop
 80036e0:	08003cc8 	.word	0x08003cc8
 80036e4:	08003cd2 	.word	0x08003cd2
 80036e8:	00000000 	.word	0x00000000
 80036ec:	0800343d 	.word	0x0800343d
 80036f0:	08003cce 	.word	0x08003cce

080036f4 <_printf_common>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	4616      	mov	r6, r2
 80036fa:	4699      	mov	r9, r3
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	690b      	ldr	r3, [r1, #16]
 8003700:	4607      	mov	r7, r0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfb8      	it	lt
 8003706:	4613      	movlt	r3, r2
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	b10a      	cbz	r2, 800371a <_printf_common+0x26>
 8003716:	3301      	adds	r3, #1
 8003718:	6033      	str	r3, [r6, #0]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	6833      	ldrmi	r3, [r6, #0]
 8003722:	3302      	addmi	r3, #2
 8003724:	6033      	strmi	r3, [r6, #0]
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	f015 0506 	ands.w	r5, r5, #6
 800372c:	d106      	bne.n	800373c <_printf_common+0x48>
 800372e:	f104 0a19 	add.w	sl, r4, #25
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	6832      	ldr	r2, [r6, #0]
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	42ab      	cmp	r3, r5
 800373a:	dc28      	bgt.n	800378e <_printf_common+0x9a>
 800373c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003740:	1e13      	subs	r3, r2, #0
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	bf18      	it	ne
 8003746:	2301      	movne	r3, #1
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d42d      	bmi.n	80037a8 <_printf_common+0xb4>
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d020      	beq.n	800379c <_printf_common+0xa8>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	68e5      	ldr	r5, [r4, #12]
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf18      	it	ne
 8003766:	2500      	movne	r5, #0
 8003768:	6832      	ldr	r2, [r6, #0]
 800376a:	f04f 0600 	mov.w	r6, #0
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	bf08      	it	eq
 8003772:	1aad      	subeq	r5, r5, r2
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf08      	it	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	4293      	cmp	r3, r2
 800377e:	bfc4      	itt	gt
 8003780:	1a9b      	subgt	r3, r3, r2
 8003782:	18ed      	addgt	r5, r5, r3
 8003784:	341a      	adds	r4, #26
 8003786:	42b5      	cmp	r5, r6
 8003788:	d11a      	bne.n	80037c0 <_printf_common+0xcc>
 800378a:	2000      	movs	r0, #0
 800378c:	e008      	b.n	80037a0 <_printf_common+0xac>
 800378e:	2301      	movs	r3, #1
 8003790:	4652      	mov	r2, sl
 8003792:	4649      	mov	r1, r9
 8003794:	4638      	mov	r0, r7
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d103      	bne.n	80037a4 <_printf_common+0xb0>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	3501      	adds	r5, #1
 80037a6:	e7c4      	b.n	8003732 <_printf_common+0x3e>
 80037a8:	2030      	movs	r0, #48	; 0x30
 80037aa:	18e1      	adds	r1, r4, r3
 80037ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037b6:	4422      	add	r2, r4
 80037b8:	3302      	adds	r3, #2
 80037ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037be:	e7c5      	b.n	800374c <_printf_common+0x58>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4622      	mov	r2, r4
 80037c4:	4649      	mov	r1, r9
 80037c6:	4638      	mov	r0, r7
 80037c8:	47c0      	blx	r8
 80037ca:	3001      	adds	r0, #1
 80037cc:	d0e6      	beq.n	800379c <_printf_common+0xa8>
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7d9      	b.n	8003786 <_printf_common+0x92>
	...

080037d4 <_printf_i>:
 80037d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	460c      	mov	r4, r1
 80037da:	7e27      	ldrb	r7, [r4, #24]
 80037dc:	4691      	mov	r9, r2
 80037de:	2f78      	cmp	r7, #120	; 0x78
 80037e0:	4680      	mov	r8, r0
 80037e2:	469a      	mov	sl, r3
 80037e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037ea:	d807      	bhi.n	80037fc <_printf_i+0x28>
 80037ec:	2f62      	cmp	r7, #98	; 0x62
 80037ee:	d80a      	bhi.n	8003806 <_printf_i+0x32>
 80037f0:	2f00      	cmp	r7, #0
 80037f2:	f000 80d9 	beq.w	80039a8 <_printf_i+0x1d4>
 80037f6:	2f58      	cmp	r7, #88	; 0x58
 80037f8:	f000 80a4 	beq.w	8003944 <_printf_i+0x170>
 80037fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003804:	e03a      	b.n	800387c <_printf_i+0xa8>
 8003806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800380a:	2b15      	cmp	r3, #21
 800380c:	d8f6      	bhi.n	80037fc <_printf_i+0x28>
 800380e:	a001      	add	r0, pc, #4	; (adr r0, 8003814 <_printf_i+0x40>)
 8003810:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003814:	0800386d 	.word	0x0800386d
 8003818:	08003881 	.word	0x08003881
 800381c:	080037fd 	.word	0x080037fd
 8003820:	080037fd 	.word	0x080037fd
 8003824:	080037fd 	.word	0x080037fd
 8003828:	080037fd 	.word	0x080037fd
 800382c:	08003881 	.word	0x08003881
 8003830:	080037fd 	.word	0x080037fd
 8003834:	080037fd 	.word	0x080037fd
 8003838:	080037fd 	.word	0x080037fd
 800383c:	080037fd 	.word	0x080037fd
 8003840:	0800398f 	.word	0x0800398f
 8003844:	080038b1 	.word	0x080038b1
 8003848:	08003971 	.word	0x08003971
 800384c:	080037fd 	.word	0x080037fd
 8003850:	080037fd 	.word	0x080037fd
 8003854:	080039b1 	.word	0x080039b1
 8003858:	080037fd 	.word	0x080037fd
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080037fd 	.word	0x080037fd
 8003864:	080037fd 	.word	0x080037fd
 8003868:	08003979 	.word	0x08003979
 800386c:	680b      	ldr	r3, [r1, #0]
 800386e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	600a      	str	r2, [r1, #0]
 8003878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387c:	2301      	movs	r3, #1
 800387e:	e0a4      	b.n	80039ca <_printf_i+0x1f6>
 8003880:	6825      	ldr	r5, [r4, #0]
 8003882:	6808      	ldr	r0, [r1, #0]
 8003884:	062e      	lsls	r6, r5, #24
 8003886:	f100 0304 	add.w	r3, r0, #4
 800388a:	d50a      	bpl.n	80038a2 <_printf_i+0xce>
 800388c:	6805      	ldr	r5, [r0, #0]
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	2d00      	cmp	r5, #0
 8003892:	da03      	bge.n	800389c <_printf_i+0xc8>
 8003894:	232d      	movs	r3, #45	; 0x2d
 8003896:	426d      	negs	r5, r5
 8003898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800389c:	230a      	movs	r3, #10
 800389e:	485e      	ldr	r0, [pc, #376]	; (8003a18 <_printf_i+0x244>)
 80038a0:	e019      	b.n	80038d6 <_printf_i+0x102>
 80038a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038a6:	6805      	ldr	r5, [r0, #0]
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	bf18      	it	ne
 80038ac:	b22d      	sxthne	r5, r5
 80038ae:	e7ef      	b.n	8003890 <_printf_i+0xbc>
 80038b0:	680b      	ldr	r3, [r1, #0]
 80038b2:	6825      	ldr	r5, [r4, #0]
 80038b4:	1d18      	adds	r0, r3, #4
 80038b6:	6008      	str	r0, [r1, #0]
 80038b8:	0628      	lsls	r0, r5, #24
 80038ba:	d501      	bpl.n	80038c0 <_printf_i+0xec>
 80038bc:	681d      	ldr	r5, [r3, #0]
 80038be:	e002      	b.n	80038c6 <_printf_i+0xf2>
 80038c0:	0669      	lsls	r1, r5, #25
 80038c2:	d5fb      	bpl.n	80038bc <_printf_i+0xe8>
 80038c4:	881d      	ldrh	r5, [r3, #0]
 80038c6:	2f6f      	cmp	r7, #111	; 0x6f
 80038c8:	bf0c      	ite	eq
 80038ca:	2308      	moveq	r3, #8
 80038cc:	230a      	movne	r3, #10
 80038ce:	4852      	ldr	r0, [pc, #328]	; (8003a18 <_printf_i+0x244>)
 80038d0:	2100      	movs	r1, #0
 80038d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038d6:	6866      	ldr	r6, [r4, #4]
 80038d8:	2e00      	cmp	r6, #0
 80038da:	bfa8      	it	ge
 80038dc:	6821      	ldrge	r1, [r4, #0]
 80038de:	60a6      	str	r6, [r4, #8]
 80038e0:	bfa4      	itt	ge
 80038e2:	f021 0104 	bicge.w	r1, r1, #4
 80038e6:	6021      	strge	r1, [r4, #0]
 80038e8:	b90d      	cbnz	r5, 80038ee <_printf_i+0x11a>
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	d04d      	beq.n	800398a <_printf_i+0x1b6>
 80038ee:	4616      	mov	r6, r2
 80038f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80038f4:	fb03 5711 	mls	r7, r3, r1, r5
 80038f8:	5dc7      	ldrb	r7, [r0, r7]
 80038fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038fe:	462f      	mov	r7, r5
 8003900:	42bb      	cmp	r3, r7
 8003902:	460d      	mov	r5, r1
 8003904:	d9f4      	bls.n	80038f0 <_printf_i+0x11c>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d10b      	bne.n	8003922 <_printf_i+0x14e>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	07df      	lsls	r7, r3, #31
 800390e:	d508      	bpl.n	8003922 <_printf_i+0x14e>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	6861      	ldr	r1, [r4, #4]
 8003914:	4299      	cmp	r1, r3
 8003916:	bfde      	ittt	le
 8003918:	2330      	movle	r3, #48	; 0x30
 800391a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800391e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003922:	1b92      	subs	r2, r2, r6
 8003924:	6122      	str	r2, [r4, #16]
 8003926:	464b      	mov	r3, r9
 8003928:	4621      	mov	r1, r4
 800392a:	4640      	mov	r0, r8
 800392c:	f8cd a000 	str.w	sl, [sp]
 8003930:	aa03      	add	r2, sp, #12
 8003932:	f7ff fedf 	bl	80036f4 <_printf_common>
 8003936:	3001      	adds	r0, #1
 8003938:	d14c      	bne.n	80039d4 <_printf_i+0x200>
 800393a:	f04f 30ff 	mov.w	r0, #4294967295
 800393e:	b004      	add	sp, #16
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	4834      	ldr	r0, [pc, #208]	; (8003a18 <_printf_i+0x244>)
 8003946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800394a:	680e      	ldr	r6, [r1, #0]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003952:	061f      	lsls	r7, r3, #24
 8003954:	600e      	str	r6, [r1, #0]
 8003956:	d514      	bpl.n	8003982 <_printf_i+0x1ae>
 8003958:	07d9      	lsls	r1, r3, #31
 800395a:	bf44      	itt	mi
 800395c:	f043 0320 	orrmi.w	r3, r3, #32
 8003960:	6023      	strmi	r3, [r4, #0]
 8003962:	b91d      	cbnz	r5, 800396c <_printf_i+0x198>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	f023 0320 	bic.w	r3, r3, #32
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	2310      	movs	r3, #16
 800396e:	e7af      	b.n	80038d0 <_printf_i+0xfc>
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f043 0320 	orr.w	r3, r3, #32
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	2378      	movs	r3, #120	; 0x78
 800397a:	4828      	ldr	r0, [pc, #160]	; (8003a1c <_printf_i+0x248>)
 800397c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003980:	e7e3      	b.n	800394a <_printf_i+0x176>
 8003982:	065e      	lsls	r6, r3, #25
 8003984:	bf48      	it	mi
 8003986:	b2ad      	uxthmi	r5, r5
 8003988:	e7e6      	b.n	8003958 <_printf_i+0x184>
 800398a:	4616      	mov	r6, r2
 800398c:	e7bb      	b.n	8003906 <_printf_i+0x132>
 800398e:	680b      	ldr	r3, [r1, #0]
 8003990:	6826      	ldr	r6, [r4, #0]
 8003992:	1d1d      	adds	r5, r3, #4
 8003994:	6960      	ldr	r0, [r4, #20]
 8003996:	600d      	str	r5, [r1, #0]
 8003998:	0635      	lsls	r5, r6, #24
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	d501      	bpl.n	80039a2 <_printf_i+0x1ce>
 800399e:	6018      	str	r0, [r3, #0]
 80039a0:	e002      	b.n	80039a8 <_printf_i+0x1d4>
 80039a2:	0671      	lsls	r1, r6, #25
 80039a4:	d5fb      	bpl.n	800399e <_printf_i+0x1ca>
 80039a6:	8018      	strh	r0, [r3, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	4616      	mov	r6, r2
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	e7ba      	b.n	8003926 <_printf_i+0x152>
 80039b0:	680b      	ldr	r3, [r1, #0]
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	600a      	str	r2, [r1, #0]
 80039b6:	681e      	ldr	r6, [r3, #0]
 80039b8:	2100      	movs	r1, #0
 80039ba:	4630      	mov	r0, r6
 80039bc:	6862      	ldr	r2, [r4, #4]
 80039be:	f000 f82f 	bl	8003a20 <memchr>
 80039c2:	b108      	cbz	r0, 80039c8 <_printf_i+0x1f4>
 80039c4:	1b80      	subs	r0, r0, r6
 80039c6:	6060      	str	r0, [r4, #4]
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	6123      	str	r3, [r4, #16]
 80039cc:	2300      	movs	r3, #0
 80039ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d2:	e7a8      	b.n	8003926 <_printf_i+0x152>
 80039d4:	4632      	mov	r2, r6
 80039d6:	4649      	mov	r1, r9
 80039d8:	4640      	mov	r0, r8
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	47d0      	blx	sl
 80039de:	3001      	adds	r0, #1
 80039e0:	d0ab      	beq.n	800393a <_printf_i+0x166>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	079b      	lsls	r3, r3, #30
 80039e6:	d413      	bmi.n	8003a10 <_printf_i+0x23c>
 80039e8:	68e0      	ldr	r0, [r4, #12]
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	4298      	cmp	r0, r3
 80039ee:	bfb8      	it	lt
 80039f0:	4618      	movlt	r0, r3
 80039f2:	e7a4      	b.n	800393e <_printf_i+0x16a>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4632      	mov	r2, r6
 80039f8:	4649      	mov	r1, r9
 80039fa:	4640      	mov	r0, r8
 80039fc:	47d0      	blx	sl
 80039fe:	3001      	adds	r0, #1
 8003a00:	d09b      	beq.n	800393a <_printf_i+0x166>
 8003a02:	3501      	adds	r5, #1
 8003a04:	68e3      	ldr	r3, [r4, #12]
 8003a06:	9903      	ldr	r1, [sp, #12]
 8003a08:	1a5b      	subs	r3, r3, r1
 8003a0a:	42ab      	cmp	r3, r5
 8003a0c:	dcf2      	bgt.n	80039f4 <_printf_i+0x220>
 8003a0e:	e7eb      	b.n	80039e8 <_printf_i+0x214>
 8003a10:	2500      	movs	r5, #0
 8003a12:	f104 0619 	add.w	r6, r4, #25
 8003a16:	e7f5      	b.n	8003a04 <_printf_i+0x230>
 8003a18:	08003cd9 	.word	0x08003cd9
 8003a1c:	08003cea 	.word	0x08003cea

08003a20 <memchr>:
 8003a20:	4603      	mov	r3, r0
 8003a22:	b510      	push	{r4, lr}
 8003a24:	b2c9      	uxtb	r1, r1
 8003a26:	4402      	add	r2, r0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	d101      	bne.n	8003a32 <memchr+0x12>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e003      	b.n	8003a3a <memchr+0x1a>
 8003a32:	7804      	ldrb	r4, [r0, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	428c      	cmp	r4, r1
 8003a38:	d1f6      	bne.n	8003a28 <memchr+0x8>
 8003a3a:	bd10      	pop	{r4, pc}

08003a3c <memcpy>:
 8003a3c:	440a      	add	r2, r1
 8003a3e:	4291      	cmp	r1, r2
 8003a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a44:	d100      	bne.n	8003a48 <memcpy+0xc>
 8003a46:	4770      	bx	lr
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a4e:	4291      	cmp	r1, r2
 8003a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a54:	d1f9      	bne.n	8003a4a <memcpy+0xe>
 8003a56:	bd10      	pop	{r4, pc}

08003a58 <memmove>:
 8003a58:	4288      	cmp	r0, r1
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	eb01 0402 	add.w	r4, r1, r2
 8003a60:	d902      	bls.n	8003a68 <memmove+0x10>
 8003a62:	4284      	cmp	r4, r0
 8003a64:	4623      	mov	r3, r4
 8003a66:	d807      	bhi.n	8003a78 <memmove+0x20>
 8003a68:	1e43      	subs	r3, r0, #1
 8003a6a:	42a1      	cmp	r1, r4
 8003a6c:	d008      	beq.n	8003a80 <memmove+0x28>
 8003a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a76:	e7f8      	b.n	8003a6a <memmove+0x12>
 8003a78:	4601      	mov	r1, r0
 8003a7a:	4402      	add	r2, r0
 8003a7c:	428a      	cmp	r2, r1
 8003a7e:	d100      	bne.n	8003a82 <memmove+0x2a>
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a8a:	e7f7      	b.n	8003a7c <memmove+0x24>

08003a8c <_free_r>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	4605      	mov	r5, r0
 8003a90:	2900      	cmp	r1, #0
 8003a92:	d043      	beq.n	8003b1c <_free_r+0x90>
 8003a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a98:	1f0c      	subs	r4, r1, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bfb8      	it	lt
 8003a9e:	18e4      	addlt	r4, r4, r3
 8003aa0:	f000 f8d0 	bl	8003c44 <__malloc_lock>
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <_free_r+0x94>)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	b933      	cbnz	r3, 8003aba <_free_r+0x2e>
 8003aac:	6063      	str	r3, [r4, #4]
 8003aae:	6014      	str	r4, [r2, #0]
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ab6:	f000 b8cb 	b.w	8003c50 <__malloc_unlock>
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	d90a      	bls.n	8003ad4 <_free_r+0x48>
 8003abe:	6821      	ldr	r1, [r4, #0]
 8003ac0:	1862      	adds	r2, r4, r1
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	bf01      	itttt	eq
 8003ac6:	681a      	ldreq	r2, [r3, #0]
 8003ac8:	685b      	ldreq	r3, [r3, #4]
 8003aca:	1852      	addeq	r2, r2, r1
 8003acc:	6022      	streq	r2, [r4, #0]
 8003ace:	6063      	str	r3, [r4, #4]
 8003ad0:	6004      	str	r4, [r0, #0]
 8003ad2:	e7ed      	b.n	8003ab0 <_free_r+0x24>
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b10b      	cbz	r3, 8003ade <_free_r+0x52>
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	d9fa      	bls.n	8003ad4 <_free_r+0x48>
 8003ade:	6811      	ldr	r1, [r2, #0]
 8003ae0:	1850      	adds	r0, r2, r1
 8003ae2:	42a0      	cmp	r0, r4
 8003ae4:	d10b      	bne.n	8003afe <_free_r+0x72>
 8003ae6:	6820      	ldr	r0, [r4, #0]
 8003ae8:	4401      	add	r1, r0
 8003aea:	1850      	adds	r0, r2, r1
 8003aec:	4283      	cmp	r3, r0
 8003aee:	6011      	str	r1, [r2, #0]
 8003af0:	d1de      	bne.n	8003ab0 <_free_r+0x24>
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4401      	add	r1, r0
 8003af8:	6011      	str	r1, [r2, #0]
 8003afa:	6053      	str	r3, [r2, #4]
 8003afc:	e7d8      	b.n	8003ab0 <_free_r+0x24>
 8003afe:	d902      	bls.n	8003b06 <_free_r+0x7a>
 8003b00:	230c      	movs	r3, #12
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	e7d4      	b.n	8003ab0 <_free_r+0x24>
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	1821      	adds	r1, r4, r0
 8003b0a:	428b      	cmp	r3, r1
 8003b0c:	bf01      	itttt	eq
 8003b0e:	6819      	ldreq	r1, [r3, #0]
 8003b10:	685b      	ldreq	r3, [r3, #4]
 8003b12:	1809      	addeq	r1, r1, r0
 8003b14:	6021      	streq	r1, [r4, #0]
 8003b16:	6063      	str	r3, [r4, #4]
 8003b18:	6054      	str	r4, [r2, #4]
 8003b1a:	e7c9      	b.n	8003ab0 <_free_r+0x24>
 8003b1c:	bd38      	pop	{r3, r4, r5, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000094 	.word	0x20000094

08003b24 <_malloc_r>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	1ccd      	adds	r5, r1, #3
 8003b28:	f025 0503 	bic.w	r5, r5, #3
 8003b2c:	3508      	adds	r5, #8
 8003b2e:	2d0c      	cmp	r5, #12
 8003b30:	bf38      	it	cc
 8003b32:	250c      	movcc	r5, #12
 8003b34:	2d00      	cmp	r5, #0
 8003b36:	4606      	mov	r6, r0
 8003b38:	db01      	blt.n	8003b3e <_malloc_r+0x1a>
 8003b3a:	42a9      	cmp	r1, r5
 8003b3c:	d903      	bls.n	8003b46 <_malloc_r+0x22>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	2000      	movs	r0, #0
 8003b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b46:	f000 f87d 	bl	8003c44 <__malloc_lock>
 8003b4a:	4921      	ldr	r1, [pc, #132]	; (8003bd0 <_malloc_r+0xac>)
 8003b4c:	680a      	ldr	r2, [r1, #0]
 8003b4e:	4614      	mov	r4, r2
 8003b50:	b99c      	cbnz	r4, 8003b7a <_malloc_r+0x56>
 8003b52:	4f20      	ldr	r7, [pc, #128]	; (8003bd4 <_malloc_r+0xb0>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b923      	cbnz	r3, 8003b62 <_malloc_r+0x3e>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 f862 	bl	8003c24 <_sbrk_r>
 8003b60:	6038      	str	r0, [r7, #0]
 8003b62:	4629      	mov	r1, r5
 8003b64:	4630      	mov	r0, r6
 8003b66:	f000 f85d 	bl	8003c24 <_sbrk_r>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	d123      	bne.n	8003bb6 <_malloc_r+0x92>
 8003b6e:	230c      	movs	r3, #12
 8003b70:	4630      	mov	r0, r6
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	f000 f86c 	bl	8003c50 <__malloc_unlock>
 8003b78:	e7e3      	b.n	8003b42 <_malloc_r+0x1e>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	1b5b      	subs	r3, r3, r5
 8003b7e:	d417      	bmi.n	8003bb0 <_malloc_r+0x8c>
 8003b80:	2b0b      	cmp	r3, #11
 8003b82:	d903      	bls.n	8003b8c <_malloc_r+0x68>
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	441c      	add	r4, r3
 8003b88:	6025      	str	r5, [r4, #0]
 8003b8a:	e004      	b.n	8003b96 <_malloc_r+0x72>
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	42a2      	cmp	r2, r4
 8003b90:	bf0c      	ite	eq
 8003b92:	600b      	streq	r3, [r1, #0]
 8003b94:	6053      	strne	r3, [r2, #4]
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 f85a 	bl	8003c50 <__malloc_unlock>
 8003b9c:	f104 000b 	add.w	r0, r4, #11
 8003ba0:	1d23      	adds	r3, r4, #4
 8003ba2:	f020 0007 	bic.w	r0, r0, #7
 8003ba6:	1ac2      	subs	r2, r0, r3
 8003ba8:	d0cc      	beq.n	8003b44 <_malloc_r+0x20>
 8003baa:	1a1b      	subs	r3, r3, r0
 8003bac:	50a3      	str	r3, [r4, r2]
 8003bae:	e7c9      	b.n	8003b44 <_malloc_r+0x20>
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	6864      	ldr	r4, [r4, #4]
 8003bb4:	e7cc      	b.n	8003b50 <_malloc_r+0x2c>
 8003bb6:	1cc4      	adds	r4, r0, #3
 8003bb8:	f024 0403 	bic.w	r4, r4, #3
 8003bbc:	42a0      	cmp	r0, r4
 8003bbe:	d0e3      	beq.n	8003b88 <_malloc_r+0x64>
 8003bc0:	1a21      	subs	r1, r4, r0
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f82e 	bl	8003c24 <_sbrk_r>
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d1dd      	bne.n	8003b88 <_malloc_r+0x64>
 8003bcc:	e7cf      	b.n	8003b6e <_malloc_r+0x4a>
 8003bce:	bf00      	nop
 8003bd0:	20000094 	.word	0x20000094
 8003bd4:	20000098 	.word	0x20000098

08003bd8 <_realloc_r>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	4607      	mov	r7, r0
 8003bdc:	4614      	mov	r4, r2
 8003bde:	460e      	mov	r6, r1
 8003be0:	b921      	cbnz	r1, 8003bec <_realloc_r+0x14>
 8003be2:	4611      	mov	r1, r2
 8003be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003be8:	f7ff bf9c 	b.w	8003b24 <_malloc_r>
 8003bec:	b922      	cbnz	r2, 8003bf8 <_realloc_r+0x20>
 8003bee:	f7ff ff4d 	bl	8003a8c <_free_r>
 8003bf2:	4625      	mov	r5, r4
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf8:	f000 f830 	bl	8003c5c <_malloc_usable_size_r>
 8003bfc:	42a0      	cmp	r0, r4
 8003bfe:	d20f      	bcs.n	8003c20 <_realloc_r+0x48>
 8003c00:	4621      	mov	r1, r4
 8003c02:	4638      	mov	r0, r7
 8003c04:	f7ff ff8e 	bl	8003b24 <_malloc_r>
 8003c08:	4605      	mov	r5, r0
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0f2      	beq.n	8003bf4 <_realloc_r+0x1c>
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4622      	mov	r2, r4
 8003c12:	f7ff ff13 	bl	8003a3c <memcpy>
 8003c16:	4631      	mov	r1, r6
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f7ff ff37 	bl	8003a8c <_free_r>
 8003c1e:	e7e9      	b.n	8003bf4 <_realloc_r+0x1c>
 8003c20:	4635      	mov	r5, r6
 8003c22:	e7e7      	b.n	8003bf4 <_realloc_r+0x1c>

08003c24 <_sbrk_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	2300      	movs	r3, #0
 8003c28:	4d05      	ldr	r5, [pc, #20]	; (8003c40 <_sbrk_r+0x1c>)
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fc fe50 	bl	80008d4 <_sbrk>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_sbrk_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_sbrk_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200004d4 	.word	0x200004d4

08003c44 <__malloc_lock>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__malloc_lock+0x8>)
 8003c46:	f000 b811 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	200004dc 	.word	0x200004dc

08003c50 <__malloc_unlock>:
 8003c50:	4801      	ldr	r0, [pc, #4]	; (8003c58 <__malloc_unlock+0x8>)
 8003c52:	f000 b80c 	b.w	8003c6e <__retarget_lock_release_recursive>
 8003c56:	bf00      	nop
 8003c58:	200004dc 	.word	0x200004dc

08003c5c <_malloc_usable_size_r>:
 8003c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c60:	1f18      	subs	r0, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bfbc      	itt	lt
 8003c66:	580b      	ldrlt	r3, [r1, r0]
 8003c68:	18c0      	addlt	r0, r0, r3
 8003c6a:	4770      	bx	lr

08003c6c <__retarget_lock_acquire_recursive>:
 8003c6c:	4770      	bx	lr

08003c6e <__retarget_lock_release_recursive>:
 8003c6e:	4770      	bx	lr

08003c70 <_init>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr

08003c7c <_fini>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr
