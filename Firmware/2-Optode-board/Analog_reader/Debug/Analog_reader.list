
Analog_reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a0  080026a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026a0  080026a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a0  080026a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08002718  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002718  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000864c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001926  00000000  00000000  000286e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001665b  00000000  00000000  0002b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000901d  00000000  00000000  000416c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fe3  00000000  00000000  0004a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc6c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a8  00000000  00000000  000cc718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002604 	.word	0x08002604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002604 	.word	0x08002604

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 faca 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f84e 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8e8 	bl	800033c <MX_GPIO_Init>
  MX_SPI1_Init();
 800016c:	f000 f886 	bl	800027c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8ba 	bl	80002e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uart_buf_len = sprintf(uart_buf, "Timer starting ...\r\n");
 8000174:	491b      	ldr	r1, [pc, #108]	; (80001e4 <main+0x88>)
 8000176:	481c      	ldr	r0, [pc, #112]	; (80001e8 <main+0x8c>)
 8000178:	f001 fe0a 	bl	8001d90 <siprintf>
 800017c:	4603      	mov	r3, r0
 800017e:	4a1b      	ldr	r2, [pc, #108]	; (80001ec <main+0x90>)
 8000180:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000182:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0x90>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	b29a      	uxth	r2, r3
 8000188:	2364      	movs	r3, #100	; 0x64
 800018a:	4917      	ldr	r1, [pc, #92]	; (80001e8 <main+0x8c>)
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <main+0x94>)
 800018e:	f001 fc63 	bl	8001a58 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000192:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000196:	f000 fb11 	bl	80007bc <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800019a:	2201      	movs	r2, #1
 800019c:	2101      	movs	r1, #1
 800019e:	4815      	ldr	r0, [pc, #84]	; (80001f4 <main+0x98>)
 80001a0:	f000 fe38 	bl	8000e14 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sample_counter++;
 80001a4:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0x9c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <main+0x9c>)
 80001ac:	6013      	str	r3, [r2, #0]
	  sprintf(msg, "counter %hu\r\n", sample_counter);
 80001ae:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <main+0x9c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	461a      	mov	r2, r3
 80001b4:	4911      	ldr	r1, [pc, #68]	; (80001fc <main+0xa0>)
 80001b6:	4812      	ldr	r0, [pc, #72]	; (8000200 <main+0xa4>)
 80001b8:	f001 fdea 	bl	8001d90 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80001bc:	4810      	ldr	r0, [pc, #64]	; (8000200 <main+0xa4>)
 80001be:	f7ff ffc5 	bl	800014c <strlen>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	490d      	ldr	r1, [pc, #52]	; (8000200 <main+0xa4>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <main+0x94>)
 80001ce:	f001 fc43 	bl	8001a58 <HAL_UART_Transmit>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80001d2:	2101      	movs	r1, #1
 80001d4:	4807      	ldr	r0, [pc, #28]	; (80001f4 <main+0x98>)
 80001d6:	f000 fe35 	bl	8000e44 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001de:	f000 faed 	bl	80007bc <HAL_Delay>
  {
 80001e2:	e7df      	b.n	80001a4 <main+0x48>
 80001e4:	0800261c 	.word	0x0800261c
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	2000009c 	.word	0x2000009c
 80001f0:	20000168 	.word	0x20000168
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	08002634 	.word	0x08002634
 8000200:	200000a0 	.word	0x200000a0

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fdb4 	bl	8001d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022e:	2310      	movs	r3, #16
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000232:	2300      	movs	r3, #0
 8000234:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fe1c 	bl	8000e78 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000246:	f000 f8ef 	bl	8000428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800024e:	2300      	movs	r3, #0
 8000250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f888 	bl	8001378 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026e:	f000 f8db 	bl	8000428 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_SPI1_Init+0x64>)
 8000282:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <MX_SPI1_Init+0x68>)
 8000284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_SPI1_Init+0x64>)
 8000288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800028c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_SPI1_Init+0x64>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_SPI1_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_SPI1_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002c8:	220a      	movs	r2, #10
 80002ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_SPI1_Init+0x64>)
 80002ce:	f001 f9ef 	bl	80016b0 <HAL_SPI_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002d8:	f000 f8a6 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000110 	.word	0x20000110
 80002e4:	40013000 	.word	0x40013000

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART2_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000320:	f001 fb4d 	bl	80019be <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f87d 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000168 	.word	0x20000168
 8000338:	40004400 	.word	0x40004400

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <MX_GPIO_Init+0xe0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a31      	ldr	r2, [pc, #196]	; (800041c <MX_GPIO_Init+0xe0>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b2f      	ldr	r3, [pc, #188]	; (800041c <MX_GPIO_Init+0xe0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b2c      	ldr	r3, [pc, #176]	; (800041c <MX_GPIO_Init+0xe0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a2b      	ldr	r2, [pc, #172]	; (800041c <MX_GPIO_Init+0xe0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b29      	ldr	r3, [pc, #164]	; (800041c <MX_GPIO_Init+0xe0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <MX_GPIO_Init+0xe0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a25      	ldr	r2, [pc, #148]	; (800041c <MX_GPIO_Init+0xe0>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <MX_GPIO_Init+0xe0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000398:	4b20      	ldr	r3, [pc, #128]	; (800041c <MX_GPIO_Init+0xe0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1f      	ldr	r2, [pc, #124]	; (800041c <MX_GPIO_Init+0xe0>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <MX_GPIO_Init+0xe0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0308 	and.w	r3, r3, #8
 80003ac:	603b      	str	r3, [r7, #0]
 80003ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|SPI1_NSS_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2111      	movs	r1, #17
 80003b4:	481a      	ldr	r0, [pc, #104]	; (8000420 <MX_GPIO_Init+0xe4>)
 80003b6:	f000 fd2d 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2150      	movs	r1, #80	; 0x50
 80003be:	4819      	ldr	r0, [pc, #100]	; (8000424 <MX_GPIO_Init+0xe8>)
 80003c0:	f000 fd28 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|SPI1_NSS_Pin;
 80003c4:	2311      	movs	r3, #17
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4811      	ldr	r0, [pc, #68]	; (8000420 <MX_GPIO_Init+0xe4>)
 80003dc:	f000 fb96 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_val_Pin PB5 */
  GPIO_InitStruct.Pin = Button_val_Pin|GPIO_PIN_5;
 80003e0:	2328      	movs	r3, #40	; 0x28
 80003e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	480c      	ldr	r0, [pc, #48]	; (8000424 <MX_GPIO_Init+0xe8>)
 80003f4:	f000 fb8a 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PB6 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_6;
 80003f8:	2350      	movs	r3, #80	; 0x50
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2302      	movs	r3, #2
 8000406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_GPIO_Init+0xe8>)
 8000410:	f000 fb7c 	bl	8000b0c <HAL_GPIO_Init>

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800
 8000424:	40010c00 	.word	0x40010c00

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <HAL_SPI_MspInit+0x98>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d137      	bne.n	8000528 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <HAL_SPI_MspInit+0x9c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <HAL_SPI_MspInit+0x9c>)
 80004be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <HAL_SPI_MspInit+0x9c>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_SPI_MspInit+0x9c>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a17      	ldr	r2, [pc, #92]	; (8000534 <HAL_SPI_MspInit+0x9c>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_SPI_MspInit+0x9c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	2302      	movs	r3, #2
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f0:	2303      	movs	r3, #3
 80004f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <HAL_SPI_MspInit+0xa0>)
 80004fc:	f000 fb06 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000500:	2340      	movs	r3, #64	; 0x40
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <HAL_SPI_MspInit+0xa0>)
 8000514:	f000 fafa 	bl	8000b0c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2023      	movs	r0, #35	; 0x23
 800051e:	f000 fa48 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000522:	2023      	movs	r0, #35	; 0x23
 8000524:	f000 fa61 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40013000 	.word	0x40013000
 8000534:	40021000 	.word	0x40021000
 8000538:	40010800 	.word	0x40010800

0800053c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <HAL_UART_MspInit+0x88>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d12f      	bne.n	80005bc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <HAL_UART_MspInit+0x8c>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <HAL_UART_MspInit+0x8c>)
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	61d3      	str	r3, [r2, #28]
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <HAL_UART_MspInit+0x8c>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <HAL_UART_MspInit+0x8c>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <HAL_UART_MspInit+0x8c>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <HAL_UART_MspInit+0x8c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800058c:	2304      	movs	r3, #4
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	480b      	ldr	r0, [pc, #44]	; (80005cc <HAL_UART_MspInit+0x90>)
 80005a0:	f000 fab4 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005a4:	2308      	movs	r3, #8
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <HAL_UART_MspInit+0x90>)
 80005b8:	f000 faa8 	bl	8000b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40004400 	.word	0x40004400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000616:	f000 f8b5 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <SPI1_IRQHandler+0x10>)
 8000626:	f001 f8c7 	bl	80017b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000110 	.word	0x20000110

08000634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <_sbrk+0x5c>)
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <_sbrk+0x60>)
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <_sbrk+0x64>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <_sbrk+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d207      	bcs.n	8000674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000664:	f001 fb62 	bl	8001d2c <__errno>
 8000668:	4603      	mov	r3, r0
 800066a:	220c      	movs	r2, #12
 800066c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	e009      	b.n	8000688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <_sbrk+0x64>)
 8000684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20005000 	.word	0x20005000
 8000694:	00000400 	.word	0x00000400
 8000698:	20000090 	.word	0x20000090
 800069c:	200001c0 	.word	0x200001c0

080006a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006d2:	f7ff ffe5 	bl	80006a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d6:	f001 fb2f 	bl	8001d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fd3f 	bl	800015c <main>
  bx lr
 80006de:	4770      	bx	lr
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006e8:	080026a8 	.word	0x080026a8
  ldr r2, =_sbss
 80006ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006f0:	200001c0 	.word	0x200001c0

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f947 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	200f      	movs	r0, #15
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fe8e 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f95f 	bl	8000a06 <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f000 f927 	bl	80009b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <HAL_IncTick+0x20>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200001ac 	.word	0x200001ac

080007a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	200001ac 	.word	0x200001ac

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffe0 	bl	80007a8 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008

08000804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <__NVIC_GetPriorityGrouping+0x18>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	f003 0307 	and.w	r3, r3, #7
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	2b00      	cmp	r3, #0
 8000878:	db0b      	blt.n	8000892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 021f 	and.w	r2, r3, #31
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <__NVIC_EnableIRQ+0x34>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	2001      	movs	r0, #1
 800088a:	fa00 f202 	lsl.w	r2, r0, r2
 800088e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff90 	bl	80008a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff2d 	bl	8000804 <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff42 	bl	800084c <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff90 	bl	80008f4 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5f 	bl	80008a0 <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff35 	bl	8000868 <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffa2 	bl	8000958 <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d005      	beq.n	8000a42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2204      	movs	r2, #4
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e051      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 020e 	bic.w	r2, r2, #14
 8000a50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_DMA_Abort_IT+0xd0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d029      	beq.n	8000ac0 <HAL_DMA_Abort_IT+0xa0>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <HAL_DMA_Abort_IT+0xd4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d022      	beq.n	8000abc <HAL_DMA_Abort_IT+0x9c>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_DMA_Abort_IT+0xd8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d01a      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x96>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <HAL_DMA_Abort_IT+0xdc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d012      	beq.n	8000ab0 <HAL_DMA_Abort_IT+0x90>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_DMA_Abort_IT+0xe0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d00a      	beq.n	8000aaa <HAL_DMA_Abort_IT+0x8a>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <HAL_DMA_Abort_IT+0xe4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d102      	bne.n	8000aa4 <HAL_DMA_Abort_IT+0x84>
 8000a9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aa2:	e00e      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa8:	e00b      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	e008      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	e005      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aba:	e002      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000abc:	2310      	movs	r3, #16
 8000abe:	e000      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_DMA_Abort_IT+0xe8>)
 8000ac4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	4798      	blx	r3
    } 
  }
  return status;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40020008 	.word	0x40020008
 8000af4:	4002001c 	.word	0x4002001c
 8000af8:	40020030 	.word	0x40020030
 8000afc:	40020044 	.word	0x40020044
 8000b00:	40020058 	.word	0x40020058
 8000b04:	4002006c 	.word	0x4002006c
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e169      	b.n	8000df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8158 	bne.w	8000dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a9a      	ldr	r2, [pc, #616]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a90      	ldr	r2, [pc, #576]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a79      	ldr	r2, [pc, #484]	; (8000dc0 <HAL_GPIO_Init+0x2b4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80b1 	beq.w	8000dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x1ec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1e0>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e004      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfc:	f002 0203 	and.w	r2, r2, #3
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	4093      	lsls	r3, r2
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0a:	492f      	ldr	r1, [pc, #188]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	492c      	ldr	r1, [pc, #176]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4928      	ldr	r1, [pc, #160]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	491e      	ldr	r1, [pc, #120]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	4918      	ldr	r1, [pc, #96]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	608b      	str	r3, [r1, #8]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4914      	ldr	r1, [pc, #80]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d021      	beq.n	8000de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	490e      	ldr	r1, [pc, #56]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	60cb      	str	r3, [r1, #12]
 8000da8:	e021      	b.n	8000dee <HAL_GPIO_Init+0x2e2>
 8000daa:	bf00      	nop
 8000dac:	10320000 	.word	0x10320000
 8000db0:	10310000 	.word	0x10310000
 8000db4:	10220000 	.word	0x10220000
 8000db8:	10210000 	.word	0x10210000
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4909      	ldr	r1, [pc, #36]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3301      	adds	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae8e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	372c      	adds	r7, #44	; 0x2c
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	041a      	lsls	r2, r3, #16
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43d9      	mvns	r1, r3
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	400b      	ands	r3, r1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e26c      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8087 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e98:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d00c      	beq.n	8000ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea4:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d112      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	4b89      	ldr	r3, [pc, #548]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d06c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d168      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e246      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x76>
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a7f      	ldr	r2, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e02e      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7a      	ldr	r2, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b78      	ldr	r3, [pc, #480]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a77      	ldr	r2, [pc, #476]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e01d      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0xbc>
 8000f1a:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f34:	4b6b      	ldr	r3, [pc, #428]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc28 	bl	80007a8 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc24 	bl	80007a8 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1fa      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe4>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc14 	bl	80007a8 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fc10 	bl	80007a8 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1e6      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x10c>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d063      	beq.n	800107a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d11c      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e1ba      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4939      	ldr	r1, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	e03a      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fbc9 	bl	80007a8 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fbc5 	bl	80007a8 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e19b      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fba8 	bl	80007a8 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105c:	f7ff fba4 	bl	80007a8 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e17a      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03a      	beq.n	80010fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d019      	beq.n	80010c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fb88 	bl	80007a8 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fb84 	bl	80007a8 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e15a      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 fada 	bl	8001674 <RCC_Delay>
 80010c0:	e01c      	b.n	80010fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fb6e 	bl	80007a8 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ce:	e00f      	b.n	80010f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fb6a 	bl	80007a8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d908      	bls.n	80010f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e140      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000
 80010ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b9e      	ldr	r3, [pc, #632]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e9      	bne.n	80010d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a6 	beq.w	8001256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b94      	ldr	r3, [pc, #592]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a93      	ldr	r2, [pc, #588]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b91      	ldr	r3, [pc, #580]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4b8e      	ldr	r3, [pc, #568]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a8a      	ldr	r2, [pc, #552]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb2b 	bl	80007a8 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff fb27 	bl	80007a8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0fd      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4b81      	ldr	r3, [pc, #516]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x312>
 800117c:	4b7b      	ldr	r3, [pc, #492]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a7a      	ldr	r2, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e02d      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x334>
 8001192:	4b76      	ldr	r3, [pc, #472]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a75      	ldr	r2, [pc, #468]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b73      	ldr	r3, [pc, #460]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a72      	ldr	r2, [pc, #456]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e01c      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x356>
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a6c      	ldr	r2, [pc, #432]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e00b      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a66      	ldr	r2, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b64      	ldr	r3, [pc, #400]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a63      	ldr	r2, [pc, #396]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fadb 	bl	80007a8 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fad7 	bl	80007a8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0ab      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ee      	beq.n	80011f6 <HAL_RCC_OscConfig+0x37e>
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fac5 	bl	80007a8 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fac1 	bl	80007a8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e095      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ee      	bne.n	8001222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a47      	ldr	r2, [pc, #284]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8081 	beq.w	8001362 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d061      	beq.n	8001330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d146      	bne.n	8001302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x4fc>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fa95 	bl	80007a8 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fa91 	bl	80007a8 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e067      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d108      	bne.n	80012bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	492d      	ldr	r1, [pc, #180]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a19      	ldr	r1, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	430b      	orrs	r3, r1
 80012ce:	4927      	ldr	r1, [pc, #156]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x4fc>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fa65 	bl	80007a8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fa61 	bl	80007a8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e037      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46a>
 8001300:	e02f      	b.n	8001362 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_RCC_OscConfig+0x4fc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fa4e 	bl	80007a8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fa4a 	bl	80007a8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e020      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x498>
 800132e:	e018      	b.n	8001362 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e013      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	429a      	cmp	r2, r3
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
 8001374:	42420060 	.word	0x42420060

08001378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0d0      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d910      	bls.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4965      	ldr	r1, [pc, #404]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b8      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	494d      	ldr	r1, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d040      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07f      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e073      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e06b      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4936      	ldr	r1, [pc, #216]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff f99e 	bl	80007a8 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff f99a 	bl	80007a8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e053      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d210      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4922      	ldr	r1, [pc, #136]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e032      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4916      	ldr	r1, [pc, #88]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001506:	f000 f821 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490a      	ldr	r1, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1cc>)
 8001520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1d0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f8fc 	bl	8000724 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	08002654 	.word	0x08002654
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b490      	push	{r4, r7}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001554:	1d3c      	adds	r4, r7, #4
 8001556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800155c:	f240 2301 	movw	r3, #513	; 0x201
 8001560:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d002      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x40>
 8001586:	2b08      	cmp	r3, #8
 8001588:	d003      	beq.n	8001592 <HAL_RCC_GetSysClockFreq+0x46>
 800158a:	e02d      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 800158e:	623b      	str	r3, [r7, #32]
      break;
 8001590:	e02d      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800159e:	4413      	add	r3, r2
 80015a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0c5b      	lsrs	r3, r3, #17
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015be:	4413      	add	r3, r2
 80015c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ca:	fb02 f203 	mul.w	r2, r2, r3
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e004      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	623b      	str	r3, [r7, #32]
      break;
 80015e6:	e002      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ea:	623b      	str	r3, [r7, #32]
      break;
 80015ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc90      	pop	{r4, r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	08002644 	.word	0x08002644
 8001600:	40021000 	.word	0x40021000
 8001604:	00f42400 	.word	0x00f42400
 8001608:	003d0900 	.word	0x003d0900
 800160c:	007a1200 	.word	0x007a1200

08001610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_RCC_GetHCLKFreq+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001628:	f7ff fff2 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4903      	ldr	r1, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	08002664 	.word	0x08002664

0800164c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001650:	f7ff ffde 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 8001654:	4602      	mov	r2, r0
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0adb      	lsrs	r3, r3, #11
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	4903      	ldr	r1, [pc, #12]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001662:	5ccb      	ldrb	r3, [r1, r3]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	08002664 	.word	0x08002664

08001674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <RCC_Delay+0x34>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <RCC_Delay+0x38>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a5b      	lsrs	r3, r3, #9
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001690:	bf00      	nop
  }
  while (Delay --);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	60fa      	str	r2, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <RCC_Delay+0x1c>
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000000 	.word	0x20000000
 80016ac:	10624dd3 	.word	0x10624dd3

080016b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e076      	b.n	80017b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d108      	bne.n	80016dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016d2:	d009      	beq.n	80016e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
 80016da:	e005      	b.n	80016e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe fec8 	bl	8000498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800171e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176c:	ea42 0103 	orr.w	r1, r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	0c1a      	lsrs	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f002 0204 	and.w	r2, r2, #4
 800178e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	099b      	lsrs	r3, r3, #6
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10f      	bne.n	80017fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00a      	beq.n	80017fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
    return;
 80017fa:	e0be      	b.n	800197a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <HAL_SPI_IRQHandler+0x66>
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	09db      	lsrs	r3, r3, #7
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
    return;
 800181c:	e0ad      	b.n	800197a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_SPI_IRQHandler+0x80>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80a1 	beq.w	800197a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 809a 	beq.w	800197a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d023      	beq.n	800189a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b03      	cmp	r3, #3
 800185c:	d011      	beq.n	8001882 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f043 0204 	orr.w	r2, r3, #4
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	e00b      	b.n	800189a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
        return;
 8001898:	e06f      	b.n	800197a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d014      	beq.n	80018d0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d04f      	beq.n	8001978 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80018e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d104      	bne.n	8001904 <HAL_SPI_IRQHandler+0x14c>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d034      	beq.n	800196e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0203 	bic.w	r2, r2, #3
 8001912:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d011      	beq.n	8001940 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_SPI_IRQHandler+0x1c8>)
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff f879 	bl	8000a20 <HAL_DMA_Abort_IT>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	2b00      	cmp	r3, #0
 8001946:	d016      	beq.n	8001976 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_SPI_IRQHandler+0x1c8>)
 800194e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f863 	bl	8000a20 <HAL_DMA_Abort_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800196c:	e003      	b.n	8001976 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f808 	bl	8001984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001974:	e000      	b.n	8001978 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001976:	bf00      	nop
    return;
 8001978:	bf00      	nop
  }
}
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08001997 	.word	0x08001997

08001984 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ffe7 	bl	8001984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e03f      	b.n	8001a50 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d106      	bne.n	80019ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7fe fda9 	bl	800053c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2224      	movs	r2, #36	; 0x24
 80019ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f904 	bl	8001c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d17c      	bne.n	8001b72 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <HAL_UART_Transmit+0x2c>
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e075      	b.n	8001b74 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_UART_Transmit+0x3e>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e06e      	b.n	8001b74 <HAL_UART_Transmit+0x11c>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2221      	movs	r2, #33	; 0x21
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aac:	f7fe fe7c 	bl	80007a8 <HAL_GetTick>
 8001ab0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac6:	d108      	bne.n	8001ada <HAL_UART_Transmit+0x82>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e003      	b.n	8001ae2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001aea:	e02a      	b.n	8001b42 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2200      	movs	r2, #0
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f840 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e036      	b.n	8001b74 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10b      	bne.n	8001b24 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	3302      	adds	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	e007      	b.n	8001b34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1cf      	bne.n	8001aec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2140      	movs	r1, #64	; 0x40
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f810 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e006      	b.n	8001b74 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b8c:	e02c      	b.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d028      	beq.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <UART_WaitOnFlagUntilTimeout+0x30>
 8001b9c:	f7fe fe04 	bl	80007a8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d21d      	bcs.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e00f      	b.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d0c3      	beq.n	8001b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c4a:	f023 030c 	bic.w	r3, r3, #12
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <UART_SetConfig+0x114>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d103      	bne.n	8001c80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c78:	f7ff fce8 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	e002      	b.n	8001c86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c80:	f7ff fcd0 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8001c84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009a      	lsls	r2, r3, #2
 8001c90:	441a      	add	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <UART_SetConfig+0x118>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	0119      	lsls	r1, r3, #4
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	009a      	lsls	r2, r3, #2
 8001cb0:	441a      	add	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <UART_SetConfig+0x118>)
 8001cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2064      	movs	r0, #100	; 0x64
 8001cc6:	fb00 f303 	mul.w	r3, r0, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	3332      	adds	r3, #50	; 0x32
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <UART_SetConfig+0x118>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	4419      	add	r1, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <UART_SetConfig+0x118>)
 8001cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2064      	movs	r0, #100	; 0x64
 8001cfe:	fb00 f303 	mul.w	r3, r0, r3
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	3332      	adds	r3, #50	; 0x32
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <UART_SetConfig+0x118>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	440a      	add	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40013800 	.word	0x40013800
 8001d28:	51eb851f 	.word	0x51eb851f

08001d2c <__errno>:
 8001d2c:	4b01      	ldr	r3, [pc, #4]	; (8001d34 <__errno+0x8>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c

08001d38 <__libc_init_array>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	2600      	movs	r6, #0
 8001d3c:	4d0c      	ldr	r5, [pc, #48]	; (8001d70 <__libc_init_array+0x38>)
 8001d3e:	4c0d      	ldr	r4, [pc, #52]	; (8001d74 <__libc_init_array+0x3c>)
 8001d40:	1b64      	subs	r4, r4, r5
 8001d42:	10a4      	asrs	r4, r4, #2
 8001d44:	42a6      	cmp	r6, r4
 8001d46:	d109      	bne.n	8001d5c <__libc_init_array+0x24>
 8001d48:	f000 fc5c 	bl	8002604 <_init>
 8001d4c:	2600      	movs	r6, #0
 8001d4e:	4d0a      	ldr	r5, [pc, #40]	; (8001d78 <__libc_init_array+0x40>)
 8001d50:	4c0a      	ldr	r4, [pc, #40]	; (8001d7c <__libc_init_array+0x44>)
 8001d52:	1b64      	subs	r4, r4, r5
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	42a6      	cmp	r6, r4
 8001d58:	d105      	bne.n	8001d66 <__libc_init_array+0x2e>
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
 8001d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d60:	4798      	blx	r3
 8001d62:	3601      	adds	r6, #1
 8001d64:	e7ee      	b.n	8001d44 <__libc_init_array+0xc>
 8001d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d6a:	4798      	blx	r3
 8001d6c:	3601      	adds	r6, #1
 8001d6e:	e7f2      	b.n	8001d56 <__libc_init_array+0x1e>
 8001d70:	080026a0 	.word	0x080026a0
 8001d74:	080026a0 	.word	0x080026a0
 8001d78:	080026a0 	.word	0x080026a0
 8001d7c:	080026a4 	.word	0x080026a4

08001d80 <memset>:
 8001d80:	4603      	mov	r3, r0
 8001d82:	4402      	add	r2, r0
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d100      	bne.n	8001d8a <memset+0xa>
 8001d88:	4770      	bx	lr
 8001d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d8e:	e7f9      	b.n	8001d84 <memset+0x4>

08001d90 <siprintf>:
 8001d90:	b40e      	push	{r1, r2, r3}
 8001d92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001d96:	b500      	push	{lr}
 8001d98:	b09c      	sub	sp, #112	; 0x70
 8001d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8001d9c:	9002      	str	r0, [sp, #8]
 8001d9e:	9006      	str	r0, [sp, #24]
 8001da0:	9107      	str	r1, [sp, #28]
 8001da2:	9104      	str	r1, [sp, #16]
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <siprintf+0x38>)
 8001da6:	4909      	ldr	r1, [pc, #36]	; (8001dcc <siprintf+0x3c>)
 8001da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dac:	9105      	str	r1, [sp, #20]
 8001dae:	6800      	ldr	r0, [r0, #0]
 8001db0:	a902      	add	r1, sp, #8
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	f000 f868 	bl	8001e88 <_svfiprintf_r>
 8001db8:	2200      	movs	r2, #0
 8001dba:	9b02      	ldr	r3, [sp, #8]
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	b01c      	add	sp, #112	; 0x70
 8001dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dc4:	b003      	add	sp, #12
 8001dc6:	4770      	bx	lr
 8001dc8:	2000000c 	.word	0x2000000c
 8001dcc:	ffff0208 	.word	0xffff0208

08001dd0 <__ssputs_r>:
 8001dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd4:	688e      	ldr	r6, [r1, #8]
 8001dd6:	4682      	mov	sl, r0
 8001dd8:	429e      	cmp	r6, r3
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4690      	mov	r8, r2
 8001dde:	461f      	mov	r7, r3
 8001de0:	d838      	bhi.n	8001e54 <__ssputs_r+0x84>
 8001de2:	898a      	ldrh	r2, [r1, #12]
 8001de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001de8:	d032      	beq.n	8001e50 <__ssputs_r+0x80>
 8001dea:	6825      	ldr	r5, [r4, #0]
 8001dec:	6909      	ldr	r1, [r1, #16]
 8001dee:	3301      	adds	r3, #1
 8001df0:	eba5 0901 	sub.w	r9, r5, r1
 8001df4:	6965      	ldr	r5, [r4, #20]
 8001df6:	444b      	add	r3, r9
 8001df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e00:	106d      	asrs	r5, r5, #1
 8001e02:	429d      	cmp	r5, r3
 8001e04:	bf38      	it	cc
 8001e06:	461d      	movcc	r5, r3
 8001e08:	0553      	lsls	r3, r2, #21
 8001e0a:	d531      	bpl.n	8001e70 <__ssputs_r+0xa0>
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f000 fb53 	bl	80024b8 <_malloc_r>
 8001e12:	4606      	mov	r6, r0
 8001e14:	b950      	cbnz	r0, 8001e2c <__ssputs_r+0x5c>
 8001e16:	230c      	movs	r3, #12
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f8ca 3000 	str.w	r3, [sl]
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e26:	81a3      	strh	r3, [r4, #12]
 8001e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2c:	464a      	mov	r2, r9
 8001e2e:	6921      	ldr	r1, [r4, #16]
 8001e30:	f000 face 	bl	80023d0 <memcpy>
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	6126      	str	r6, [r4, #16]
 8001e42:	444e      	add	r6, r9
 8001e44:	6026      	str	r6, [r4, #0]
 8001e46:	463e      	mov	r6, r7
 8001e48:	6165      	str	r5, [r4, #20]
 8001e4a:	eba5 0509 	sub.w	r5, r5, r9
 8001e4e:	60a5      	str	r5, [r4, #8]
 8001e50:	42be      	cmp	r6, r7
 8001e52:	d900      	bls.n	8001e56 <__ssputs_r+0x86>
 8001e54:	463e      	mov	r6, r7
 8001e56:	4632      	mov	r2, r6
 8001e58:	4641      	mov	r1, r8
 8001e5a:	6820      	ldr	r0, [r4, #0]
 8001e5c:	f000 fac6 	bl	80023ec <memmove>
 8001e60:	68a3      	ldr	r3, [r4, #8]
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	1b9b      	subs	r3, r3, r6
 8001e66:	4432      	add	r2, r6
 8001e68:	2000      	movs	r0, #0
 8001e6a:	60a3      	str	r3, [r4, #8]
 8001e6c:	6022      	str	r2, [r4, #0]
 8001e6e:	e7db      	b.n	8001e28 <__ssputs_r+0x58>
 8001e70:	462a      	mov	r2, r5
 8001e72:	f000 fb7b 	bl	800256c <_realloc_r>
 8001e76:	4606      	mov	r6, r0
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d1e1      	bne.n	8001e40 <__ssputs_r+0x70>
 8001e7c:	4650      	mov	r0, sl
 8001e7e:	6921      	ldr	r1, [r4, #16]
 8001e80:	f000 face 	bl	8002420 <_free_r>
 8001e84:	e7c7      	b.n	8001e16 <__ssputs_r+0x46>
	...

08001e88 <_svfiprintf_r>:
 8001e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	898b      	ldrh	r3, [r1, #12]
 8001e90:	4607      	mov	r7, r0
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	460d      	mov	r5, r1
 8001e96:	4614      	mov	r4, r2
 8001e98:	b09d      	sub	sp, #116	; 0x74
 8001e9a:	d50e      	bpl.n	8001eba <_svfiprintf_r+0x32>
 8001e9c:	690b      	ldr	r3, [r1, #16]
 8001e9e:	b963      	cbnz	r3, 8001eba <_svfiprintf_r+0x32>
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	f000 fb09 	bl	80024b8 <_malloc_r>
 8001ea6:	6028      	str	r0, [r5, #0]
 8001ea8:	6128      	str	r0, [r5, #16]
 8001eaa:	b920      	cbnz	r0, 8001eb6 <_svfiprintf_r+0x2e>
 8001eac:	230c      	movs	r3, #12
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	e0d1      	b.n	800205a <_svfiprintf_r+0x1d2>
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	616b      	str	r3, [r5, #20]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ec4:	2330      	movs	r3, #48	; 0x30
 8001ec6:	f04f 0901 	mov.w	r9, #1
 8001eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ece:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002074 <_svfiprintf_r+0x1ec>
 8001ed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	469a      	mov	sl, r3
 8001eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ede:	b10a      	cbz	r2, 8001ee4 <_svfiprintf_r+0x5c>
 8001ee0:	2a25      	cmp	r2, #37	; 0x25
 8001ee2:	d1f9      	bne.n	8001ed8 <_svfiprintf_r+0x50>
 8001ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8001ee8:	d00b      	beq.n	8001f02 <_svfiprintf_r+0x7a>
 8001eea:	465b      	mov	r3, fp
 8001eec:	4622      	mov	r2, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	f7ff ff6d 	bl	8001dd0 <__ssputs_r>
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	f000 80aa 	beq.w	8002050 <_svfiprintf_r+0x1c8>
 8001efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001efe:	445a      	add	r2, fp
 8001f00:	9209      	str	r2, [sp, #36]	; 0x24
 8001f02:	f89a 3000 	ldrb.w	r3, [sl]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a2 	beq.w	8002050 <_svfiprintf_r+0x1c8>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f16:	f10a 0a01 	add.w	sl, sl, #1
 8001f1a:	9304      	str	r3, [sp, #16]
 8001f1c:	9307      	str	r3, [sp, #28]
 8001f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f22:	931a      	str	r3, [sp, #104]	; 0x68
 8001f24:	4654      	mov	r4, sl
 8001f26:	2205      	movs	r2, #5
 8001f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f2c:	4851      	ldr	r0, [pc, #324]	; (8002074 <_svfiprintf_r+0x1ec>)
 8001f2e:	f000 fa41 	bl	80023b4 <memchr>
 8001f32:	9a04      	ldr	r2, [sp, #16]
 8001f34:	b9d8      	cbnz	r0, 8001f6e <_svfiprintf_r+0xe6>
 8001f36:	06d0      	lsls	r0, r2, #27
 8001f38:	bf44      	itt	mi
 8001f3a:	2320      	movmi	r3, #32
 8001f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f40:	0711      	lsls	r1, r2, #28
 8001f42:	bf44      	itt	mi
 8001f44:	232b      	movmi	r3, #43	; 0x2b
 8001f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f50:	d015      	beq.n	8001f7e <_svfiprintf_r+0xf6>
 8001f52:	4654      	mov	r4, sl
 8001f54:	2000      	movs	r0, #0
 8001f56:	f04f 0c0a 	mov.w	ip, #10
 8001f5a:	9a07      	ldr	r2, [sp, #28]
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f62:	3b30      	subs	r3, #48	; 0x30
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d94e      	bls.n	8002006 <_svfiprintf_r+0x17e>
 8001f68:	b1b0      	cbz	r0, 8001f98 <_svfiprintf_r+0x110>
 8001f6a:	9207      	str	r2, [sp, #28]
 8001f6c:	e014      	b.n	8001f98 <_svfiprintf_r+0x110>
 8001f6e:	eba0 0308 	sub.w	r3, r0, r8
 8001f72:	fa09 f303 	lsl.w	r3, r9, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	46a2      	mov	sl, r4
 8001f7a:	9304      	str	r3, [sp, #16]
 8001f7c:	e7d2      	b.n	8001f24 <_svfiprintf_r+0x9c>
 8001f7e:	9b03      	ldr	r3, [sp, #12]
 8001f80:	1d19      	adds	r1, r3, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	9103      	str	r1, [sp, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bfbb      	ittet	lt
 8001f8a:	425b      	neglt	r3, r3
 8001f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8001f90:	9307      	strge	r3, [sp, #28]
 8001f92:	9307      	strlt	r3, [sp, #28]
 8001f94:	bfb8      	it	lt
 8001f96:	9204      	strlt	r2, [sp, #16]
 8001f98:	7823      	ldrb	r3, [r4, #0]
 8001f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f9c:	d10c      	bne.n	8001fb8 <_svfiprintf_r+0x130>
 8001f9e:	7863      	ldrb	r3, [r4, #1]
 8001fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8001fa2:	d135      	bne.n	8002010 <_svfiprintf_r+0x188>
 8001fa4:	9b03      	ldr	r3, [sp, #12]
 8001fa6:	3402      	adds	r4, #2
 8001fa8:	1d1a      	adds	r2, r3, #4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	9203      	str	r2, [sp, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bfb8      	it	lt
 8001fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fb6:	9305      	str	r3, [sp, #20]
 8001fb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002084 <_svfiprintf_r+0x1fc>
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	4650      	mov	r0, sl
 8001fc0:	7821      	ldrb	r1, [r4, #0]
 8001fc2:	f000 f9f7 	bl	80023b4 <memchr>
 8001fc6:	b140      	cbz	r0, 8001fda <_svfiprintf_r+0x152>
 8001fc8:	2340      	movs	r3, #64	; 0x40
 8001fca:	eba0 000a 	sub.w	r0, r0, sl
 8001fce:	fa03 f000 	lsl.w	r0, r3, r0
 8001fd2:	9b04      	ldr	r3, [sp, #16]
 8001fd4:	3401      	adds	r4, #1
 8001fd6:	4303      	orrs	r3, r0
 8001fd8:	9304      	str	r3, [sp, #16]
 8001fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fde:	2206      	movs	r2, #6
 8001fe0:	4825      	ldr	r0, [pc, #148]	; (8002078 <_svfiprintf_r+0x1f0>)
 8001fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fe6:	f000 f9e5 	bl	80023b4 <memchr>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d038      	beq.n	8002060 <_svfiprintf_r+0x1d8>
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <_svfiprintf_r+0x1f4>)
 8001ff0:	bb1b      	cbnz	r3, 800203a <_svfiprintf_r+0x1b2>
 8001ff2:	9b03      	ldr	r3, [sp, #12]
 8001ff4:	3307      	adds	r3, #7
 8001ff6:	f023 0307 	bic.w	r3, r3, #7
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	9303      	str	r3, [sp, #12]
 8001ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002000:	4433      	add	r3, r6
 8002002:	9309      	str	r3, [sp, #36]	; 0x24
 8002004:	e767      	b.n	8001ed6 <_svfiprintf_r+0x4e>
 8002006:	460c      	mov	r4, r1
 8002008:	2001      	movs	r0, #1
 800200a:	fb0c 3202 	mla	r2, ip, r2, r3
 800200e:	e7a5      	b.n	8001f5c <_svfiprintf_r+0xd4>
 8002010:	2300      	movs	r3, #0
 8002012:	f04f 0c0a 	mov.w	ip, #10
 8002016:	4619      	mov	r1, r3
 8002018:	3401      	adds	r4, #1
 800201a:	9305      	str	r3, [sp, #20]
 800201c:	4620      	mov	r0, r4
 800201e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002022:	3a30      	subs	r2, #48	; 0x30
 8002024:	2a09      	cmp	r2, #9
 8002026:	d903      	bls.n	8002030 <_svfiprintf_r+0x1a8>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0c5      	beq.n	8001fb8 <_svfiprintf_r+0x130>
 800202c:	9105      	str	r1, [sp, #20]
 800202e:	e7c3      	b.n	8001fb8 <_svfiprintf_r+0x130>
 8002030:	4604      	mov	r4, r0
 8002032:	2301      	movs	r3, #1
 8002034:	fb0c 2101 	mla	r1, ip, r1, r2
 8002038:	e7f0      	b.n	800201c <_svfiprintf_r+0x194>
 800203a:	ab03      	add	r3, sp, #12
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	462a      	mov	r2, r5
 8002040:	4638      	mov	r0, r7
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <_svfiprintf_r+0x1f8>)
 8002044:	a904      	add	r1, sp, #16
 8002046:	f3af 8000 	nop.w
 800204a:	1c42      	adds	r2, r0, #1
 800204c:	4606      	mov	r6, r0
 800204e:	d1d6      	bne.n	8001ffe <_svfiprintf_r+0x176>
 8002050:	89ab      	ldrh	r3, [r5, #12]
 8002052:	065b      	lsls	r3, r3, #25
 8002054:	f53f af2c 	bmi.w	8001eb0 <_svfiprintf_r+0x28>
 8002058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800205a:	b01d      	add	sp, #116	; 0x74
 800205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002060:	ab03      	add	r3, sp, #12
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	462a      	mov	r2, r5
 8002066:	4638      	mov	r0, r7
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <_svfiprintf_r+0x1f8>)
 800206a:	a904      	add	r1, sp, #16
 800206c:	f000 f87c 	bl	8002168 <_printf_i>
 8002070:	e7eb      	b.n	800204a <_svfiprintf_r+0x1c2>
 8002072:	bf00      	nop
 8002074:	0800266c 	.word	0x0800266c
 8002078:	08002676 	.word	0x08002676
 800207c:	00000000 	.word	0x00000000
 8002080:	08001dd1 	.word	0x08001dd1
 8002084:	08002672 	.word	0x08002672

08002088 <_printf_common>:
 8002088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800208c:	4616      	mov	r6, r2
 800208e:	4699      	mov	r9, r3
 8002090:	688a      	ldr	r2, [r1, #8]
 8002092:	690b      	ldr	r3, [r1, #16]
 8002094:	4607      	mov	r7, r0
 8002096:	4293      	cmp	r3, r2
 8002098:	bfb8      	it	lt
 800209a:	4613      	movlt	r3, r2
 800209c:	6033      	str	r3, [r6, #0]
 800209e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020a2:	460c      	mov	r4, r1
 80020a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020a8:	b10a      	cbz	r2, 80020ae <_printf_common+0x26>
 80020aa:	3301      	adds	r3, #1
 80020ac:	6033      	str	r3, [r6, #0]
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	0699      	lsls	r1, r3, #26
 80020b2:	bf42      	ittt	mi
 80020b4:	6833      	ldrmi	r3, [r6, #0]
 80020b6:	3302      	addmi	r3, #2
 80020b8:	6033      	strmi	r3, [r6, #0]
 80020ba:	6825      	ldr	r5, [r4, #0]
 80020bc:	f015 0506 	ands.w	r5, r5, #6
 80020c0:	d106      	bne.n	80020d0 <_printf_common+0x48>
 80020c2:	f104 0a19 	add.w	sl, r4, #25
 80020c6:	68e3      	ldr	r3, [r4, #12]
 80020c8:	6832      	ldr	r2, [r6, #0]
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	42ab      	cmp	r3, r5
 80020ce:	dc28      	bgt.n	8002122 <_printf_common+0x9a>
 80020d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020d4:	1e13      	subs	r3, r2, #0
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	bf18      	it	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	0692      	lsls	r2, r2, #26
 80020de:	d42d      	bmi.n	800213c <_printf_common+0xb4>
 80020e0:	4649      	mov	r1, r9
 80020e2:	4638      	mov	r0, r7
 80020e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020e8:	47c0      	blx	r8
 80020ea:	3001      	adds	r0, #1
 80020ec:	d020      	beq.n	8002130 <_printf_common+0xa8>
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	68e5      	ldr	r5, [r4, #12]
 80020f2:	f003 0306 	and.w	r3, r3, #6
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf18      	it	ne
 80020fa:	2500      	movne	r5, #0
 80020fc:	6832      	ldr	r2, [r6, #0]
 80020fe:	f04f 0600 	mov.w	r6, #0
 8002102:	68a3      	ldr	r3, [r4, #8]
 8002104:	bf08      	it	eq
 8002106:	1aad      	subeq	r5, r5, r2
 8002108:	6922      	ldr	r2, [r4, #16]
 800210a:	bf08      	it	eq
 800210c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002110:	4293      	cmp	r3, r2
 8002112:	bfc4      	itt	gt
 8002114:	1a9b      	subgt	r3, r3, r2
 8002116:	18ed      	addgt	r5, r5, r3
 8002118:	341a      	adds	r4, #26
 800211a:	42b5      	cmp	r5, r6
 800211c:	d11a      	bne.n	8002154 <_printf_common+0xcc>
 800211e:	2000      	movs	r0, #0
 8002120:	e008      	b.n	8002134 <_printf_common+0xac>
 8002122:	2301      	movs	r3, #1
 8002124:	4652      	mov	r2, sl
 8002126:	4649      	mov	r1, r9
 8002128:	4638      	mov	r0, r7
 800212a:	47c0      	blx	r8
 800212c:	3001      	adds	r0, #1
 800212e:	d103      	bne.n	8002138 <_printf_common+0xb0>
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002138:	3501      	adds	r5, #1
 800213a:	e7c4      	b.n	80020c6 <_printf_common+0x3e>
 800213c:	2030      	movs	r0, #48	; 0x30
 800213e:	18e1      	adds	r1, r4, r3
 8002140:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800214a:	4422      	add	r2, r4
 800214c:	3302      	adds	r3, #2
 800214e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002152:	e7c5      	b.n	80020e0 <_printf_common+0x58>
 8002154:	2301      	movs	r3, #1
 8002156:	4622      	mov	r2, r4
 8002158:	4649      	mov	r1, r9
 800215a:	4638      	mov	r0, r7
 800215c:	47c0      	blx	r8
 800215e:	3001      	adds	r0, #1
 8002160:	d0e6      	beq.n	8002130 <_printf_common+0xa8>
 8002162:	3601      	adds	r6, #1
 8002164:	e7d9      	b.n	800211a <_printf_common+0x92>
	...

08002168 <_printf_i>:
 8002168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800216c:	460c      	mov	r4, r1
 800216e:	7e27      	ldrb	r7, [r4, #24]
 8002170:	4691      	mov	r9, r2
 8002172:	2f78      	cmp	r7, #120	; 0x78
 8002174:	4680      	mov	r8, r0
 8002176:	469a      	mov	sl, r3
 8002178:	990c      	ldr	r1, [sp, #48]	; 0x30
 800217a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800217e:	d807      	bhi.n	8002190 <_printf_i+0x28>
 8002180:	2f62      	cmp	r7, #98	; 0x62
 8002182:	d80a      	bhi.n	800219a <_printf_i+0x32>
 8002184:	2f00      	cmp	r7, #0
 8002186:	f000 80d9 	beq.w	800233c <_printf_i+0x1d4>
 800218a:	2f58      	cmp	r7, #88	; 0x58
 800218c:	f000 80a4 	beq.w	80022d8 <_printf_i+0x170>
 8002190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002198:	e03a      	b.n	8002210 <_printf_i+0xa8>
 800219a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800219e:	2b15      	cmp	r3, #21
 80021a0:	d8f6      	bhi.n	8002190 <_printf_i+0x28>
 80021a2:	a001      	add	r0, pc, #4	; (adr r0, 80021a8 <_printf_i+0x40>)
 80021a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80021a8:	08002201 	.word	0x08002201
 80021ac:	08002215 	.word	0x08002215
 80021b0:	08002191 	.word	0x08002191
 80021b4:	08002191 	.word	0x08002191
 80021b8:	08002191 	.word	0x08002191
 80021bc:	08002191 	.word	0x08002191
 80021c0:	08002215 	.word	0x08002215
 80021c4:	08002191 	.word	0x08002191
 80021c8:	08002191 	.word	0x08002191
 80021cc:	08002191 	.word	0x08002191
 80021d0:	08002191 	.word	0x08002191
 80021d4:	08002323 	.word	0x08002323
 80021d8:	08002245 	.word	0x08002245
 80021dc:	08002305 	.word	0x08002305
 80021e0:	08002191 	.word	0x08002191
 80021e4:	08002191 	.word	0x08002191
 80021e8:	08002345 	.word	0x08002345
 80021ec:	08002191 	.word	0x08002191
 80021f0:	08002245 	.word	0x08002245
 80021f4:	08002191 	.word	0x08002191
 80021f8:	08002191 	.word	0x08002191
 80021fc:	0800230d 	.word	0x0800230d
 8002200:	680b      	ldr	r3, [r1, #0]
 8002202:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002206:	1d1a      	adds	r2, r3, #4
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	600a      	str	r2, [r1, #0]
 800220c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002210:	2301      	movs	r3, #1
 8002212:	e0a4      	b.n	800235e <_printf_i+0x1f6>
 8002214:	6825      	ldr	r5, [r4, #0]
 8002216:	6808      	ldr	r0, [r1, #0]
 8002218:	062e      	lsls	r6, r5, #24
 800221a:	f100 0304 	add.w	r3, r0, #4
 800221e:	d50a      	bpl.n	8002236 <_printf_i+0xce>
 8002220:	6805      	ldr	r5, [r0, #0]
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	2d00      	cmp	r5, #0
 8002226:	da03      	bge.n	8002230 <_printf_i+0xc8>
 8002228:	232d      	movs	r3, #45	; 0x2d
 800222a:	426d      	negs	r5, r5
 800222c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002230:	230a      	movs	r3, #10
 8002232:	485e      	ldr	r0, [pc, #376]	; (80023ac <_printf_i+0x244>)
 8002234:	e019      	b.n	800226a <_printf_i+0x102>
 8002236:	f015 0f40 	tst.w	r5, #64	; 0x40
 800223a:	6805      	ldr	r5, [r0, #0]
 800223c:	600b      	str	r3, [r1, #0]
 800223e:	bf18      	it	ne
 8002240:	b22d      	sxthne	r5, r5
 8002242:	e7ef      	b.n	8002224 <_printf_i+0xbc>
 8002244:	680b      	ldr	r3, [r1, #0]
 8002246:	6825      	ldr	r5, [r4, #0]
 8002248:	1d18      	adds	r0, r3, #4
 800224a:	6008      	str	r0, [r1, #0]
 800224c:	0628      	lsls	r0, r5, #24
 800224e:	d501      	bpl.n	8002254 <_printf_i+0xec>
 8002250:	681d      	ldr	r5, [r3, #0]
 8002252:	e002      	b.n	800225a <_printf_i+0xf2>
 8002254:	0669      	lsls	r1, r5, #25
 8002256:	d5fb      	bpl.n	8002250 <_printf_i+0xe8>
 8002258:	881d      	ldrh	r5, [r3, #0]
 800225a:	2f6f      	cmp	r7, #111	; 0x6f
 800225c:	bf0c      	ite	eq
 800225e:	2308      	moveq	r3, #8
 8002260:	230a      	movne	r3, #10
 8002262:	4852      	ldr	r0, [pc, #328]	; (80023ac <_printf_i+0x244>)
 8002264:	2100      	movs	r1, #0
 8002266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800226a:	6866      	ldr	r6, [r4, #4]
 800226c:	2e00      	cmp	r6, #0
 800226e:	bfa8      	it	ge
 8002270:	6821      	ldrge	r1, [r4, #0]
 8002272:	60a6      	str	r6, [r4, #8]
 8002274:	bfa4      	itt	ge
 8002276:	f021 0104 	bicge.w	r1, r1, #4
 800227a:	6021      	strge	r1, [r4, #0]
 800227c:	b90d      	cbnz	r5, 8002282 <_printf_i+0x11a>
 800227e:	2e00      	cmp	r6, #0
 8002280:	d04d      	beq.n	800231e <_printf_i+0x1b6>
 8002282:	4616      	mov	r6, r2
 8002284:	fbb5 f1f3 	udiv	r1, r5, r3
 8002288:	fb03 5711 	mls	r7, r3, r1, r5
 800228c:	5dc7      	ldrb	r7, [r0, r7]
 800228e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002292:	462f      	mov	r7, r5
 8002294:	42bb      	cmp	r3, r7
 8002296:	460d      	mov	r5, r1
 8002298:	d9f4      	bls.n	8002284 <_printf_i+0x11c>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d10b      	bne.n	80022b6 <_printf_i+0x14e>
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	07df      	lsls	r7, r3, #31
 80022a2:	d508      	bpl.n	80022b6 <_printf_i+0x14e>
 80022a4:	6923      	ldr	r3, [r4, #16]
 80022a6:	6861      	ldr	r1, [r4, #4]
 80022a8:	4299      	cmp	r1, r3
 80022aa:	bfde      	ittt	le
 80022ac:	2330      	movle	r3, #48	; 0x30
 80022ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022b6:	1b92      	subs	r2, r2, r6
 80022b8:	6122      	str	r2, [r4, #16]
 80022ba:	464b      	mov	r3, r9
 80022bc:	4621      	mov	r1, r4
 80022be:	4640      	mov	r0, r8
 80022c0:	f8cd a000 	str.w	sl, [sp]
 80022c4:	aa03      	add	r2, sp, #12
 80022c6:	f7ff fedf 	bl	8002088 <_printf_common>
 80022ca:	3001      	adds	r0, #1
 80022cc:	d14c      	bne.n	8002368 <_printf_i+0x200>
 80022ce:	f04f 30ff 	mov.w	r0, #4294967295
 80022d2:	b004      	add	sp, #16
 80022d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022d8:	4834      	ldr	r0, [pc, #208]	; (80023ac <_printf_i+0x244>)
 80022da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80022de:	680e      	ldr	r6, [r1, #0]
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80022e6:	061f      	lsls	r7, r3, #24
 80022e8:	600e      	str	r6, [r1, #0]
 80022ea:	d514      	bpl.n	8002316 <_printf_i+0x1ae>
 80022ec:	07d9      	lsls	r1, r3, #31
 80022ee:	bf44      	itt	mi
 80022f0:	f043 0320 	orrmi.w	r3, r3, #32
 80022f4:	6023      	strmi	r3, [r4, #0]
 80022f6:	b91d      	cbnz	r5, 8002300 <_printf_i+0x198>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	f023 0320 	bic.w	r3, r3, #32
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	2310      	movs	r3, #16
 8002302:	e7af      	b.n	8002264 <_printf_i+0xfc>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f043 0320 	orr.w	r3, r3, #32
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	2378      	movs	r3, #120	; 0x78
 800230e:	4828      	ldr	r0, [pc, #160]	; (80023b0 <_printf_i+0x248>)
 8002310:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002314:	e7e3      	b.n	80022de <_printf_i+0x176>
 8002316:	065e      	lsls	r6, r3, #25
 8002318:	bf48      	it	mi
 800231a:	b2ad      	uxthmi	r5, r5
 800231c:	e7e6      	b.n	80022ec <_printf_i+0x184>
 800231e:	4616      	mov	r6, r2
 8002320:	e7bb      	b.n	800229a <_printf_i+0x132>
 8002322:	680b      	ldr	r3, [r1, #0]
 8002324:	6826      	ldr	r6, [r4, #0]
 8002326:	1d1d      	adds	r5, r3, #4
 8002328:	6960      	ldr	r0, [r4, #20]
 800232a:	600d      	str	r5, [r1, #0]
 800232c:	0635      	lsls	r5, r6, #24
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	d501      	bpl.n	8002336 <_printf_i+0x1ce>
 8002332:	6018      	str	r0, [r3, #0]
 8002334:	e002      	b.n	800233c <_printf_i+0x1d4>
 8002336:	0671      	lsls	r1, r6, #25
 8002338:	d5fb      	bpl.n	8002332 <_printf_i+0x1ca>
 800233a:	8018      	strh	r0, [r3, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	4616      	mov	r6, r2
 8002340:	6123      	str	r3, [r4, #16]
 8002342:	e7ba      	b.n	80022ba <_printf_i+0x152>
 8002344:	680b      	ldr	r3, [r1, #0]
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	600a      	str	r2, [r1, #0]
 800234a:	681e      	ldr	r6, [r3, #0]
 800234c:	2100      	movs	r1, #0
 800234e:	4630      	mov	r0, r6
 8002350:	6862      	ldr	r2, [r4, #4]
 8002352:	f000 f82f 	bl	80023b4 <memchr>
 8002356:	b108      	cbz	r0, 800235c <_printf_i+0x1f4>
 8002358:	1b80      	subs	r0, r0, r6
 800235a:	6060      	str	r0, [r4, #4]
 800235c:	6863      	ldr	r3, [r4, #4]
 800235e:	6123      	str	r3, [r4, #16]
 8002360:	2300      	movs	r3, #0
 8002362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002366:	e7a8      	b.n	80022ba <_printf_i+0x152>
 8002368:	4632      	mov	r2, r6
 800236a:	4649      	mov	r1, r9
 800236c:	4640      	mov	r0, r8
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	47d0      	blx	sl
 8002372:	3001      	adds	r0, #1
 8002374:	d0ab      	beq.n	80022ce <_printf_i+0x166>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	079b      	lsls	r3, r3, #30
 800237a:	d413      	bmi.n	80023a4 <_printf_i+0x23c>
 800237c:	68e0      	ldr	r0, [r4, #12]
 800237e:	9b03      	ldr	r3, [sp, #12]
 8002380:	4298      	cmp	r0, r3
 8002382:	bfb8      	it	lt
 8002384:	4618      	movlt	r0, r3
 8002386:	e7a4      	b.n	80022d2 <_printf_i+0x16a>
 8002388:	2301      	movs	r3, #1
 800238a:	4632      	mov	r2, r6
 800238c:	4649      	mov	r1, r9
 800238e:	4640      	mov	r0, r8
 8002390:	47d0      	blx	sl
 8002392:	3001      	adds	r0, #1
 8002394:	d09b      	beq.n	80022ce <_printf_i+0x166>
 8002396:	3501      	adds	r5, #1
 8002398:	68e3      	ldr	r3, [r4, #12]
 800239a:	9903      	ldr	r1, [sp, #12]
 800239c:	1a5b      	subs	r3, r3, r1
 800239e:	42ab      	cmp	r3, r5
 80023a0:	dcf2      	bgt.n	8002388 <_printf_i+0x220>
 80023a2:	e7eb      	b.n	800237c <_printf_i+0x214>
 80023a4:	2500      	movs	r5, #0
 80023a6:	f104 0619 	add.w	r6, r4, #25
 80023aa:	e7f5      	b.n	8002398 <_printf_i+0x230>
 80023ac:	0800267d 	.word	0x0800267d
 80023b0:	0800268e 	.word	0x0800268e

080023b4 <memchr>:
 80023b4:	4603      	mov	r3, r0
 80023b6:	b510      	push	{r4, lr}
 80023b8:	b2c9      	uxtb	r1, r1
 80023ba:	4402      	add	r2, r0
 80023bc:	4293      	cmp	r3, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	d101      	bne.n	80023c6 <memchr+0x12>
 80023c2:	2000      	movs	r0, #0
 80023c4:	e003      	b.n	80023ce <memchr+0x1a>
 80023c6:	7804      	ldrb	r4, [r0, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	428c      	cmp	r4, r1
 80023cc:	d1f6      	bne.n	80023bc <memchr+0x8>
 80023ce:	bd10      	pop	{r4, pc}

080023d0 <memcpy>:
 80023d0:	440a      	add	r2, r1
 80023d2:	4291      	cmp	r1, r2
 80023d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80023d8:	d100      	bne.n	80023dc <memcpy+0xc>
 80023da:	4770      	bx	lr
 80023dc:	b510      	push	{r4, lr}
 80023de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023e2:	4291      	cmp	r1, r2
 80023e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023e8:	d1f9      	bne.n	80023de <memcpy+0xe>
 80023ea:	bd10      	pop	{r4, pc}

080023ec <memmove>:
 80023ec:	4288      	cmp	r0, r1
 80023ee:	b510      	push	{r4, lr}
 80023f0:	eb01 0402 	add.w	r4, r1, r2
 80023f4:	d902      	bls.n	80023fc <memmove+0x10>
 80023f6:	4284      	cmp	r4, r0
 80023f8:	4623      	mov	r3, r4
 80023fa:	d807      	bhi.n	800240c <memmove+0x20>
 80023fc:	1e43      	subs	r3, r0, #1
 80023fe:	42a1      	cmp	r1, r4
 8002400:	d008      	beq.n	8002414 <memmove+0x28>
 8002402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800240a:	e7f8      	b.n	80023fe <memmove+0x12>
 800240c:	4601      	mov	r1, r0
 800240e:	4402      	add	r2, r0
 8002410:	428a      	cmp	r2, r1
 8002412:	d100      	bne.n	8002416 <memmove+0x2a>
 8002414:	bd10      	pop	{r4, pc}
 8002416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800241a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800241e:	e7f7      	b.n	8002410 <memmove+0x24>

08002420 <_free_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4605      	mov	r5, r0
 8002424:	2900      	cmp	r1, #0
 8002426:	d043      	beq.n	80024b0 <_free_r+0x90>
 8002428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800242c:	1f0c      	subs	r4, r1, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	bfb8      	it	lt
 8002432:	18e4      	addlt	r4, r4, r3
 8002434:	f000 f8d0 	bl	80025d8 <__malloc_lock>
 8002438:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <_free_r+0x94>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	4610      	mov	r0, r2
 800243e:	b933      	cbnz	r3, 800244e <_free_r+0x2e>
 8002440:	6063      	str	r3, [r4, #4]
 8002442:	6014      	str	r4, [r2, #0]
 8002444:	4628      	mov	r0, r5
 8002446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800244a:	f000 b8cb 	b.w	80025e4 <__malloc_unlock>
 800244e:	42a3      	cmp	r3, r4
 8002450:	d90a      	bls.n	8002468 <_free_r+0x48>
 8002452:	6821      	ldr	r1, [r4, #0]
 8002454:	1862      	adds	r2, r4, r1
 8002456:	4293      	cmp	r3, r2
 8002458:	bf01      	itttt	eq
 800245a:	681a      	ldreq	r2, [r3, #0]
 800245c:	685b      	ldreq	r3, [r3, #4]
 800245e:	1852      	addeq	r2, r2, r1
 8002460:	6022      	streq	r2, [r4, #0]
 8002462:	6063      	str	r3, [r4, #4]
 8002464:	6004      	str	r4, [r0, #0]
 8002466:	e7ed      	b.n	8002444 <_free_r+0x24>
 8002468:	461a      	mov	r2, r3
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	b10b      	cbz	r3, 8002472 <_free_r+0x52>
 800246e:	42a3      	cmp	r3, r4
 8002470:	d9fa      	bls.n	8002468 <_free_r+0x48>
 8002472:	6811      	ldr	r1, [r2, #0]
 8002474:	1850      	adds	r0, r2, r1
 8002476:	42a0      	cmp	r0, r4
 8002478:	d10b      	bne.n	8002492 <_free_r+0x72>
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	4401      	add	r1, r0
 800247e:	1850      	adds	r0, r2, r1
 8002480:	4283      	cmp	r3, r0
 8002482:	6011      	str	r1, [r2, #0]
 8002484:	d1de      	bne.n	8002444 <_free_r+0x24>
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4401      	add	r1, r0
 800248c:	6011      	str	r1, [r2, #0]
 800248e:	6053      	str	r3, [r2, #4]
 8002490:	e7d8      	b.n	8002444 <_free_r+0x24>
 8002492:	d902      	bls.n	800249a <_free_r+0x7a>
 8002494:	230c      	movs	r3, #12
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	e7d4      	b.n	8002444 <_free_r+0x24>
 800249a:	6820      	ldr	r0, [r4, #0]
 800249c:	1821      	adds	r1, r4, r0
 800249e:	428b      	cmp	r3, r1
 80024a0:	bf01      	itttt	eq
 80024a2:	6819      	ldreq	r1, [r3, #0]
 80024a4:	685b      	ldreq	r3, [r3, #4]
 80024a6:	1809      	addeq	r1, r1, r0
 80024a8:	6021      	streq	r1, [r4, #0]
 80024aa:	6063      	str	r3, [r4, #4]
 80024ac:	6054      	str	r4, [r2, #4]
 80024ae:	e7c9      	b.n	8002444 <_free_r+0x24>
 80024b0:	bd38      	pop	{r3, r4, r5, pc}
 80024b2:	bf00      	nop
 80024b4:	20000094 	.word	0x20000094

080024b8 <_malloc_r>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	1ccd      	adds	r5, r1, #3
 80024bc:	f025 0503 	bic.w	r5, r5, #3
 80024c0:	3508      	adds	r5, #8
 80024c2:	2d0c      	cmp	r5, #12
 80024c4:	bf38      	it	cc
 80024c6:	250c      	movcc	r5, #12
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	4606      	mov	r6, r0
 80024cc:	db01      	blt.n	80024d2 <_malloc_r+0x1a>
 80024ce:	42a9      	cmp	r1, r5
 80024d0:	d903      	bls.n	80024da <_malloc_r+0x22>
 80024d2:	230c      	movs	r3, #12
 80024d4:	6033      	str	r3, [r6, #0]
 80024d6:	2000      	movs	r0, #0
 80024d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024da:	f000 f87d 	bl	80025d8 <__malloc_lock>
 80024de:	4921      	ldr	r1, [pc, #132]	; (8002564 <_malloc_r+0xac>)
 80024e0:	680a      	ldr	r2, [r1, #0]
 80024e2:	4614      	mov	r4, r2
 80024e4:	b99c      	cbnz	r4, 800250e <_malloc_r+0x56>
 80024e6:	4f20      	ldr	r7, [pc, #128]	; (8002568 <_malloc_r+0xb0>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b923      	cbnz	r3, 80024f6 <_malloc_r+0x3e>
 80024ec:	4621      	mov	r1, r4
 80024ee:	4630      	mov	r0, r6
 80024f0:	f000 f862 	bl	80025b8 <_sbrk_r>
 80024f4:	6038      	str	r0, [r7, #0]
 80024f6:	4629      	mov	r1, r5
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 f85d 	bl	80025b8 <_sbrk_r>
 80024fe:	1c43      	adds	r3, r0, #1
 8002500:	d123      	bne.n	800254a <_malloc_r+0x92>
 8002502:	230c      	movs	r3, #12
 8002504:	4630      	mov	r0, r6
 8002506:	6033      	str	r3, [r6, #0]
 8002508:	f000 f86c 	bl	80025e4 <__malloc_unlock>
 800250c:	e7e3      	b.n	80024d6 <_malloc_r+0x1e>
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	1b5b      	subs	r3, r3, r5
 8002512:	d417      	bmi.n	8002544 <_malloc_r+0x8c>
 8002514:	2b0b      	cmp	r3, #11
 8002516:	d903      	bls.n	8002520 <_malloc_r+0x68>
 8002518:	6023      	str	r3, [r4, #0]
 800251a:	441c      	add	r4, r3
 800251c:	6025      	str	r5, [r4, #0]
 800251e:	e004      	b.n	800252a <_malloc_r+0x72>
 8002520:	6863      	ldr	r3, [r4, #4]
 8002522:	42a2      	cmp	r2, r4
 8002524:	bf0c      	ite	eq
 8002526:	600b      	streq	r3, [r1, #0]
 8002528:	6053      	strne	r3, [r2, #4]
 800252a:	4630      	mov	r0, r6
 800252c:	f000 f85a 	bl	80025e4 <__malloc_unlock>
 8002530:	f104 000b 	add.w	r0, r4, #11
 8002534:	1d23      	adds	r3, r4, #4
 8002536:	f020 0007 	bic.w	r0, r0, #7
 800253a:	1ac2      	subs	r2, r0, r3
 800253c:	d0cc      	beq.n	80024d8 <_malloc_r+0x20>
 800253e:	1a1b      	subs	r3, r3, r0
 8002540:	50a3      	str	r3, [r4, r2]
 8002542:	e7c9      	b.n	80024d8 <_malloc_r+0x20>
 8002544:	4622      	mov	r2, r4
 8002546:	6864      	ldr	r4, [r4, #4]
 8002548:	e7cc      	b.n	80024e4 <_malloc_r+0x2c>
 800254a:	1cc4      	adds	r4, r0, #3
 800254c:	f024 0403 	bic.w	r4, r4, #3
 8002550:	42a0      	cmp	r0, r4
 8002552:	d0e3      	beq.n	800251c <_malloc_r+0x64>
 8002554:	1a21      	subs	r1, r4, r0
 8002556:	4630      	mov	r0, r6
 8002558:	f000 f82e 	bl	80025b8 <_sbrk_r>
 800255c:	3001      	adds	r0, #1
 800255e:	d1dd      	bne.n	800251c <_malloc_r+0x64>
 8002560:	e7cf      	b.n	8002502 <_malloc_r+0x4a>
 8002562:	bf00      	nop
 8002564:	20000094 	.word	0x20000094
 8002568:	20000098 	.word	0x20000098

0800256c <_realloc_r>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	4607      	mov	r7, r0
 8002570:	4614      	mov	r4, r2
 8002572:	460e      	mov	r6, r1
 8002574:	b921      	cbnz	r1, 8002580 <_realloc_r+0x14>
 8002576:	4611      	mov	r1, r2
 8002578:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800257c:	f7ff bf9c 	b.w	80024b8 <_malloc_r>
 8002580:	b922      	cbnz	r2, 800258c <_realloc_r+0x20>
 8002582:	f7ff ff4d 	bl	8002420 <_free_r>
 8002586:	4625      	mov	r5, r4
 8002588:	4628      	mov	r0, r5
 800258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800258c:	f000 f830 	bl	80025f0 <_malloc_usable_size_r>
 8002590:	42a0      	cmp	r0, r4
 8002592:	d20f      	bcs.n	80025b4 <_realloc_r+0x48>
 8002594:	4621      	mov	r1, r4
 8002596:	4638      	mov	r0, r7
 8002598:	f7ff ff8e 	bl	80024b8 <_malloc_r>
 800259c:	4605      	mov	r5, r0
 800259e:	2800      	cmp	r0, #0
 80025a0:	d0f2      	beq.n	8002588 <_realloc_r+0x1c>
 80025a2:	4631      	mov	r1, r6
 80025a4:	4622      	mov	r2, r4
 80025a6:	f7ff ff13 	bl	80023d0 <memcpy>
 80025aa:	4631      	mov	r1, r6
 80025ac:	4638      	mov	r0, r7
 80025ae:	f7ff ff37 	bl	8002420 <_free_r>
 80025b2:	e7e9      	b.n	8002588 <_realloc_r+0x1c>
 80025b4:	4635      	mov	r5, r6
 80025b6:	e7e7      	b.n	8002588 <_realloc_r+0x1c>

080025b8 <_sbrk_r>:
 80025b8:	b538      	push	{r3, r4, r5, lr}
 80025ba:	2300      	movs	r3, #0
 80025bc:	4d05      	ldr	r5, [pc, #20]	; (80025d4 <_sbrk_r+0x1c>)
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	602b      	str	r3, [r5, #0]
 80025c4:	f7fe f836 	bl	8000634 <_sbrk>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d102      	bne.n	80025d2 <_sbrk_r+0x1a>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	b103      	cbz	r3, 80025d2 <_sbrk_r+0x1a>
 80025d0:	6023      	str	r3, [r4, #0]
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	200001b0 	.word	0x200001b0

080025d8 <__malloc_lock>:
 80025d8:	4801      	ldr	r0, [pc, #4]	; (80025e0 <__malloc_lock+0x8>)
 80025da:	f000 b811 	b.w	8002600 <__retarget_lock_acquire_recursive>
 80025de:	bf00      	nop
 80025e0:	200001b8 	.word	0x200001b8

080025e4 <__malloc_unlock>:
 80025e4:	4801      	ldr	r0, [pc, #4]	; (80025ec <__malloc_unlock+0x8>)
 80025e6:	f000 b80c 	b.w	8002602 <__retarget_lock_release_recursive>
 80025ea:	bf00      	nop
 80025ec:	200001b8 	.word	0x200001b8

080025f0 <_malloc_usable_size_r>:
 80025f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025f4:	1f18      	subs	r0, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bfbc      	itt	lt
 80025fa:	580b      	ldrlt	r3, [r1, r0]
 80025fc:	18c0      	addlt	r0, r0, r3
 80025fe:	4770      	bx	lr

08002600 <__retarget_lock_acquire_recursive>:
 8002600:	4770      	bx	lr

08002602 <__retarget_lock_release_recursive>:
 8002602:	4770      	bx	lr

08002604 <_init>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr

08002610 <_fini>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr
