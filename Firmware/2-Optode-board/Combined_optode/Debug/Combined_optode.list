
Combined_optode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b8  080060b8  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c0  080060c0  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  080060c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000027c  08006344  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08006344  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186bd  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002824  00000000  00000000  00038969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242e5  00000000  00000000  0003d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160af  00000000  00000000  00061aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4804  00000000  00000000  00077b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005814  00000000  00000000  0015c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000027c 	.word	0x2000027c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fec 	.word	0x08005fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000280 	.word	0x20000280
 80001cc:	08005fec 	.word	0x08005fec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd8c 	bl	800109a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f931 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa9f 	bl	8000ac8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800058a:	f000 f971 	bl	8000870 <MX_ADC1_Init>
  MX_DAC1_Init();
 800058e:	f000 f9d3 	bl	8000938 <MX_DAC1_Init>
  MX_TIM16_Init();
 8000592:	f000 fa73 	bl	8000a7c <MX_TIM16_Init>
  MX_LPUART1_UART_Init();
 8000596:	f000 fa0b 	bl	80009b0 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800059a:	f000 fa37 	bl	8000a0c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // switching on led to show the fnirs start
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	487c      	ldr	r0, [pc, #496]	; (8000794 <main+0x21c>)
 80005a4:	f002 fade 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ac:	f000 fdea 	bl	8001184 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4877      	ldr	r0, [pc, #476]	; (8000794 <main+0x21c>)
 80005b6:	f002 fad5 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005be:	f000 fde1 	bl	8001184 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	4873      	ldr	r0, [pc, #460]	; (8000794 <main+0x21c>)
 80005c8:	f002 facc 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d0:	f000 fdd8 	bl	8001184 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	486e      	ldr	r0, [pc, #440]	; (8000794 <main+0x21c>)
 80005da:	f002 fac3 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f000 fdcf 	bl	8001184 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	486a      	ldr	r0, [pc, #424]	; (8000794 <main+0x21c>)
 80005ec:	f002 faba 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f4:	f000 fdc6 	bl	8001184 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	4865      	ldr	r0, [pc, #404]	; (8000794 <main+0x21c>)
 80005fe:	f002 fab1 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000606:	f000 fdbd 	bl	8001184 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f002 faa7 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f002 faa1 	bl	8002b64 <HAL_GPIO_WritePin>
	//usb output as a test
	uart_buf_len = sprintf(uart_buf, "Timer starting ...\r\n");
 8000622:	495d      	ldr	r1, [pc, #372]	; (8000798 <main+0x220>)
 8000624:	485d      	ldr	r0, [pc, #372]	; (800079c <main+0x224>)
 8000626:	f005 f8b3 	bl	8005790 <siprintf>
 800062a:	4603      	mov	r3, r0
 800062c:	4a5c      	ldr	r2, [pc, #368]	; (80007a0 <main+0x228>)
 800062e:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000630:	4b5b      	ldr	r3, [pc, #364]	; (80007a0 <main+0x228>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	b29a      	uxth	r2, r3
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	4958      	ldr	r1, [pc, #352]	; (800079c <main+0x224>)
 800063a:	485a      	ldr	r0, [pc, #360]	; (80007a4 <main+0x22c>)
 800063c:	f004 fbfe 	bl	8004e3c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f000 fd9e 	bl	8001184 <HAL_Delay>
	// HAL_UART_Transmit(huart, pData, Size, Timeout)

	//start interrupt for ADC
	HAL_ADC_Start(&hadc1);
 8000648:	4857      	ldr	r0, [pc, #348]	; (80007a8 <main+0x230>)
 800064a:	f001 f8cf 	bl	80017ec <HAL_ADC_Start>

	//start interrupt timer
	//HAL_TIM_Base_Start_IT(&htim16);

	//start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	4856      	ldr	r0, [pc, #344]	; (80007ac <main+0x234>)
 8000652:	f001 ff40 	bl	80024d6 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000656:	2110      	movs	r1, #16
 8000658:	4854      	ldr	r0, [pc, #336]	; (80007ac <main+0x234>)
 800065a:	f001 ff3c 	bl	80024d6 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DAC_val);
 800065e:	4b54      	ldr	r3, [pc, #336]	; (80007b0 <main+0x238>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	4851      	ldr	r0, [pc, #324]	; (80007ac <main+0x234>)
 8000668:	f001 ff82 	bl	8002570 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, DAC_val);
 800066c:	4b50      	ldr	r3, [pc, #320]	; (80007b0 <main+0x238>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	484d      	ldr	r0, [pc, #308]	; (80007ac <main+0x234>)
 8000676:	f001 ff7b 	bl	8002570 <HAL_DAC_SetValue>

	HAL_Delay(2000);
 800067a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067e:	f000 fd81 	bl	8001184 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(sample_counter==sample_counter_prev+1){
 8000682:	4b4c      	ldr	r3, [pc, #304]	; (80007b4 <main+0x23c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <main+0x240>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d154      	bne.n	800073a <main+0x1c2>
		  if (sample_counter%5==0){
 8000690:	4b49      	ldr	r3, [pc, #292]	; (80007b8 <main+0x240>)
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	4b49      	ldr	r3, [pc, #292]	; (80007bc <main+0x244>)
 8000696:	fb83 2301 	smull	r2, r3, r3, r1
 800069a:	105a      	asrs	r2, r3, #1
 800069c:	17cb      	asrs	r3, r1, #31
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	4613      	mov	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	1aca      	subs	r2, r1, r3
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d142      	bne.n	8000732 <main+0x1ba>
				if(channel_state){
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <main+0x248>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <main+0x144>
					channel_state = GPIO_PIN_RESET;
 80006b4:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <main+0x248>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e002      	b.n	80006c2 <main+0x14a>
				}else{
					channel_state = GPIO_PIN_SET;
 80006bc:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <main+0x248>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
				}

				if(sample_counter%100==0){
 80006c2:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <main+0x240>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <main+0x24c>)
 80006c8:	fb83 1302 	smull	r1, r3, r3, r2
 80006cc:	1159      	asrs	r1, r3, #5
 80006ce:	17d3      	asrs	r3, r2, #31
 80006d0:	1acb      	subs	r3, r1, r3
 80006d2:	2164      	movs	r1, #100	; 0x64
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d11f      	bne.n	800071e <main+0x1a6>

					adc_reading = 1;
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <main+0x250>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	801a      	strh	r2, [r3, #0]
					sprintf(msg, "other %hu\r\n", adc_reading);
 80006e4:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <main+0x250>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4938      	ldr	r1, [pc, #224]	; (80007cc <main+0x254>)
 80006ec:	4838      	ldr	r0, [pc, #224]	; (80007d0 <main+0x258>)
 80006ee:	f005 f84f 	bl	8005790 <siprintf>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006f2:	4837      	ldr	r0, [pc, #220]	; (80007d0 <main+0x258>)
 80006f4:	f7ff fd6c 	bl	80001d0 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	4933      	ldr	r1, [pc, #204]	; (80007d0 <main+0x258>)
 8000702:	4828      	ldr	r0, [pc, #160]	; (80007a4 <main+0x22c>)
 8000704:	f004 fb9a 	bl	8004e3c <HAL_UART_Transmit>
					if(active_channel == 0x0040){
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <main+0x25c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b40      	cmp	r3, #64	; 0x40
 800070e:	d103      	bne.n	8000718 <main+0x1a0>
						active_channel = 0x0080;
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <main+0x25c>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	801a      	strh	r2, [r3, #0]
 8000716:	e002      	b.n	800071e <main+0x1a6>
					}else{
						active_channel = 0x0040;
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <main+0x25c>)
 800071a:	2240      	movs	r2, #64	; 0x40
 800071c:	801a      	strh	r2, [r3, #0]
					}
				}
				HAL_GPIO_WritePin(GPIOA, active_channel, channel_state);
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <main+0x25c>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <main+0x248>)
 8000724:	6812      	ldr	r2, [r2, #0]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f002 fa19 	bl	8002b64 <HAL_GPIO_WritePin>
		  }
		  sample_counter_prev=sample_counter;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <main+0x240>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <main+0x23c>)
 8000738:	6013      	str	r3, [r2, #0]
	  }
	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  adc_reading = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE, 5000);
 800073a:	f241 3388 	movw	r3, #5000	; 0x1388
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000744:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <main+0x260>)
 8000746:	4925      	ldr	r1, [pc, #148]	; (80007dc <main+0x264>)
 8000748:	4825      	ldr	r0, [pc, #148]	; (80007e0 <main+0x268>)
 800074a:	f003 fc72 	bl	8004032 <HAL_SPI_TransmitReceive>
 800074e:	4603      	mov	r3, r0
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <main+0x250>)
 8000754:	801a      	strh	r2, [r3, #0]
	  //adc_reading = 1;
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	480e      	ldr	r0, [pc, #56]	; (8000794 <main+0x21c>)
 800075a:	f002 fa1b 	bl	8002b94 <HAL_GPIO_TogglePin>

	  sprintf(msg, "error %hu\r\n", adc_reading);
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <main+0x250>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	491f      	ldr	r1, [pc, #124]	; (80007e4 <main+0x26c>)
 8000766:	481a      	ldr	r0, [pc, #104]	; (80007d0 <main+0x258>)
 8000768:	f005 f812 	bl	8005790 <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <main+0x258>)
 800076e:	f7ff fd2f 	bl	80001d0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	4915      	ldr	r1, [pc, #84]	; (80007d0 <main+0x258>)
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <main+0x22c>)
 800077e:	f004 fb5d 	bl	8004e3c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,&aRxBuffer,sizeof(aRxBuffer),100);
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000788:	4913      	ldr	r1, [pc, #76]	; (80007d8 <main+0x260>)
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <main+0x22c>)
 800078c:	f004 fb56 	bl	8004e3c <HAL_UART_Transmit>
	  if(sample_counter==sample_counter_prev+1){
 8000790:	e777      	b.n	8000682 <main+0x10a>
 8000792:	bf00      	nop
 8000794:	48000400 	.word	0x48000400
 8000798:	08006004 	.word	0x08006004
 800079c:	20000338 	.word	0x20000338
 80007a0:	20000324 	.word	0x20000324
 80007a4:	2000039c 	.word	0x2000039c
 80007a8:	20000420 	.word	0x20000420
 80007ac:	20000310 	.word	0x20000310
 80007b0:	20000000 	.word	0x20000000
 80007b4:	2000029c 	.word	0x2000029c
 80007b8:	20000298 	.word	0x20000298
 80007bc:	66666667 	.word	0x66666667
 80007c0:	20000208 	.word	0x20000208
 80007c4:	51eb851f 	.word	0x51eb851f
 80007c8:	20000328 	.word	0x20000328
 80007cc:	0800601c 	.word	0x0800601c
 80007d0:	2000032c 	.word	0x2000032c
 80007d4:	20000204 	.word	0x20000204
 80007d8:	20000104 	.word	0x20000104
 80007dc:	20000004 	.word	0x20000004
 80007e0:	200002ac 	.word	0x200002ac
 80007e4:	08006028 	.word	0x08006028

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b096      	sub	sp, #88	; 0x58
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2244      	movs	r2, #68	; 0x44
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 ffc2 	bl	8005780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080e:	f002 f9e9 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000818:	f000 fa08 	bl	8000c2c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fa2e 	bl	8002c90 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800083a:	f000 f9f7 	bl	8000c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000842:	2302      	movs	r3, #2
 8000844:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800084e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000852:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fe39 	bl	80034d0 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000864:	f000 f9e2 	bl	8000c2c <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3758      	adds	r7, #88	; 0x58
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_ADC1_Init+0xbc>)
 8000888:	4a29      	ldr	r2, [pc, #164]	; (8000930 <MX_ADC1_Init+0xc0>)
 800088a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_ADC1_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_ADC1_Init+0xbc>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC1_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_ADC1_Init+0xbc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0xbc>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_ADC1_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ADC1_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0xbc>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ADC1_Init+0xbc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC1_Init+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ADC1_Init+0xbc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_ADC1_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC1_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_ADC1_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_ADC1_Init+0xbc>)
 80008e8:	f000 fe38 	bl	800155c <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008f2:	f000 f99b 	bl	8000c2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ADC1_Init+0xc4>)
 80008f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fa:	2306      	movs	r3, #6
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000902:	237f      	movs	r3, #127	; 0x7f
 8000904:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000906:	2304      	movs	r3, #4
 8000908:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_ADC1_Init+0xbc>)
 8000914:	f001 f86a 	bl	80019ec <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800091e:	f000 f985 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000420 	.word	0x20000420
 8000930:	50040000 	.word	0x50040000
 8000934:	19200040 	.word	0x19200040

08000938 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2224      	movs	r2, #36	; 0x24
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f004 ff1b 	bl	8005780 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_DAC1_Init+0x70>)
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_DAC1_Init+0x74>)
 800094e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_DAC1_Init+0x70>)
 8000952:	f001 fd9e 	bl	8002492 <HAL_DAC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800095c:	f000 f966 	bl	8000c2c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_DAC1_Init+0x70>)
 800097c:	f001 fe1d 	bl	80025ba <HAL_DAC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f951 	bl	8000c2c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2210      	movs	r2, #16
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_DAC1_Init+0x70>)
 8000992:	f001 fe12 	bl	80025ba <HAL_DAC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800099c:	f000 f946 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000310 	.word	0x20000310
 80009ac:	40007400 	.word	0x40007400

080009b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <MX_LPUART1_UART_Init+0x54>)
 80009b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 1000000;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_LPUART1_UART_Init+0x58>)
 80009be:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009d4:	220c      	movs	r2, #12
 80009d6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009ec:	f004 f9d8 	bl	8004da0 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f919 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000039c 	.word	0x2000039c
 8000a04:	40008000 	.word	0x40008000
 8000a08:	000f4240 	.word	0x000f4240

08000a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a12:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <MX_SPI2_Init+0x6c>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a62:	f003 fa43 	bl	8003eec <HAL_SPI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8000a6c:	f000 f8de 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002ac 	.word	0x200002ac
 8000a78:	40003800 	.word	0x40003800

08000a7c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 250-1;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000a88:	22f9      	movs	r2, #249	; 0xf9
 8000a8a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000a94:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a98:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_TIM16_Init+0x44>)
 8000aae:	f003 ff57 	bl	8004960 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000ab8:	f000 f8b8 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000484 	.word	0x20000484
 8000ac4:	40014400 	.word	0x40014400

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	4a33      	ldr	r2, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|A_CTR_Pin|B_CTR_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	21c8      	movs	r1, #200	; 0xc8
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f002 f80d 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <MX_GPIO_Init+0xec>)
 8000b50:	f002 f808 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_STATUS_Pin */
  GPIO_InitStruct.Pin = A_STATUS_Pin;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f001 fe81 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 A_CTR_Pin B_CTR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|A_CTR_Pin|B_CTR_Pin;
 8000b6e:	23c8      	movs	r3, #200	; 0xc8
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f001 fe72 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0xec>)
 8000ba4:	f001 fe64 	bl	8002870 <HAL_GPIO_Init>

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400

08000bb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Interrupt service routine for periodic timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if (htim==&htim16){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d11e      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x4e>
	HAL_ADC_Start(&hadc1);
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bca:	f000 fe0f 	bl	80017ec <HAL_ADC_Start>
	sample_counter+=1;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bd6:	6013      	str	r3, [r2, #0]

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4810      	ldr	r0, [pc, #64]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bdc:	f001 ffda 	bl	8002b94 <HAL_GPIO_TogglePin>
	//HAL_Delay(1);

	//Read ADC reading

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000be6:	f000 fe64 	bl	80018b2 <HAL_ADC_PollForConversion>
	adc_reading = HAL_ADC_GetValue(&hadc1);
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bec:	f000 fef0 	bl	80019d0 <HAL_ADC_GetValue>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bf6:	801a      	strh	r2, [r3, #0]

	//sprintf(msg, "Reading is %hu\r\n", adc_reading);
	sprintf(msg, "%hu\r\n", sample_counter);
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4909      	ldr	r1, [pc, #36]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c02:	f004 fdc5 	bl	8005790 <siprintf>

	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000484 	.word	0x20000484
 8000c14:	20000420 	.word	0x20000420
 8000c18:	20000298 	.word	0x20000298
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	20000328 	.word	0x20000328
 8000c24:	08006034 	.word	0x08006034
 8000c28:	2000032c 	.word	0x2000032c

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Turn LED3 on */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x4>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	; 0x60
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a0      	sub	sp, #128	; 0x80
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	225c      	movs	r2, #92	; 0x5c
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fd6f 	bl	8005780 <memset>
  if(hadc->Instance==ADC1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_ADC_MspInit+0xa4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d134      	bne.n	8000d16 <HAL_ADC_MspInit+0x9a>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000cb2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000cb6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fe0b 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cc8:	f7ff ffb0 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_ADC_MspInit+0xa8>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_ADC_MspInit+0xa8>)
 8000cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_ADC_MspInit+0xa8>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_ADC_MspInit+0xa8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_ADC_MspInit+0xa8>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_ADC_MspInit+0xa8>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d00:	230b      	movs	r3, #11
 8000d02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f001 fdad 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3780      	adds	r7, #128	; 0x80
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	50040000 	.word	0x50040000
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <HAL_DAC_MspInit+0x74>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d124      	bne.n	8000d94 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_DAC_MspInit+0x78>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_DAC_MspInit+0x78>)
 8000d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d54:	6593      	str	r3, [r2, #88]	; 0x58
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_DAC_MspInit+0x78>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_DAC_MspInit+0x78>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_DAC_MspInit+0x78>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_DAC_MspInit+0x78>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d7a:	2330      	movs	r3, #48	; 0x30
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f001 fd6e 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40007400 	.word	0x40007400
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0a0      	sub	sp, #128	; 0x80
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	225c      	movs	r2, #92	; 0x5c
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 fcdb 	bl	8005780 <memset>
  if(huart->Instance==LPUART1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_UART_MspInit+0xa8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d136      	bne.n	8000e42 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dd4:	2320      	movs	r3, #32
 8000dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8000dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fd78 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ff1d 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0xac>)
 8000df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0xac>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_UART_MspInit+0xac>)
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0xac>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0xac>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0xac>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e22:	2303      	movs	r3, #3
 8000e24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e32:	2308      	movs	r3, #8
 8000e34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0xb0>)
 8000e3e:	f001 fd17 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3780      	adds	r7, #128	; 0x80
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40008000 	.word	0x40008000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d130      	bne.n	8000edc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6593      	str	r3, [r2, #88]	; 0x58
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000eaa:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <HAL_SPI_MspInit+0x94>)
 8000ec8:	f001 fcd2 	bl	8002870 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2024      	movs	r0, #36	; 0x24
 8000ed2:	f001 faa8 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ed6:	2024      	movs	r0, #36	; 0x24
 8000ed8:	f001 fac1 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40003800 	.word	0x40003800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400

08000ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x44>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d113      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_TIM_Base_MspInit+0x48>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_TIM_Base_MspInit+0x48>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0x48>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2019      	movs	r0, #25
 8000f20:	f001 fa81 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f24:	2019      	movs	r0, #25
 8000f26:	f001 fa9a 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40014400 	.word	0x40014400
 8000f38:	40021000 	.word	0x40021000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f8dc 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f96:	f003 fd3a 	bl	8004a0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000484 	.word	0x20000484

08000fa4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <SPI2_IRQHandler+0x10>)
 8000faa:	f003 fa55 	bl	8004458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200002ac 	.word	0x200002ac

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f004 fba0 	bl	800572c <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000c000 	.word	0x2000c000
 8001018:	00000400 	.word	0x00000400
 800101c:	200002a0 	.word	0x200002a0
 8001020:	200004e8 	.word	0x200004e8

08001024 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff ffea 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f004 fb5f 	bl	8005738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107a:	f7ff fa7d 	bl	8000578 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 800108c:	080060c8 	.word	0x080060c8
  ldr r2, =_sbss
 8001090:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8001094:	200004e4 	.word	0x200004e4

08001098 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_IRQHandler>

0800109a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f001 f9b3 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f80e 	bl	80010cc <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010bc:	f7ff fdba 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d023      	beq.n	8001128 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_InitTick+0x70>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_InitTick+0x6c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f9bf 	bl	800247a <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10f      	bne.n	8001122 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d809      	bhi.n	800111c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f001 f989 	bl	8002426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_InitTick+0x74>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e007      	b.n	800112c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e004      	b.n	800112c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e001      	b.n	800112c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000214 	.word	0x20000214
 800113c:	2000020c 	.word	0x2000020c
 8001140:	20000210 	.word	0x20000210

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000214 	.word	0x20000214
 8001168:	200004d0 	.word	0x200004d0

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200004d0 	.word	0x200004d0

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000214 	.word	0x20000214

080011cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3360      	adds	r3, #96	; 0x60
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LL_ADC_SetOffset+0x44>)
 8001256:	4013      	ands	r3, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	4313      	orrs	r3, r2
 8001264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	03fff000 	.word	0x03fff000

0800127c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3360      	adds	r3, #96	; 0x60
 800128a:	461a      	mov	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3360      	adds	r3, #96	; 0x60
 80012b8:	461a      	mov	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3330      	adds	r3, #48	; 0x30
 8001314:	461a      	mov	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	211f      	movs	r1, #31
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0e9b      	lsrs	r3, r3, #26
 800133c:	f003 011f 	and.w	r1, r3, #31
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3314      	adds	r3, #20
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	0e5b      	lsrs	r3, r3, #25
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	0d1b      	lsrs	r3, r3, #20
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	2107      	movs	r1, #7
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	0d1b      	lsrs	r3, r3, #20
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0318 	and.w	r3, r3, #24
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d8:	40d9      	lsrs	r1, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	400b      	ands	r3, r1
 80013de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e2:	431a      	orrs	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	0007ffff 	.word	0x0007ffff

080013fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800140c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6093      	str	r3, [r2, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001484:	d101      	bne.n	800148a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <LL_ADC_IsEnabled+0x18>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <LL_ADC_IsEnabled+0x1a>
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fa:	f043 0204 	orr.w	r2, r3, #4
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b04      	cmp	r3, #4
 8001520:	d101      	bne.n	8001526 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b08      	cmp	r3, #8
 8001546:	d101      	bne.n	800154c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e12c      	b.n	80017d0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fb79 	bl	8000c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff3f 	bl	8001420 <LL_ADC_IsDeepPowerDownEnabled>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff25 	bl	80013fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff5a 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d115      	bne.n	80015ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff3e 	bl	8001448 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015cc:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_ADC_Init+0x27c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	099b      	lsrs	r3, r3, #6
 80015d2:	4a82      	ldr	r2, [pc, #520]	; (80017dc <HAL_ADC_Init+0x280>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	3301      	adds	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff3c 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10d      	bne.n	800161a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff75 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 8001624:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80c5 	bne.w	80017be <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 80c1 	bne.w	80017be <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001644:	f043 0202 	orr.w	r2, r3, #2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <LL_ADC_IsEnabled>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10b      	bne.n	8001674 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800165c:	4860      	ldr	r0, [pc, #384]	; (80017e0 <HAL_ADC_Init+0x284>)
 800165e:	f7ff ff2f 	bl	80014c0 <LL_ADC_IsEnabled>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4619      	mov	r1, r3
 800166e:	485d      	ldr	r0, [pc, #372]	; (80017e4 <HAL_ADC_Init+0x288>)
 8001670:	f7ff fdac 	bl	80011cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e5b      	ldrb	r3, [r3, #25]
 8001678:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001684:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800168a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001692:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	3b01      	subs	r3, #1
 80016a8:	045b      	lsls	r3, r3, #17
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <HAL_ADC_Init+0x28c>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	430b      	orrs	r3, r1
 80016de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff12 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 80016ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff1f 	bl	8001534 <LL_ADC_INJ_IsConversionOngoing>
 80016f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d13d      	bne.n	800177a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d13a      	bne.n	800177a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001708:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001710:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001720:	f023 0302 	bic.w	r3, r3, #2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	69b9      	ldr	r1, [r7, #24]
 800172a:	430b      	orrs	r3, r1
 800172c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001734:	2b01      	cmp	r3, #1
 8001736:	d118      	bne.n	800176a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001754:	4311      	orrs	r1, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800175a:	430a      	orrs	r2, r1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	e007      	b.n	800177a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10c      	bne.n	800179c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f023 010f 	bic.w	r1, r3, #15
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
 800179a:	e007      	b.n	80017ac <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 020f 	bic.w	r2, r2, #15
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	f023 0303 	bic.w	r3, r3, #3
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54
 80017bc:	e007      	b.n	80017ce <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000020c 	.word	0x2000020c
 80017dc:	053e2d63 	.word	0x053e2d63
 80017e0:	50040000 	.word	0x50040000
 80017e4:	50040300 	.word	0x50040300
 80017e8:	fff0c007 	.word	0xfff0c007

080017ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe88 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d14f      	bne.n	80018a4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Start+0x26>
 800180e:	2302      	movs	r3, #2
 8001810:	e04b      	b.n	80018aa <HAL_ADC_Start+0xbe>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fcc6 	bl	80021ac <ADC_Enable>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d137      	bne.n	800189a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184a:	d106      	bne.n	800185a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f023 0206 	bic.w	r2, r3, #6
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
 8001858:	e002      	b.n	8001860 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	221c      	movs	r2, #28
 8001866:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001886:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe27 	bl	80014e6 <LL_ADC_REG_StartConversion>
 8001898:	e006      	b.n	80018a8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018a2:	e001      	b.n	80018a8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d102      	bne.n	80018ca <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018c4:	2308      	movs	r3, #8
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e010      	b.n	80018ec <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e06f      	b.n	80019c8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80018e8:	2304      	movs	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018ec:	f7ff fc3e 	bl	800116c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018f2:	e021      	b.n	8001938 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fa:	d01d      	beq.n	8001938 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018fc:	f7ff fc36 	bl	800116c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d302      	bcc.n	8001912 <HAL_ADC_PollForConversion+0x60>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d112      	bne.n	8001938 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f043 0204 	orr.w	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e047      	b.n	80019c8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0d6      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fcc1 	bl	80012de <LL_ADC_REG_IsTriggerSourceSWStart>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01c      	beq.n	800199c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7e5b      	ldrb	r3, [r3, #25]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b08      	cmp	r3, #8
 8001976:	d111      	bne.n	800199c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d104      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2208      	movs	r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e008      	b.n	80019c6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0b6      	sub	sp, #216	; 0xd8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x22>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e3b9      	b.n	8002182 <HAL_ADC_ConfigChannel+0x796>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fd77 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 839e 	bne.w	8002164 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d824      	bhi.n	8001a7a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	3b02      	subs	r3, #2
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d81b      	bhi.n	8001a72 <HAL_ADC_ConfigChannel+0x86>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_ADC_ConfigChannel+0x54>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001a59 	.word	0x08001a59
 8001a48:	08001a61 	.word	0x08001a61
 8001a4c:	08001a69 	.word	0x08001a69
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	220c      	movs	r2, #12
 8001a54:	605a      	str	r2, [r3, #4]
          break;
 8001a56:	e011      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2212      	movs	r2, #18
 8001a5c:	605a      	str	r2, [r3, #4]
          break;
 8001a5e:	e00d      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2218      	movs	r2, #24
 8001a64:	605a      	str	r2, [r3, #4]
          break;
 8001a66:	e009      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a6e:	605a      	str	r2, [r3, #4]
          break;
 8001a70:	e004      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2206      	movs	r2, #6
 8001a76:	605a      	str	r2, [r3, #4]
          break;
 8001a78:	e000      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a7a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f7ff fc3b 	bl	8001304 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fd3b 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 8001a98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fd47 	bl	8001534 <LL_ADC_INJ_IsConversionOngoing>
 8001aa6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 81a6 	bne.w	8001e00 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 81a1 	bne.w	8001e00 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f7ff fc46 	bl	800135c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d00a      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b02:	f7ff fb97 	bl	8001234 <LL_ADC_SetOffset>
 8001b06:	e17b      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fbb4 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x148>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fba9 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	f003 021f 	and.w	r2, r3, #31
 8001b32:	e01e      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x186>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb9e 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b62:	2320      	movs	r3, #32
 8001b64:	e004      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x19e>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	e018      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1d0>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e004      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001bb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d106      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fb6d 	bl	80012a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fb51 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x20e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fb46 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	e01e      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x24c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fb3b 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e004      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x264>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	e018      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x296>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e004      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d106      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb0a 	bl	80012a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff faee 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x2d4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2102      	movs	r1, #2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fae3 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	e01e      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x312>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fad8 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	e004      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x32a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	e016      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x358>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d36:	2320      	movs	r3, #32
 8001d38:	e004      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d106      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff faa9 	bl	80012a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fa8d 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x396>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2103      	movs	r1, #3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa82 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	e017      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x3c6>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2103      	movs	r1, #3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fa77 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e003      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x3de>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	e011      	b.n	8001dee <HAL_ADC_ConfigChannel+0x402>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001de2:	2320      	movs	r3, #32
 8001de4:	e003      	b.n	8001dee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d106      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	2103      	movs	r1, #3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa54 	bl	80012a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fb5b 	bl	80014c0 <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 813f 	bne.w	8002090 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f7ff fac8 	bl	80013b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a8e      	ldr	r2, [pc, #568]	; (8002064 <HAL_ADC_ConfigChannel+0x678>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	f040 8130 	bne.w	8002090 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x46c>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e019      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x4a0>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e70:	2320      	movs	r3, #32
 8001e72:	e003      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2b09      	cmp	r3, #9
 8001e84:	bf94      	ite	ls
 8001e86:	2301      	movls	r3, #1
 8001e88:	2300      	movhi	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d079      	beq.n	8001f84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x4c0>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	069b      	lsls	r3, r3, #26
 8001ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eaa:	e015      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x4ec>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ebc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	069b      	lsls	r3, r3, #26
 8001ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x50c>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	e017      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x53c>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	ea42 0103 	orr.w	r1, r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x562>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	051b      	lsls	r3, r3, #20
 8001f4c:	e018      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x594>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e003      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3301      	adds	r3, #1
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f80:	430b      	orrs	r3, r1
 8001f82:	e080      	b.n	8002086 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x5b4>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	3301      	adds	r3, #1
 8001f98:	069b      	lsls	r3, r3, #26
 8001f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9e:	e015      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x5e0>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e003      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x600>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	e017      	b.n	800201c <HAL_ADC_ConfigChannel+0x630>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	ea42 0103 	orr.w	r1, r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x65c>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	3301      	adds	r3, #1
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	3b1e      	subs	r3, #30
 8002040:	051b      	lsls	r3, r3, #20
 8002042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002046:	e01d      	b.n	8002084 <HAL_ADC_ConfigChannel+0x698>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	613b      	str	r3, [r7, #16]
  return result;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d103      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e005      	b.n	8002070 <HAL_ADC_ConfigChannel+0x684>
 8002064:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	3b1e      	subs	r3, #30
 800207e:	051b      	lsls	r3, r3, #20
 8002080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002084:	430b      	orrs	r3, r1
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	6892      	ldr	r2, [r2, #8]
 800208a:	4619      	mov	r1, r3
 800208c:	f7ff f966 	bl	800135c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_ADC_ConfigChannel+0x7a0>)
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d06c      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800209c:	483c      	ldr	r0, [pc, #240]	; (8002190 <HAL_ADC_ConfigChannel+0x7a4>)
 800209e:	f7ff f8bb 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 80020a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3a      	ldr	r2, [pc, #232]	; (8002194 <HAL_ADC_ConfigChannel+0x7a8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d127      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d121      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a35      	ldr	r2, [pc, #212]	; (8002198 <HAL_ADC_ConfigChannel+0x7ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d157      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ce:	4619      	mov	r1, r3
 80020d0:	482f      	ldr	r0, [pc, #188]	; (8002190 <HAL_ADC_ConfigChannel+0x7a4>)
 80020d2:	f7ff f88e 	bl	80011f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d6:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_ADC_ConfigChannel+0x7b0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	4a30      	ldr	r2, [pc, #192]	; (80021a0 <HAL_ADC_ConfigChannel+0x7b4>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020fe:	e03a      	b.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d113      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x746>
 800210a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800210e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_ADC_ConfigChannel+0x7ac>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d12a      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002128:	4619      	mov	r1, r3
 800212a:	4819      	ldr	r0, [pc, #100]	; (8002190 <HAL_ADC_ConfigChannel+0x7a4>)
 800212c:	f7ff f861 	bl	80011f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002130:	e021      	b.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d11c      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800213c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <HAL_ADC_ConfigChannel+0x7ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d111      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <HAL_ADC_ConfigChannel+0x7a4>)
 800215e:	f7ff f848 	bl	80011f2 <LL_ADC_SetCommonPathInternalCh>
 8002162:	e008      	b.n	8002176 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800217e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002182:	4618      	mov	r0, r3
 8002184:	37d8      	adds	r7, #216	; 0xd8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	80080000 	.word	0x80080000
 8002190:	50040300 	.word	0x50040300
 8002194:	c7520000 	.word	0xc7520000
 8002198:	50040000 	.word	0x50040000
 800219c:	2000020c 	.word	0x2000020c
 80021a0:	053e2d63 	.word	0x053e2d63
 80021a4:	cb840000 	.word	0xcb840000
 80021a8:	80000001 	.word	0x80000001

080021ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f981 	bl	80014c0 <LL_ADC_IsEnabled>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d14d      	bne.n	8002260 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <ADC_Enable+0xc0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e039      	b.n	8002262 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f950 	bl	8001498 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021f8:	f7fe ffb8 	bl	800116c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021fe:	e028      	b.n	8002252 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f95b 	bl	80014c0 <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f93f 	bl	8001498 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800221a:	f7fe ffa7 	bl	800116c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d914      	bls.n	8002252 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00d      	beq.n	8002252 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e007      	b.n	8002262 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d1cf      	bne.n	8002200 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	8000003f 	.word	0x8000003f

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023dc:	d301      	bcc.n	80023e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023de:	2301      	movs	r3, #1
 80023e0:	e00f      	b.n	8002402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <SysTick_Config+0x40>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ea:	210f      	movs	r1, #15
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f7ff ff8e 	bl	8002310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <SysTick_Config+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Config+0x40>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff29 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff3e 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff8e 	bl	8002364 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5d 	bl	8002310 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff31 	bl	80022d4 <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa2 	bl	80023cc <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e014      	b.n	80024ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fe fc37 	bl	8000d28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	795b      	ldrb	r3, [r3, #5]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_DAC_Start+0x16>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e03b      	b.n	8002564 <HAL_DAC_Start+0x8e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002520:	2b04      	cmp	r3, #4
 8002522:	d118      	bne.n	8002556 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	e00f      	b.n	8002556 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002540:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002544:	d107      	bne.n	8002556 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0202 	orr.w	r2, r2, #2
 8002554:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	3308      	adds	r3, #8
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e004      	b.n	80025a4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	3314      	adds	r3, #20
 80025a2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	461a      	mov	r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b088      	sub	sp, #32
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	795b      	ldrb	r3, [r3, #5]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_DAC_ConfigChannel+0x1c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e107      	b.n	80027e6 <HAL_DAC_ConfigChannel+0x22c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2202      	movs	r2, #2
 80025e0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d174      	bne.n	80026d4 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80025ea:	f7fe fdbf 	bl	800116c <HAL_GetTick>
 80025ee:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d134      	bne.n	8002660 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025f6:	e011      	b.n	800261c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025f8:	f7fe fdb8 	bl	800116c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d90a      	bls.n	800261c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f043 0208 	orr.w	r2, r3, #8
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2203      	movs	r2, #3
 8002616:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0e4      	b.n	80027e6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e6      	bne.n	80025f8 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800262a:	2001      	movs	r0, #1
 800262c:	f7fe fdaa 	bl	8001184 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	6992      	ldr	r2, [r2, #24]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
 800263a:	e01e      	b.n	800267a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800263c:	f7fe fd96 	bl	800116c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d90a      	bls.n	8002660 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f043 0208 	orr.w	r2, r3, #8
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2203      	movs	r2, #3
 800265a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0c2      	b.n	80027e6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	2b00      	cmp	r3, #0
 8002668:	dbe8      	blt.n	800263c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800266a:	2001      	movs	r0, #1
 800266c:	f7fe fd8a 	bl	8001184 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	6992      	ldr	r2, [r2, #24]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	ea02 0103 	and.w	r1, r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	21ff      	movs	r1, #255	; 0xff
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	ea02 0103 	and.w	r1, r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d11d      	bne.n	8002718 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	221f      	movs	r2, #31
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2207      	movs	r2, #7
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	431a      	orrs	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43da      	mvns	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	22c0      	movs	r2, #192	; 0xc0
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d005      	beq.n	8002812 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2204      	movs	r2, #4
 800280a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e029      	b.n	8002866 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 020e 	bic.w	r2, r2, #14
 8002820:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f003 021c 	and.w	r2, r3, #28
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
    }
  }
  return status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287e:	e154      	b.n	8002b2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8146 	beq.w	8002b24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d005      	beq.n	80028b0 <HAL_GPIO_Init+0x40>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028e6:	2201      	movs	r2, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0201 	and.w	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d017      	beq.n	800294e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d123      	bne.n	80029a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	6939      	ldr	r1, [r7, #16]
 800299e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0203 	and.w	r2, r3, #3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80a0 	beq.w	8002b24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e4:	4b58      	ldr	r3, [pc, #352]	; (8002b48 <HAL_GPIO_Init+0x2d8>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x2d8>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6613      	str	r3, [r2, #96]	; 0x60
 80029f0:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <HAL_GPIO_Init+0x2d8>)
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_GPIO_Init+0x2dc>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a26:	d019      	beq.n	8002a5c <HAL_GPIO_Init+0x1ec>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_GPIO_Init+0x2e0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_GPIO_Init+0x1e8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x2e4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00d      	beq.n	8002a54 <HAL_GPIO_Init+0x1e4>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <HAL_GPIO_Init+0x1e0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a46      	ldr	r2, [pc, #280]	; (8002b5c <HAL_GPIO_Init+0x2ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_GPIO_Init+0x1dc>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e008      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a50:	2303      	movs	r3, #3
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a6e:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_GPIO_Init+0x2dc>)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a7c:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa0:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aa6:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aca:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b1e:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f aea3 	bne.w	8002880 <HAL_GPIO_Init+0x10>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	48000400 	.word	0x48000400
 8002b54:	48000800 	.word	0x48000800
 8002b58:	48000c00 	.word	0x48000c00
 8002b5c:	48001000 	.word	0x48001000
 8002b60:	40010400 	.word	0x40010400

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b80:	e002      	b.n	8002b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4013      	ands	r3, r2
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43d9      	mvns	r1, r3
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d130      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d038      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9b      	lsrs	r3, r3, #18
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c28:	e002      	b.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d102      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f2      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d110      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e00f      	b.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d007      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000
 8002c88:	2000020c 	.word	0x2000020c
 8002c8c:	431bde83 	.word	0x431bde83

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 bc11 	b.w	80034c6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca4:	4ba0      	ldr	r3, [pc, #640]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cae:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80e4 	beq.w	8002e8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4c>
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	f040 808b 	bne.w	8002dea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f040 8087 	bne.w	8002dea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x64>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e3e8      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_RCC_OscConfig+0x7e>
 8002d04:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	e005      	b.n	8002d1a <HAL_RCC_OscConfig+0x8a>
 8002d0e:	4b86      	ldr	r3, [pc, #536]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d223      	bcs.n	8002d66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fd78 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e3c9      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d32:	4b7d      	ldr	r3, [pc, #500]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7c      	ldr	r2, [pc, #496]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b7a      	ldr	r3, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4977      	ldr	r1, [pc, #476]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d50:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	4972      	ldr	r1, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e025      	b.n	8002db2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d66:	4b70      	ldr	r3, [pc, #448]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6f      	ldr	r2, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	496a      	ldr	r1, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4965      	ldr	r1, [pc, #404]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fd38 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e389      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db2:	f000 fc6f 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	495a      	ldr	r1, [pc, #360]	; (8002f2c <HAL_RCC_OscConfig+0x29c>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a58      	ldr	r2, [pc, #352]	; (8002f30 <HAL_RCC_OscConfig+0x2a0>)
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x2a4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f978 	bl	80010cc <HAL_InitTick>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d052      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	e36d      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d032      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df2:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe f9b5 	bl	800116c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e06:	f7fe f9b1 	bl	800116c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e356      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	493a      	ldr	r1, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	4935      	ldr	r1, [pc, #212]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	e01a      	b.n	8002e8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e58:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e64:	f7fe f982 	bl	800116c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6c:	f7fe f97e 	bl	800116c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e323      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1dc>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d073      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x21c>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d063      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d15f      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e300      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x24c>
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01d      	b.n	8002f18 <HAL_RCC_OscConfig+0x288>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x270>
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0x288>
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <HAL_RCC_OscConfig+0x298>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f924 	bl	800116c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	e010      	b.n	8002f4a <HAL_RCC_OscConfig+0x2ba>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	0800603c 	.word	0x0800603c
 8002f30:	2000020c 	.word	0x2000020c
 8002f34:	20000210 	.word	0x20000210
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe f918 	bl	800116c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e2bd      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	4baf      	ldr	r3, [pc, #700]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2a8>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe f908 	bl	800116c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe f904 	bl	800116c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e2a9      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	4ba5      	ldr	r3, [pc, #660]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d0>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d060      	beq.n	8003050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x310>
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d116      	bne.n	8002fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa0:	4b99      	ldr	r3, [pc, #612]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x328>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e286      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b93      	ldr	r3, [pc, #588]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	4990      	ldr	r1, [pc, #576]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	e040      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd6:	4b8c      	ldr	r3, [pc, #560]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a8b      	ldr	r2, [pc, #556]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f8c3 	bl	800116c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe f8bf 	bl	800116c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e264      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b7f      	ldr	r3, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	497c      	ldr	r1, [pc, #496]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	e018      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a79      	ldr	r2, [pc, #484]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe f89f 	bl	800116c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe f89b 	bl	800116c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e240      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d03c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01c      	beq.n	800309e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306a:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f87a 	bl	800116c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f876 	bl	800116c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e21b      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	4b5e      	ldr	r3, [pc, #376]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ef      	beq.n	800307c <HAL_RCC_OscConfig+0x3ec>
 800309c:	e01b      	b.n	80030d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe f85d 	bl	800116c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fe f859 	bl	800116c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1fe      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ef      	bne.n	80030b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80a6 	beq.w	8003230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030e8:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	4a43      	ldr	r2, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4b3e      	ldr	r3, [pc, #248]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d118      	bne.n	800314e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3a      	ldr	r2, [pc, #232]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7fe f820 	bl	800116c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fe f81c 	bl	800116c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1c1      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <HAL_RCC_OscConfig+0x4d8>
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003166:	e024      	b.n	80031b2 <HAL_RCC_OscConfig+0x522>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d110      	bne.n	8003192 <HAL_RCC_OscConfig+0x502>
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a24      	ldr	r2, [pc, #144]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003190:	e00f      	b.n	80031b2 <HAL_RCC_OscConfig+0x522>
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031aa:	f023 0304 	bic.w	r3, r3, #4
 80031ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fd ffd7 	bl	800116c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fd ffd3 	bl	800116c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e176      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ed      	beq.n	80031c2 <HAL_RCC_OscConfig+0x532>
 80031e6:	e01a      	b.n	800321e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd ffc0 	bl	800116c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fd ffbc 	bl	800116c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d906      	bls.n	8003210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e15f      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003210:	4baa      	ldr	r3, [pc, #680]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e8      	bne.n	80031f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321e:	7ffb      	ldrb	r3, [r7, #31]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4ba5      	ldr	r3, [pc, #660]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4aa4      	ldr	r2, [pc, #656]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d03c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01c      	beq.n	800327e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003244:	4b9d      	ldr	r3, [pc, #628]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800324a:	4a9c      	ldr	r2, [pc, #624]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd ff8a 	bl	800116c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325c:	f7fd ff86 	bl	800116c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e12b      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	4b93      	ldr	r3, [pc, #588]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <HAL_RCC_OscConfig+0x5cc>
 800327c:	e01b      	b.n	80032b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800327e:	4b8f      	ldr	r3, [pc, #572]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003284:	4a8d      	ldr	r2, [pc, #564]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fd ff6d 	bl	800116c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003296:	f7fd ff69 	bl	800116c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e10e      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	4b84      	ldr	r3, [pc, #528]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ef      	bne.n	8003296 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8102 	beq.w	80034c4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	f040 80c5 	bne.w	8003454 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032ca:	4b7c      	ldr	r3, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d12c      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	3b01      	subs	r3, #1
 80032ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d123      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11b      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d113      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d109      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d067      	beq.n	8003408 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d062      	beq.n	8003404 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0bb      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800334e:	4b5b      	ldr	r3, [pc, #364]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800335a:	f7fd ff07 	bl	800116c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7fd ff03 	bl	800116c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0a8      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	4b51      	ldr	r3, [pc, #324]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003380:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCC_OscConfig+0x830>)
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003390:	3a01      	subs	r2, #1
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800339a:	0212      	lsls	r2, r2, #8
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a2:	0852      	lsrs	r2, r2, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0552      	lsls	r2, r2, #21
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0652      	lsls	r2, r2, #25
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ba:	06d2      	lsls	r2, r2, #27
 80033bc:	430a      	orrs	r2, r1
 80033be:	493f      	ldr	r1, [pc, #252]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3c      	ldr	r2, [pc, #240]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a39      	ldr	r2, [pc, #228]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033dc:	f7fd fec6 	bl	800116c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fd fec2 	bl	800116c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e067      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003402:	e05f      	b.n	80034c4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e05e      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d157      	bne.n	80034c4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a28      	ldr	r2, [pc, #160]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 800341a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800342c:	f7fd fe9e 	bl	800116c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fe9a 	bl	800116c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e03f      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x7a4>
 8003452:	e037      	b.n	80034c4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d02d      	beq.n	80034b6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a17      	ldr	r2, [pc, #92]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003464:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003478:	f023 0303 	bic.w	r3, r3, #3
 800347c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 8003484:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fd fe6d 	bl	800116c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd fe69 	bl	800116c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e00e      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <HAL_RCC_OscConfig+0x82c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x806>
 80034b4:	e006      	b.n	80034c4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e005      	b.n	80034c6 <HAL_RCC_OscConfig+0x836>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0c8      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b66      	ldr	r3, [pc, #408]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4961      	ldr	r1, [pc, #388]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b0      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04c      	beq.n	80035ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d121      	bne.n	8003578 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e09e      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d107      	bne.n	8003550 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003540:	4b50      	ldr	r3, [pc, #320]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d115      	bne.n	8003578 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e092      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003558:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e086      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e07e      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 0203 	bic.w	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	493f      	ldr	r1, [pc, #252]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358a:	f7fd fdef 	bl	800116c <HAL_GetTick>
 800358e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003592:	f7fd fdeb 	bl	800116c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e066      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 020c 	and.w	r2, r3, #12
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d1eb      	bne.n	8003592 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	492c      	ldr	r1, [pc, #176]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d210      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	4924      	ldr	r1, [pc, #144]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e036      	b.n	8003676 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4918      	ldr	r1, [pc, #96]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4910      	ldr	r1, [pc, #64]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003646:	f000 f825 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCC_ClockConfig+0x1b4>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490c      	ldr	r1, [pc, #48]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fd2e 	bl	80010cc <HAL_InitTick>
 8003670:	4603      	mov	r3, r0
 8003672:	72fb      	strb	r3, [r7, #11]

  return status;
 8003674:	7afb      	ldrb	r3, [r7, #11]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40022000 	.word	0x40022000
 8003684:	40021000 	.word	0x40021000
 8003688:	0800603c 	.word	0x0800603c
 800368c:	2000020c 	.word	0x2000020c
 8003690:	20000210 	.word	0x20000210

08003694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a2:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x34>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d121      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d11e      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036d4:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e005      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036f0:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003704:	e00a      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d102      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e004      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d101      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800371a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d134      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0xa6>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d003      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0xac>
 8003738:	e005      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800373c:	617b      	str	r3, [r7, #20]
      break;
 800373e:	e005      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003742:	617b      	str	r3, [r7, #20]
      break;
 8003744:	e002      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	617b      	str	r3, [r7, #20]
      break;
 800374a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	3301      	adds	r3, #1
 8003758:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	fb02 f203 	mul.w	r2, r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_GetSysClockFreq+0x108>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	0e5b      	lsrs	r3, r3, #25
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	3301      	adds	r3, #1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800378c:	69bb      	ldr	r3, [r7, #24]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	08006054 	.word	0x08006054
 80037a4:	00f42400 	.word	0x00f42400

080037a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000020c 	.word	0x2000020c

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4904      	ldr	r1, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	0800604c 	.word	0x0800604c

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037f0:	f7ff ffda 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0adb      	lsrs	r3, r3, #11
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	0800604c 	.word	0x0800604c

08003818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003830:	f7ff f9ca 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8003834:	6178      	str	r0, [r7, #20]
 8003836:	e014      	b.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	; 0x58
 8003844:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003850:	f7ff f9ba 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8003854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d10b      	bne.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d919      	bls.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2ba0      	cmp	r3, #160	; 0xa0
 8003874:	d902      	bls.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003876:	2302      	movs	r3, #2
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e013      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800387c:	2301      	movs	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e010      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d902      	bls.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003888:	2303      	movs	r3, #3
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e00a      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d102      	bne.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003894:	2302      	movs	r3, #2
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e004      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d101      	bne.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0207 	bic.w	r2, r3, #7
 80038ac:	4909      	ldr	r1, [pc, #36]	; (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d001      	beq.n	80038c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40022000 	.word	0x40022000

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e0:	2300      	movs	r3, #0
 80038e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038e4:	2300      	movs	r3, #0
 80038e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d031      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038fc:	d01a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003902:	d814      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800390c:	d10f      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800390e:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a5c      	ldr	r2, [pc, #368]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003918:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800391a:	e00c      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f9f0 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	74fb      	strb	r3, [r7, #19]
      break;
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800393c:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	494e      	ldr	r1, [pc, #312]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003952:	e001      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 809e 	beq.w	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800396a:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003980:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	4a3f      	ldr	r2, [pc, #252]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398a:	6593      	str	r3, [r2, #88]	; 0x58
 800398c:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003998:	2301      	movs	r3, #1
 800399a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039a8:	f7fd fbe0 	bl	800116c <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ae:	e009      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7fd fbdc 	bl	800116c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	74fb      	strb	r3, [r7, #19]
        break;
 80039c2:	e005      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ef      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d15a      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01e      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d019      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a1e:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d016      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fb9c 	bl	800116c <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a36:	e00b      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd fb98 	bl	800116c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d902      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8003a4e:	e006      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ec      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a7a:	e009      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	74bb      	strb	r3, [r7, #18]
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a90:	7c7b      	ldrb	r3, [r7, #17]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a96:	4b9b      	ldr	r3, [pc, #620]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	4a9a      	ldr	r2, [pc, #616]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aae:	4b95      	ldr	r3, [pc, #596]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f023 0203 	bic.w	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4991      	ldr	r1, [pc, #580]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad0:	4b8c      	ldr	r3, [pc, #560]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 020c 	bic.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	4989      	ldr	r1, [pc, #548]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af2:	4b84      	ldr	r3, [pc, #528]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	4980      	ldr	r1, [pc, #512]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b14:	4b7b      	ldr	r3, [pc, #492]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4978      	ldr	r1, [pc, #480]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b36:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	496f      	ldr	r1, [pc, #444]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4967      	ldr	r1, [pc, #412]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b7a:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	495e      	ldr	r1, [pc, #376]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	4956      	ldr	r1, [pc, #344]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	494d      	ldr	r1, [pc, #308]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d028      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	4945      	ldr	r1, [pc, #276]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c00:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	60d3      	str	r3, [r2, #12]
 8003c0c:	e011      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f872 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d028      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	492d      	ldr	r1, [pc, #180]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c5e:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4a28      	ldr	r2, [pc, #160]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c68:	60d3      	str	r3, [r2, #12]
 8003c6a:	e011      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f843 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01c      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	4916      	ldr	r1, [pc, #88]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cba:	d10c      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f820 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	4904      	ldr	r1, [pc, #16]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000

08003d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d16:	4b74      	ldr	r3, [pc, #464]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d22:	4b71      	ldr	r3, [pc, #452]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d10d      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
       ||
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d3a:	4b6b      	ldr	r3, [pc, #428]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
       ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d047      	beq.n	8003dde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	e044      	b.n	8003dde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d018      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0x86>
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d825      	bhi.n	8003dac <RCCEx_PLLSAI1_Config+0xa4>
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0x62>
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d009      	beq.n	8003d7c <RCCEx_PLLSAI1_Config+0x74>
 8003d68:	e020      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11d      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7a:	e01a      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d116      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e013      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8e:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003daa:	e006      	b.n	8003dba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e004      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dc2:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	4943      	ldr	r1, [pc, #268]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d17c      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003de4:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3f      	ldr	r2, [pc, #252]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df0:	f7fd f9bc 	bl	800116c <HAL_GetTick>
 8003df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df6:	e009      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003df8:	f7fd f9b8 	bl	800116c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d902      	bls.n	8003e0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	73fb      	strb	r3, [r7, #15]
        break;
 8003e0a:	e005      	b.n	8003e18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ef      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d15f      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d110      	bne.n	8003e46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6892      	ldr	r2, [r2, #8]
 8003e34:	0211      	lsls	r1, r2, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68d2      	ldr	r2, [r2, #12]
 8003e3a:	06d2      	lsls	r2, r2, #27
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	492a      	ldr	r1, [pc, #168]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	610b      	str	r3, [r1, #16]
 8003e44:	e027      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d112      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	0211      	lsls	r1, r2, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6912      	ldr	r2, [r2, #16]
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0552      	lsls	r2, r2, #21
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	610b      	str	r3, [r1, #16]
 8003e70:	e011      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	0211      	lsls	r1, r2, #8
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6952      	ldr	r2, [r2, #20]
 8003e88:	0852      	lsrs	r2, r2, #1
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	0652      	lsls	r2, r2, #25
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	4915      	ldr	r1, [pc, #84]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd f963 	bl	800116c <HAL_GetTick>
 8003ea6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea8:	e009      	b.n	8003ebe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eaa:	f7fd f95f 	bl	800116c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d902      	bls.n	8003ebe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	73fb      	strb	r3, [r7, #15]
          break;
 8003ebc:	e005      	b.n	8003eca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ef      	beq.n	8003eaa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e095      	b.n	800402a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0e:	d009      	beq.n	8003f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc ff8a 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f64:	d902      	bls.n	8003f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e002      	b.n	8003f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 0204 	and.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b08a      	sub	sp, #40	; 0x28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x26>
 8004054:	2302      	movs	r3, #2
 8004056:	e1fb      	b.n	8004450 <HAL_SPI_TransmitReceive+0x41e>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004060:	f7fd f884 	bl	800116c <HAL_GetTick>
 8004064:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800406c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800407c:	7efb      	ldrb	r3, [r7, #27]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d00e      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x6e>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004088:	d106      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x66>
 8004092:	7efb      	ldrb	r3, [r7, #27]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d003      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004098:	2302      	movs	r3, #2
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800409e:	e1cd      	b.n	800443c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x80>
 80040ac:	887b      	ldrh	r3, [r7, #2]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040b8:	e1c0      	b.n	800443c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d003      	beq.n	80040ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2205      	movs	r2, #5
 80040ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	887a      	ldrh	r2, [r7, #2]
 80040de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	887a      	ldrh	r2, [r7, #2]
 80040e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	887a      	ldrh	r2, [r7, #2]
 80040fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004110:	d802      	bhi.n	8004118 <HAL_SPI_TransmitReceive+0xe6>
 8004112:	8a3b      	ldrh	r3, [r7, #16]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d908      	bls.n	800412a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	e007      	b.n	800413a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004138:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d007      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004160:	d97c      	bls.n	800425c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x13e>
 800416a:	8a7b      	ldrh	r3, [r7, #18]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d169      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004194:	e056      	b.n	8004244 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d11b      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x1aa>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x1aa>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d113      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d11c      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x1f2>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	b292      	uxth	r2, r2
 8004202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004224:	f7fc ffa2 	bl	800116c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004230:	429a      	cmp	r2, r3
 8004232:	d807      	bhi.n	8004244 <HAL_SPI_TransmitReceive+0x212>
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d003      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004242:	e0fb      	b.n	800443c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1a3      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x164>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d19d      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x164>
 800425a:	e0df      	b.n	800441c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_SPI_TransmitReceive+0x23a>
 8004264:	8a7b      	ldrh	r3, [r7, #18]
 8004266:	2b01      	cmp	r3, #1
 8004268:	f040 80cb 	bne.w	8004402 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d912      	bls.n	800429c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b02      	subs	r3, #2
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800429a:	e0b2      	b.n	8004402 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c2:	e09e      	b.n	8004402 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d134      	bne.n	800433c <HAL_SPI_TransmitReceive+0x30a>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02f      	beq.n	800433c <HAL_SPI_TransmitReceive+0x30a>
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d12c      	bne.n	800433c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d912      	bls.n	8004312 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b02      	subs	r3, #2
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004310:	e012      	b.n	8004338 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d148      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x3aa>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d042      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d923      	bls.n	80043aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	b292      	uxth	r2, r2
 800436e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b02      	subs	r3, #2
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d81f      	bhi.n	80043d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	e016      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f103 020c 	add.w	r2, r3, #12
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	7812      	ldrb	r2, [r2, #0]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043d8:	2301      	movs	r3, #1
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043dc:	f7fc fec6 	bl	800116c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d803      	bhi.n	80043f4 <HAL_SPI_TransmitReceive+0x3c2>
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x3c8>
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004400:	e01c      	b.n	800443c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	f47f af5b 	bne.w	80042c4 <HAL_SPI_TransmitReceive+0x292>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	f47f af54 	bne.w	80042c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fa57 	bl	80048d4 <SPI_EndRxTxTransaction>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	661a      	str	r2, [r3, #96]	; 0x60
 8004438:	e000      	b.n	800443c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800443a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800444c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
    return;
 800449a:	e0d7      	b.n	800464c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_SPI_IRQHandler+0x66>
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	09db      	lsrs	r3, r3, #7
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
    return;
 80044bc:	e0c6      	b.n	800464c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_SPI_IRQHandler+0x8c>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80b4 	beq.w	800464c <HAL_SPI_IRQHandler+0x1f4>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80ad 	beq.w	800464c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d023      	beq.n	8004546 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d011      	beq.n	800452e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	f043 0204 	orr.w	r2, r3, #4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	e00b      	b.n	8004546 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	693b      	ldr	r3, [r7, #16]
        return;
 8004544:	e082      	b.n	800464c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d014      	beq.n	800457c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00c      	beq.n	80045a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	f043 0208 	orr.w	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d04f      	beq.n	800464a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <HAL_SPI_IRQHandler+0x17e>
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d034      	beq.n	8004640 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0203 	bic.w	r2, r2, #3
 80045e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d011      	beq.n	8004612 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_SPI_IRQHandler+0x1fc>)
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f8f7 	bl	80027ee <HAL_DMA_Abort_IT>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	2b00      	cmp	r3, #0
 8004618:	d016      	beq.n	8004648 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_SPI_IRQHandler+0x1fc>)
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe f8e1 	bl	80027ee <HAL_DMA_Abort_IT>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800463e:	e003      	b.n	8004648 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f809 	bl	8004658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004646:	e000      	b.n	800464a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004648:	bf00      	nop
    return;
 800464a:	bf00      	nop
  }
}
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	0800466d 	.word	0x0800466d

08004658 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff ffe5 	bl	8004658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046a8:	f7fc fd60 	bl	800116c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046b8:	f7fc fd58 	bl	800116c <HAL_GetTick>
 80046bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046be:	4b39      	ldr	r3, [pc, #228]	; (80047a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	015b      	lsls	r3, r3, #5
 80046c4:	0d1b      	lsrs	r3, r3, #20
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ce:	e054      	b.n	800477a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d050      	beq.n	800477a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046d8:	f7fc fd48 	bl	800116c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d902      	bls.n	80046ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d13d      	bne.n	800476a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004706:	d111      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004710:	d004      	beq.n	800471c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471a:	d107      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004734:	d10f      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e017      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3b01      	subs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d19b      	bne.n	80046d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000020c 	.word	0x2000020c

080047a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047ba:	f7fc fcd7 	bl	800116c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80047ca:	f7fc fccf 	bl	800116c <HAL_GetTick>
 80047ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047d8:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00da      	lsls	r2, r3, #3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	0d1b      	lsrs	r3, r3, #20
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047f0:	e060      	b.n	80048b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047f8:	d107      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d050      	beq.n	80048b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004812:	f7fc fcab 	bl	800116c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	429a      	cmp	r2, r3
 8004820:	d902      	bls.n	8004828 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d13d      	bne.n	80048a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004840:	d111      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484a:	d004      	beq.n	8004856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004854:	d107      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486e:	d10f      	bne.n	8004890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e010      	b.n	80048c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d196      	bne.n	80047f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3728      	adds	r7, #40	; 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000020c 	.word	0x2000020c

080048d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff ff5b 	bl	80047a8 <SPI_WaitFifoStateUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e027      	b.n	8004958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff fec0 	bl	8004698 <SPI_WaitFlagStateUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e014      	b.n	8004958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2200      	movs	r2, #0
 8004936:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ff34 	bl	80047a8 <SPI_WaitFifoStateUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e000      	b.n	8004958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e049      	b.n	8004a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fab2 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 f97c 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d122      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d11b      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f06f 0202 	mvn.w	r2, #2
 8004a3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f905 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004a56:	e005      	b.n	8004a64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8f7 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f908 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d122      	bne.n	8004abe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d11b      	bne.n	8004abe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f06f 0204 	mvn.w	r2, #4
 8004a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8db 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004aaa:	e005      	b.n	8004ab8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8cd 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8de 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d122      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d11b      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0208 	mvn.w	r2, #8
 8004ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f8b1 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004afe:	e005      	b.n	8004b0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8a3 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8b4 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d122      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d11b      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0210 	mvn.w	r2, #16
 8004b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f887 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004b52:	e005      	b.n	8004b60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f879 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f88a 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10e      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d107      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0201 	mvn.w	r2, #1
 8004b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fc f813 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d10e      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d107      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f8dd 	bl	8004d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8d0 	bl	8004d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d10e      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d107      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f838 	bl	8004c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d10e      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d107      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0220 	mvn.w	r2, #32
 8004c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f890 	bl	8004d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a2a      	ldr	r2, [pc, #168]	; (8004d58 <TIM_Base_SetConfig+0xbc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0x20>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d108      	bne.n	8004cce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <TIM_Base_SetConfig+0xbc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <TIM_Base_SetConfig+0x52>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d007      	beq.n	8004cee <TIM_Base_SetConfig+0x52>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <TIM_Base_SetConfig+0xc0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_Base_SetConfig+0x52>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <TIM_Base_SetConfig+0xc4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <TIM_Base_SetConfig+0xbc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0xa0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <TIM_Base_SetConfig+0xc0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0xa0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <TIM_Base_SetConfig+0xc4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400

08004d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e040      	b.n	8004e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb ffee 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8c0 	bl	8004f64 <UART_SetConfig>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e022      	b.n	8004e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fae8 	bl	80053cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fb6f 	bl	8005510 <UART_CheckIdleState>
 8004e32:	4603      	mov	r3, r0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	f040 8082 	bne.w	8004f5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_UART_Transmit+0x26>
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07a      	b.n	8004f5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_UART_Transmit+0x38>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e073      	b.n	8004f5c <HAL_UART_Transmit+0x120>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2221      	movs	r2, #33	; 0x21
 8004e88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8a:	f7fc f96f 	bl	800116c <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d108      	bne.n	8004ebc <HAL_UART_Transmit+0x80>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e003      	b.n	8004ec4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ecc:	e02d      	b.n	8004f2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fb62 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e039      	b.n	8004f5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efa:	b292      	uxth	r2, r2
 8004efc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3302      	adds	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e008      	b.n	8004f18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	b292      	uxth	r2, r2
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3301      	adds	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1cb      	bne.n	8004ece <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2140      	movs	r1, #64	; 0x40
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fb2e 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e005      	b.n	8004f5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	b5b0      	push	{r4, r5, r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4baa      	ldr	r3, [pc, #680]	; (8005238 <UART_SetConfig+0x2d4>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a9f      	ldr	r2, [pc, #636]	; (800523c <UART_SetConfig+0x2d8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a96      	ldr	r2, [pc, #600]	; (8005240 <UART_SetConfig+0x2dc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d121      	bne.n	800502e <UART_SetConfig+0xca>
 8004fea:	4b96      	ldr	r3, [pc, #600]	; (8005244 <UART_SetConfig+0x2e0>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d817      	bhi.n	8005028 <UART_SetConfig+0xc4>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x9c>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005011 	.word	0x08005011
 8005004:	0800501d 	.word	0x0800501d
 8005008:	08005017 	.word	0x08005017
 800500c:	08005023 	.word	0x08005023
 8005010:	2301      	movs	r3, #1
 8005012:	76fb      	strb	r3, [r7, #27]
 8005014:	e096      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005016:	2302      	movs	r3, #2
 8005018:	76fb      	strb	r3, [r7, #27]
 800501a:	e093      	b.n	8005144 <UART_SetConfig+0x1e0>
 800501c:	2304      	movs	r3, #4
 800501e:	76fb      	strb	r3, [r7, #27]
 8005020:	e090      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005022:	2308      	movs	r3, #8
 8005024:	76fb      	strb	r3, [r7, #27]
 8005026:	e08d      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005028:	2310      	movs	r3, #16
 800502a:	76fb      	strb	r3, [r7, #27]
 800502c:	e08a      	b.n	8005144 <UART_SetConfig+0x1e0>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a85      	ldr	r2, [pc, #532]	; (8005248 <UART_SetConfig+0x2e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d132      	bne.n	800509e <UART_SetConfig+0x13a>
 8005038:	4b82      	ldr	r3, [pc, #520]	; (8005244 <UART_SetConfig+0x2e0>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d828      	bhi.n	8005098 <UART_SetConfig+0x134>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0xe8>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005081 	.word	0x08005081
 8005050:	08005099 	.word	0x08005099
 8005054:	08005099 	.word	0x08005099
 8005058:	08005099 	.word	0x08005099
 800505c:	0800508d 	.word	0x0800508d
 8005060:	08005099 	.word	0x08005099
 8005064:	08005099 	.word	0x08005099
 8005068:	08005099 	.word	0x08005099
 800506c:	08005087 	.word	0x08005087
 8005070:	08005099 	.word	0x08005099
 8005074:	08005099 	.word	0x08005099
 8005078:	08005099 	.word	0x08005099
 800507c:	08005093 	.word	0x08005093
 8005080:	2300      	movs	r3, #0
 8005082:	76fb      	strb	r3, [r7, #27]
 8005084:	e05e      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005086:	2302      	movs	r3, #2
 8005088:	76fb      	strb	r3, [r7, #27]
 800508a:	e05b      	b.n	8005144 <UART_SetConfig+0x1e0>
 800508c:	2304      	movs	r3, #4
 800508e:	76fb      	strb	r3, [r7, #27]
 8005090:	e058      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005092:	2308      	movs	r3, #8
 8005094:	76fb      	strb	r3, [r7, #27]
 8005096:	e055      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005098:	2310      	movs	r3, #16
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e052      	b.n	8005144 <UART_SetConfig+0x1e0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a6a      	ldr	r2, [pc, #424]	; (800524c <UART_SetConfig+0x2e8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d120      	bne.n	80050ea <UART_SetConfig+0x186>
 80050a8:	4b66      	ldr	r3, [pc, #408]	; (8005244 <UART_SetConfig+0x2e0>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050b2:	2b30      	cmp	r3, #48	; 0x30
 80050b4:	d013      	beq.n	80050de <UART_SetConfig+0x17a>
 80050b6:	2b30      	cmp	r3, #48	; 0x30
 80050b8:	d814      	bhi.n	80050e4 <UART_SetConfig+0x180>
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d009      	beq.n	80050d2 <UART_SetConfig+0x16e>
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d810      	bhi.n	80050e4 <UART_SetConfig+0x180>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <UART_SetConfig+0x168>
 80050c6:	2b10      	cmp	r3, #16
 80050c8:	d006      	beq.n	80050d8 <UART_SetConfig+0x174>
 80050ca:	e00b      	b.n	80050e4 <UART_SetConfig+0x180>
 80050cc:	2300      	movs	r3, #0
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e038      	b.n	8005144 <UART_SetConfig+0x1e0>
 80050d2:	2302      	movs	r3, #2
 80050d4:	76fb      	strb	r3, [r7, #27]
 80050d6:	e035      	b.n	8005144 <UART_SetConfig+0x1e0>
 80050d8:	2304      	movs	r3, #4
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	e032      	b.n	8005144 <UART_SetConfig+0x1e0>
 80050de:	2308      	movs	r3, #8
 80050e0:	76fb      	strb	r3, [r7, #27]
 80050e2:	e02f      	b.n	8005144 <UART_SetConfig+0x1e0>
 80050e4:	2310      	movs	r3, #16
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	e02c      	b.n	8005144 <UART_SetConfig+0x1e0>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a53      	ldr	r2, [pc, #332]	; (800523c <UART_SetConfig+0x2d8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d125      	bne.n	8005140 <UART_SetConfig+0x1dc>
 80050f4:	4b53      	ldr	r3, [pc, #332]	; (8005244 <UART_SetConfig+0x2e0>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005102:	d017      	beq.n	8005134 <UART_SetConfig+0x1d0>
 8005104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005108:	d817      	bhi.n	800513a <UART_SetConfig+0x1d6>
 800510a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510e:	d00b      	beq.n	8005128 <UART_SetConfig+0x1c4>
 8005110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005114:	d811      	bhi.n	800513a <UART_SetConfig+0x1d6>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <UART_SetConfig+0x1be>
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511e:	d006      	beq.n	800512e <UART_SetConfig+0x1ca>
 8005120:	e00b      	b.n	800513a <UART_SetConfig+0x1d6>
 8005122:	2300      	movs	r3, #0
 8005124:	76fb      	strb	r3, [r7, #27]
 8005126:	e00d      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005128:	2302      	movs	r3, #2
 800512a:	76fb      	strb	r3, [r7, #27]
 800512c:	e00a      	b.n	8005144 <UART_SetConfig+0x1e0>
 800512e:	2304      	movs	r3, #4
 8005130:	76fb      	strb	r3, [r7, #27]
 8005132:	e007      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005134:	2308      	movs	r3, #8
 8005136:	76fb      	strb	r3, [r7, #27]
 8005138:	e004      	b.n	8005144 <UART_SetConfig+0x1e0>
 800513a:	2310      	movs	r3, #16
 800513c:	76fb      	strb	r3, [r7, #27]
 800513e:	e001      	b.n	8005144 <UART_SetConfig+0x1e0>
 8005140:	2310      	movs	r3, #16
 8005142:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3c      	ldr	r2, [pc, #240]	; (800523c <UART_SetConfig+0x2d8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	f040 8082 	bne.w	8005254 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005150:	7efb      	ldrb	r3, [r7, #27]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d823      	bhi.n	800519e <UART_SetConfig+0x23a>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0x1f8>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005181 	.word	0x08005181
 8005160:	0800519f 	.word	0x0800519f
 8005164:	08005189 	.word	0x08005189
 8005168:	0800519f 	.word	0x0800519f
 800516c:	0800518f 	.word	0x0800518f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	0800519f 	.word	0x0800519f
 8005178:	0800519f 	.word	0x0800519f
 800517c:	08005197 	.word	0x08005197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7fe fb1e 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005184:	6178      	str	r0, [r7, #20]
        break;
 8005186:	e00f      	b.n	80051a8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005188:	4b31      	ldr	r3, [pc, #196]	; (8005250 <UART_SetConfig+0x2ec>)
 800518a:	617b      	str	r3, [r7, #20]
        break;
 800518c:	e00c      	b.n	80051a8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fe fa81 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8005192:	6178      	str	r0, [r7, #20]
        break;
 8005194:	e008      	b.n	80051a8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519a:	617b      	str	r3, [r7, #20]
        break;
 800519c:	e004      	b.n	80051a8 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	76bb      	strb	r3, [r7, #26]
        break;
 80051a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8100 	beq.w	80053b0 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d305      	bcc.n	80051cc <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d902      	bls.n	80051d2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	76bb      	strb	r3, [r7, #26]
 80051d0:	e0ee      	b.n	80053b0 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	020b      	lsls	r3, r1, #8
 80051e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051e8:	0202      	lsls	r2, r0, #8
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	6849      	ldr	r1, [r1, #4]
 80051ee:	0849      	lsrs	r1, r1, #1
 80051f0:	4608      	mov	r0, r1
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	1814      	adds	r4, r2, r0
 80051f8:	eb43 0501 	adc.w	r5, r3, r1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fb f839 	bl	8000280 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4613      	mov	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800521c:	d308      	bcc.n	8005230 <UART_SetConfig+0x2cc>
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005224:	d204      	bcs.n	8005230 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	e0bf      	b.n	80053b0 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	76bb      	strb	r3, [r7, #26]
 8005234:	e0bc      	b.n	80053b0 <UART_SetConfig+0x44c>
 8005236:	bf00      	nop
 8005238:	efff69f3 	.word	0xefff69f3
 800523c:	40008000 	.word	0x40008000
 8005240:	40013800 	.word	0x40013800
 8005244:	40021000 	.word	0x40021000
 8005248:	40004400 	.word	0x40004400
 800524c:	40004800 	.word	0x40004800
 8005250:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525c:	d15b      	bne.n	8005316 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 800525e:	7efb      	ldrb	r3, [r7, #27]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d828      	bhi.n	80052b6 <UART_SetConfig+0x352>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x308>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	08005291 	.word	0x08005291
 8005270:	08005299 	.word	0x08005299
 8005274:	080052a1 	.word	0x080052a1
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a7 	.word	0x080052a7
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052b7 	.word	0x080052b7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe fa96 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005294:	6178      	str	r0, [r7, #20]
        break;
 8005296:	e013      	b.n	80052c0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005298:	f7fe faa8 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 800529c:	6178      	str	r0, [r7, #20]
        break;
 800529e:	e00f      	b.n	80052c0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <UART_SetConfig+0x464>)
 80052a2:	617b      	str	r3, [r7, #20]
        break;
 80052a4:	e00c      	b.n	80052c0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe f9f5 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 80052aa:	6178      	str	r0, [r7, #20]
        break;
 80052ac:	e008      	b.n	80052c0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b2:	617b      	str	r3, [r7, #20]
        break;
 80052b4:	e004      	b.n	80052c0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	76bb      	strb	r3, [r7, #26]
        break;
 80052be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d074      	beq.n	80053b0 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	005a      	lsls	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d916      	bls.n	8005310 <UART_SetConfig+0x3ac>
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d212      	bcs.n	8005310 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f023 030f 	bic.w	r3, r3, #15
 80052f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	b29a      	uxth	r2, r3
 8005300:	89fb      	ldrh	r3, [r7, #14]
 8005302:	4313      	orrs	r3, r2
 8005304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	89fa      	ldrh	r2, [r7, #14]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e04f      	b.n	80053b0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	76bb      	strb	r3, [r7, #26]
 8005314:	e04c      	b.n	80053b0 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005316:	7efb      	ldrb	r3, [r7, #27]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d828      	bhi.n	800536e <UART_SetConfig+0x40a>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x3c0>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	0800536f 	.word	0x0800536f
 8005334:	0800535f 	.word	0x0800535f
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800536f 	.word	0x0800536f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe fa3a 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 800534c:	6178      	str	r0, [r7, #20]
        break;
 800534e:	e013      	b.n	8005378 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fe fa4c 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8005354:	6178      	str	r0, [r7, #20]
        break;
 8005356:	e00f      	b.n	8005378 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <UART_SetConfig+0x464>)
 800535a:	617b      	str	r3, [r7, #20]
        break;
 800535c:	e00c      	b.n	8005378 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fe f999 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8005362:	6178      	str	r0, [r7, #20]
        break;
 8005364:	e008      	b.n	8005378 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	617b      	str	r3, [r7, #20]
        break;
 800536c:	e004      	b.n	8005378 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	76bb      	strb	r3, [r7, #26]
        break;
 8005376:	bf00      	nop
    }

    if (pclk != 0U)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d018      	beq.n	80053b0 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	085a      	lsrs	r2, r3, #1
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	441a      	add	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b0f      	cmp	r3, #15
 8005396:	d909      	bls.n	80053ac <UART_SetConfig+0x448>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539e:	d205      	bcs.n	80053ac <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	e001      	b.n	80053b0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bdb0      	pop	{r4, r5, r7, pc}
 80053c6:	bf00      	nop
 80053c8:	00f42400 	.word	0x00f42400

080053cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ca:	d10a      	bne.n	80054e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005520:	f7fb fe24 	bl	800116c <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d10e      	bne.n	8005552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f82d 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e023      	b.n	800559a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b04      	cmp	r3, #4
 800555e:	d10e      	bne.n	800557e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f817 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e00d      	b.n	800559a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b09c      	sub	sp, #112	; 0x70
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	e0a5      	b.n	8005700 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	f000 80a1 	beq.w	8005700 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fb fdd5 	bl	800116c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d13e      	bne.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005626:	64ba      	str	r2, [r7, #72]	; 0x48
 8005628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800562c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e067      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d04f      	beq.n	8005700 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566e:	d147      	bne.n	8005700 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005678:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800568e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
 800569a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800569e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	613b      	str	r3, [r7, #16]
   return(result);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056cc:	623a      	str	r2, [r7, #32]
 80056ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	69f9      	ldr	r1, [r7, #28]
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e010      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	429a      	cmp	r2, r3
 800571c:	f43f af4a 	beq.w	80055b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3770      	adds	r7, #112	; 0x70
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <__errno>:
 800572c:	4b01      	ldr	r3, [pc, #4]	; (8005734 <__errno+0x8>)
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000218 	.word	0x20000218

08005738 <__libc_init_array>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4d0d      	ldr	r5, [pc, #52]	; (8005770 <__libc_init_array+0x38>)
 800573c:	4c0d      	ldr	r4, [pc, #52]	; (8005774 <__libc_init_array+0x3c>)
 800573e:	1b64      	subs	r4, r4, r5
 8005740:	10a4      	asrs	r4, r4, #2
 8005742:	2600      	movs	r6, #0
 8005744:	42a6      	cmp	r6, r4
 8005746:	d109      	bne.n	800575c <__libc_init_array+0x24>
 8005748:	4d0b      	ldr	r5, [pc, #44]	; (8005778 <__libc_init_array+0x40>)
 800574a:	4c0c      	ldr	r4, [pc, #48]	; (800577c <__libc_init_array+0x44>)
 800574c:	f000 fc4e 	bl	8005fec <_init>
 8005750:	1b64      	subs	r4, r4, r5
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	2600      	movs	r6, #0
 8005756:	42a6      	cmp	r6, r4
 8005758:	d105      	bne.n	8005766 <__libc_init_array+0x2e>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005760:	4798      	blx	r3
 8005762:	3601      	adds	r6, #1
 8005764:	e7ee      	b.n	8005744 <__libc_init_array+0xc>
 8005766:	f855 3b04 	ldr.w	r3, [r5], #4
 800576a:	4798      	blx	r3
 800576c:	3601      	adds	r6, #1
 800576e:	e7f2      	b.n	8005756 <__libc_init_array+0x1e>
 8005770:	080060c0 	.word	0x080060c0
 8005774:	080060c0 	.word	0x080060c0
 8005778:	080060c0 	.word	0x080060c0
 800577c:	080060c4 	.word	0x080060c4

08005780 <memset>:
 8005780:	4402      	add	r2, r0
 8005782:	4603      	mov	r3, r0
 8005784:	4293      	cmp	r3, r2
 8005786:	d100      	bne.n	800578a <memset+0xa>
 8005788:	4770      	bx	lr
 800578a:	f803 1b01 	strb.w	r1, [r3], #1
 800578e:	e7f9      	b.n	8005784 <memset+0x4>

08005790 <siprintf>:
 8005790:	b40e      	push	{r1, r2, r3}
 8005792:	b500      	push	{lr}
 8005794:	b09c      	sub	sp, #112	; 0x70
 8005796:	ab1d      	add	r3, sp, #116	; 0x74
 8005798:	9002      	str	r0, [sp, #8]
 800579a:	9006      	str	r0, [sp, #24]
 800579c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057a0:	4809      	ldr	r0, [pc, #36]	; (80057c8 <siprintf+0x38>)
 80057a2:	9107      	str	r1, [sp, #28]
 80057a4:	9104      	str	r1, [sp, #16]
 80057a6:	4909      	ldr	r1, [pc, #36]	; (80057cc <siprintf+0x3c>)
 80057a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ac:	9105      	str	r1, [sp, #20]
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	a902      	add	r1, sp, #8
 80057b4:	f000 f868 	bl	8005888 <_svfiprintf_r>
 80057b8:	9b02      	ldr	r3, [sp, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	b01c      	add	sp, #112	; 0x70
 80057c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c4:	b003      	add	sp, #12
 80057c6:	4770      	bx	lr
 80057c8:	20000218 	.word	0x20000218
 80057cc:	ffff0208 	.word	0xffff0208

080057d0 <__ssputs_r>:
 80057d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d4:	688e      	ldr	r6, [r1, #8]
 80057d6:	429e      	cmp	r6, r3
 80057d8:	4682      	mov	sl, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	4690      	mov	r8, r2
 80057de:	461f      	mov	r7, r3
 80057e0:	d838      	bhi.n	8005854 <__ssputs_r+0x84>
 80057e2:	898a      	ldrh	r2, [r1, #12]
 80057e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057e8:	d032      	beq.n	8005850 <__ssputs_r+0x80>
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	6909      	ldr	r1, [r1, #16]
 80057ee:	eba5 0901 	sub.w	r9, r5, r1
 80057f2:	6965      	ldr	r5, [r4, #20]
 80057f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057fc:	3301      	adds	r3, #1
 80057fe:	444b      	add	r3, r9
 8005800:	106d      	asrs	r5, r5, #1
 8005802:	429d      	cmp	r5, r3
 8005804:	bf38      	it	cc
 8005806:	461d      	movcc	r5, r3
 8005808:	0553      	lsls	r3, r2, #21
 800580a:	d531      	bpl.n	8005870 <__ssputs_r+0xa0>
 800580c:	4629      	mov	r1, r5
 800580e:	f000 fb47 	bl	8005ea0 <_malloc_r>
 8005812:	4606      	mov	r6, r0
 8005814:	b950      	cbnz	r0, 800582c <__ssputs_r+0x5c>
 8005816:	230c      	movs	r3, #12
 8005818:	f8ca 3000 	str.w	r3, [sl]
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	6921      	ldr	r1, [r4, #16]
 800582e:	464a      	mov	r2, r9
 8005830:	f000 fabe 	bl	8005db0 <memcpy>
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800583a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	6126      	str	r6, [r4, #16]
 8005842:	6165      	str	r5, [r4, #20]
 8005844:	444e      	add	r6, r9
 8005846:	eba5 0509 	sub.w	r5, r5, r9
 800584a:	6026      	str	r6, [r4, #0]
 800584c:	60a5      	str	r5, [r4, #8]
 800584e:	463e      	mov	r6, r7
 8005850:	42be      	cmp	r6, r7
 8005852:	d900      	bls.n	8005856 <__ssputs_r+0x86>
 8005854:	463e      	mov	r6, r7
 8005856:	4632      	mov	r2, r6
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	4641      	mov	r1, r8
 800585c:	f000 fab6 	bl	8005dcc <memmove>
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	1b9b      	subs	r3, r3, r6
 8005866:	4432      	add	r2, r6
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	6022      	str	r2, [r4, #0]
 800586c:	2000      	movs	r0, #0
 800586e:	e7db      	b.n	8005828 <__ssputs_r+0x58>
 8005870:	462a      	mov	r2, r5
 8005872:	f000 fb6f 	bl	8005f54 <_realloc_r>
 8005876:	4606      	mov	r6, r0
 8005878:	2800      	cmp	r0, #0
 800587a:	d1e1      	bne.n	8005840 <__ssputs_r+0x70>
 800587c:	6921      	ldr	r1, [r4, #16]
 800587e:	4650      	mov	r0, sl
 8005880:	f000 fabe 	bl	8005e00 <_free_r>
 8005884:	e7c7      	b.n	8005816 <__ssputs_r+0x46>
	...

08005888 <_svfiprintf_r>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	4698      	mov	r8, r3
 800588e:	898b      	ldrh	r3, [r1, #12]
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	b09d      	sub	sp, #116	; 0x74
 8005894:	4607      	mov	r7, r0
 8005896:	460d      	mov	r5, r1
 8005898:	4614      	mov	r4, r2
 800589a:	d50e      	bpl.n	80058ba <_svfiprintf_r+0x32>
 800589c:	690b      	ldr	r3, [r1, #16]
 800589e:	b963      	cbnz	r3, 80058ba <_svfiprintf_r+0x32>
 80058a0:	2140      	movs	r1, #64	; 0x40
 80058a2:	f000 fafd 	bl	8005ea0 <_malloc_r>
 80058a6:	6028      	str	r0, [r5, #0]
 80058a8:	6128      	str	r0, [r5, #16]
 80058aa:	b920      	cbnz	r0, 80058b6 <_svfiprintf_r+0x2e>
 80058ac:	230c      	movs	r3, #12
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	e0d1      	b.n	8005a5a <_svfiprintf_r+0x1d2>
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	616b      	str	r3, [r5, #20]
 80058ba:	2300      	movs	r3, #0
 80058bc:	9309      	str	r3, [sp, #36]	; 0x24
 80058be:	2320      	movs	r3, #32
 80058c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c8:	2330      	movs	r3, #48	; 0x30
 80058ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a74 <_svfiprintf_r+0x1ec>
 80058ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d2:	f04f 0901 	mov.w	r9, #1
 80058d6:	4623      	mov	r3, r4
 80058d8:	469a      	mov	sl, r3
 80058da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058de:	b10a      	cbz	r2, 80058e4 <_svfiprintf_r+0x5c>
 80058e0:	2a25      	cmp	r2, #37	; 0x25
 80058e2:	d1f9      	bne.n	80058d8 <_svfiprintf_r+0x50>
 80058e4:	ebba 0b04 	subs.w	fp, sl, r4
 80058e8:	d00b      	beq.n	8005902 <_svfiprintf_r+0x7a>
 80058ea:	465b      	mov	r3, fp
 80058ec:	4622      	mov	r2, r4
 80058ee:	4629      	mov	r1, r5
 80058f0:	4638      	mov	r0, r7
 80058f2:	f7ff ff6d 	bl	80057d0 <__ssputs_r>
 80058f6:	3001      	adds	r0, #1
 80058f8:	f000 80aa 	beq.w	8005a50 <_svfiprintf_r+0x1c8>
 80058fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058fe:	445a      	add	r2, fp
 8005900:	9209      	str	r2, [sp, #36]	; 0x24
 8005902:	f89a 3000 	ldrb.w	r3, [sl]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80a2 	beq.w	8005a50 <_svfiprintf_r+0x1c8>
 800590c:	2300      	movs	r3, #0
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005916:	f10a 0a01 	add.w	sl, sl, #1
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	9307      	str	r3, [sp, #28]
 800591e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005922:	931a      	str	r3, [sp, #104]	; 0x68
 8005924:	4654      	mov	r4, sl
 8005926:	2205      	movs	r2, #5
 8005928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592c:	4851      	ldr	r0, [pc, #324]	; (8005a74 <_svfiprintf_r+0x1ec>)
 800592e:	f7fa fc57 	bl	80001e0 <memchr>
 8005932:	9a04      	ldr	r2, [sp, #16]
 8005934:	b9d8      	cbnz	r0, 800596e <_svfiprintf_r+0xe6>
 8005936:	06d0      	lsls	r0, r2, #27
 8005938:	bf44      	itt	mi
 800593a:	2320      	movmi	r3, #32
 800593c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005940:	0711      	lsls	r1, r2, #28
 8005942:	bf44      	itt	mi
 8005944:	232b      	movmi	r3, #43	; 0x2b
 8005946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594a:	f89a 3000 	ldrb.w	r3, [sl]
 800594e:	2b2a      	cmp	r3, #42	; 0x2a
 8005950:	d015      	beq.n	800597e <_svfiprintf_r+0xf6>
 8005952:	9a07      	ldr	r2, [sp, #28]
 8005954:	4654      	mov	r4, sl
 8005956:	2000      	movs	r0, #0
 8005958:	f04f 0c0a 	mov.w	ip, #10
 800595c:	4621      	mov	r1, r4
 800595e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005962:	3b30      	subs	r3, #48	; 0x30
 8005964:	2b09      	cmp	r3, #9
 8005966:	d94e      	bls.n	8005a06 <_svfiprintf_r+0x17e>
 8005968:	b1b0      	cbz	r0, 8005998 <_svfiprintf_r+0x110>
 800596a:	9207      	str	r2, [sp, #28]
 800596c:	e014      	b.n	8005998 <_svfiprintf_r+0x110>
 800596e:	eba0 0308 	sub.w	r3, r0, r8
 8005972:	fa09 f303 	lsl.w	r3, r9, r3
 8005976:	4313      	orrs	r3, r2
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	46a2      	mov	sl, r4
 800597c:	e7d2      	b.n	8005924 <_svfiprintf_r+0x9c>
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	1d19      	adds	r1, r3, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	9103      	str	r1, [sp, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	bfbb      	ittet	lt
 800598a:	425b      	neglt	r3, r3
 800598c:	f042 0202 	orrlt.w	r2, r2, #2
 8005990:	9307      	strge	r3, [sp, #28]
 8005992:	9307      	strlt	r3, [sp, #28]
 8005994:	bfb8      	it	lt
 8005996:	9204      	strlt	r2, [sp, #16]
 8005998:	7823      	ldrb	r3, [r4, #0]
 800599a:	2b2e      	cmp	r3, #46	; 0x2e
 800599c:	d10c      	bne.n	80059b8 <_svfiprintf_r+0x130>
 800599e:	7863      	ldrb	r3, [r4, #1]
 80059a0:	2b2a      	cmp	r3, #42	; 0x2a
 80059a2:	d135      	bne.n	8005a10 <_svfiprintf_r+0x188>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	9203      	str	r2, [sp, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfb8      	it	lt
 80059b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059b4:	3402      	adds	r4, #2
 80059b6:	9305      	str	r3, [sp, #20]
 80059b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a84 <_svfiprintf_r+0x1fc>
 80059bc:	7821      	ldrb	r1, [r4, #0]
 80059be:	2203      	movs	r2, #3
 80059c0:	4650      	mov	r0, sl
 80059c2:	f7fa fc0d 	bl	80001e0 <memchr>
 80059c6:	b140      	cbz	r0, 80059da <_svfiprintf_r+0x152>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	eba0 000a 	sub.w	r0, r0, sl
 80059ce:	fa03 f000 	lsl.w	r0, r3, r0
 80059d2:	9b04      	ldr	r3, [sp, #16]
 80059d4:	4303      	orrs	r3, r0
 80059d6:	3401      	adds	r4, #1
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059de:	4826      	ldr	r0, [pc, #152]	; (8005a78 <_svfiprintf_r+0x1f0>)
 80059e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e4:	2206      	movs	r2, #6
 80059e6:	f7fa fbfb 	bl	80001e0 <memchr>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d038      	beq.n	8005a60 <_svfiprintf_r+0x1d8>
 80059ee:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <_svfiprintf_r+0x1f4>)
 80059f0:	bb1b      	cbnz	r3, 8005a3a <_svfiprintf_r+0x1b2>
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	3307      	adds	r3, #7
 80059f6:	f023 0307 	bic.w	r3, r3, #7
 80059fa:	3308      	adds	r3, #8
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a00:	4433      	add	r3, r6
 8005a02:	9309      	str	r3, [sp, #36]	; 0x24
 8005a04:	e767      	b.n	80058d6 <_svfiprintf_r+0x4e>
 8005a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	e7a5      	b.n	800595c <_svfiprintf_r+0xd4>
 8005a10:	2300      	movs	r3, #0
 8005a12:	3401      	adds	r4, #1
 8005a14:	9305      	str	r3, [sp, #20]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f04f 0c0a 	mov.w	ip, #10
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a22:	3a30      	subs	r2, #48	; 0x30
 8005a24:	2a09      	cmp	r2, #9
 8005a26:	d903      	bls.n	8005a30 <_svfiprintf_r+0x1a8>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0c5      	beq.n	80059b8 <_svfiprintf_r+0x130>
 8005a2c:	9105      	str	r1, [sp, #20]
 8005a2e:	e7c3      	b.n	80059b8 <_svfiprintf_r+0x130>
 8005a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a34:	4604      	mov	r4, r0
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7f0      	b.n	8005a1c <_svfiprintf_r+0x194>
 8005a3a:	ab03      	add	r3, sp, #12
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	462a      	mov	r2, r5
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <_svfiprintf_r+0x1f8>)
 8005a42:	a904      	add	r1, sp, #16
 8005a44:	4638      	mov	r0, r7
 8005a46:	f3af 8000 	nop.w
 8005a4a:	1c42      	adds	r2, r0, #1
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	d1d6      	bne.n	80059fe <_svfiprintf_r+0x176>
 8005a50:	89ab      	ldrh	r3, [r5, #12]
 8005a52:	065b      	lsls	r3, r3, #25
 8005a54:	f53f af2c 	bmi.w	80058b0 <_svfiprintf_r+0x28>
 8005a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a5a:	b01d      	add	sp, #116	; 0x74
 8005a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a60:	ab03      	add	r3, sp, #12
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	462a      	mov	r2, r5
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <_svfiprintf_r+0x1f8>)
 8005a68:	a904      	add	r1, sp, #16
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f000 f87a 	bl	8005b64 <_printf_i>
 8005a70:	e7eb      	b.n	8005a4a <_svfiprintf_r+0x1c2>
 8005a72:	bf00      	nop
 8005a74:	08006084 	.word	0x08006084
 8005a78:	0800608e 	.word	0x0800608e
 8005a7c:	00000000 	.word	0x00000000
 8005a80:	080057d1 	.word	0x080057d1
 8005a84:	0800608a 	.word	0x0800608a

08005a88 <_printf_common>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	4699      	mov	r9, r3
 8005a90:	688a      	ldr	r2, [r1, #8]
 8005a92:	690b      	ldr	r3, [r1, #16]
 8005a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	bfb8      	it	lt
 8005a9c:	4613      	movlt	r3, r2
 8005a9e:	6033      	str	r3, [r6, #0]
 8005aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	b10a      	cbz	r2, 8005aae <_printf_common+0x26>
 8005aaa:	3301      	adds	r3, #1
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	0699      	lsls	r1, r3, #26
 8005ab2:	bf42      	ittt	mi
 8005ab4:	6833      	ldrmi	r3, [r6, #0]
 8005ab6:	3302      	addmi	r3, #2
 8005ab8:	6033      	strmi	r3, [r6, #0]
 8005aba:	6825      	ldr	r5, [r4, #0]
 8005abc:	f015 0506 	ands.w	r5, r5, #6
 8005ac0:	d106      	bne.n	8005ad0 <_printf_common+0x48>
 8005ac2:	f104 0a19 	add.w	sl, r4, #25
 8005ac6:	68e3      	ldr	r3, [r4, #12]
 8005ac8:	6832      	ldr	r2, [r6, #0]
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	42ab      	cmp	r3, r5
 8005ace:	dc26      	bgt.n	8005b1e <_printf_common+0x96>
 8005ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad4:	1e13      	subs	r3, r2, #0
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	bf18      	it	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	0692      	lsls	r2, r2, #26
 8005ade:	d42b      	bmi.n	8005b38 <_printf_common+0xb0>
 8005ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c0      	blx	r8
 8005aea:	3001      	adds	r0, #1
 8005aec:	d01e      	beq.n	8005b2c <_printf_common+0xa4>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	68e5      	ldr	r5, [r4, #12]
 8005af2:	6832      	ldr	r2, [r6, #0]
 8005af4:	f003 0306 	and.w	r3, r3, #6
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	bf08      	it	eq
 8005afc:	1aad      	subeq	r5, r5, r2
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	bf0c      	ite	eq
 8005b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b08:	2500      	movne	r5, #0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	bfc4      	itt	gt
 8005b0e:	1a9b      	subgt	r3, r3, r2
 8005b10:	18ed      	addgt	r5, r5, r3
 8005b12:	2600      	movs	r6, #0
 8005b14:	341a      	adds	r4, #26
 8005b16:	42b5      	cmp	r5, r6
 8005b18:	d11a      	bne.n	8005b50 <_printf_common+0xc8>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e008      	b.n	8005b30 <_printf_common+0xa8>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4652      	mov	r2, sl
 8005b22:	4649      	mov	r1, r9
 8005b24:	4638      	mov	r0, r7
 8005b26:	47c0      	blx	r8
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d103      	bne.n	8005b34 <_printf_common+0xac>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b34:	3501      	adds	r5, #1
 8005b36:	e7c6      	b.n	8005ac6 <_printf_common+0x3e>
 8005b38:	18e1      	adds	r1, r4, r3
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	2030      	movs	r0, #48	; 0x30
 8005b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b42:	4422      	add	r2, r4
 8005b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	e7c7      	b.n	8005ae0 <_printf_common+0x58>
 8005b50:	2301      	movs	r3, #1
 8005b52:	4622      	mov	r2, r4
 8005b54:	4649      	mov	r1, r9
 8005b56:	4638      	mov	r0, r7
 8005b58:	47c0      	blx	r8
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d0e6      	beq.n	8005b2c <_printf_common+0xa4>
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7d9      	b.n	8005b16 <_printf_common+0x8e>
	...

08005b64 <_printf_i>:
 8005b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	460c      	mov	r4, r1
 8005b6a:	4691      	mov	r9, r2
 8005b6c:	7e27      	ldrb	r7, [r4, #24]
 8005b6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b70:	2f78      	cmp	r7, #120	; 0x78
 8005b72:	4680      	mov	r8, r0
 8005b74:	469a      	mov	sl, r3
 8005b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b7a:	d807      	bhi.n	8005b8c <_printf_i+0x28>
 8005b7c:	2f62      	cmp	r7, #98	; 0x62
 8005b7e:	d80a      	bhi.n	8005b96 <_printf_i+0x32>
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	f000 80d8 	beq.w	8005d36 <_printf_i+0x1d2>
 8005b86:	2f58      	cmp	r7, #88	; 0x58
 8005b88:	f000 80a3 	beq.w	8005cd2 <_printf_i+0x16e>
 8005b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b94:	e03a      	b.n	8005c0c <_printf_i+0xa8>
 8005b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b9a:	2b15      	cmp	r3, #21
 8005b9c:	d8f6      	bhi.n	8005b8c <_printf_i+0x28>
 8005b9e:	a001      	add	r0, pc, #4	; (adr r0, 8005ba4 <_printf_i+0x40>)
 8005ba0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005b8d 	.word	0x08005b8d
 8005bb0:	08005b8d 	.word	0x08005b8d
 8005bb4:	08005b8d 	.word	0x08005b8d
 8005bb8:	08005b8d 	.word	0x08005b8d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b8d 	.word	0x08005b8d
 8005bc4:	08005b8d 	.word	0x08005b8d
 8005bc8:	08005b8d 	.word	0x08005b8d
 8005bcc:	08005b8d 	.word	0x08005b8d
 8005bd0:	08005d1d 	.word	0x08005d1d
 8005bd4:	08005c41 	.word	0x08005c41
 8005bd8:	08005cff 	.word	0x08005cff
 8005bdc:	08005b8d 	.word	0x08005b8d
 8005be0:	08005b8d 	.word	0x08005b8d
 8005be4:	08005d3f 	.word	0x08005d3f
 8005be8:	08005b8d 	.word	0x08005b8d
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005b8d 	.word	0x08005b8d
 8005bf4:	08005b8d 	.word	0x08005b8d
 8005bf8:	08005d07 	.word	0x08005d07
 8005bfc:	680b      	ldr	r3, [r1, #0]
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	600a      	str	r2, [r1, #0]
 8005c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0a3      	b.n	8005d58 <_printf_i+0x1f4>
 8005c10:	6825      	ldr	r5, [r4, #0]
 8005c12:	6808      	ldr	r0, [r1, #0]
 8005c14:	062e      	lsls	r6, r5, #24
 8005c16:	f100 0304 	add.w	r3, r0, #4
 8005c1a:	d50a      	bpl.n	8005c32 <_printf_i+0xce>
 8005c1c:	6805      	ldr	r5, [r0, #0]
 8005c1e:	600b      	str	r3, [r1, #0]
 8005c20:	2d00      	cmp	r5, #0
 8005c22:	da03      	bge.n	8005c2c <_printf_i+0xc8>
 8005c24:	232d      	movs	r3, #45	; 0x2d
 8005c26:	426d      	negs	r5, r5
 8005c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2c:	485e      	ldr	r0, [pc, #376]	; (8005da8 <_printf_i+0x244>)
 8005c2e:	230a      	movs	r3, #10
 8005c30:	e019      	b.n	8005c66 <_printf_i+0x102>
 8005c32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c36:	6805      	ldr	r5, [r0, #0]
 8005c38:	600b      	str	r3, [r1, #0]
 8005c3a:	bf18      	it	ne
 8005c3c:	b22d      	sxthne	r5, r5
 8005c3e:	e7ef      	b.n	8005c20 <_printf_i+0xbc>
 8005c40:	680b      	ldr	r3, [r1, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	1d18      	adds	r0, r3, #4
 8005c46:	6008      	str	r0, [r1, #0]
 8005c48:	0628      	lsls	r0, r5, #24
 8005c4a:	d501      	bpl.n	8005c50 <_printf_i+0xec>
 8005c4c:	681d      	ldr	r5, [r3, #0]
 8005c4e:	e002      	b.n	8005c56 <_printf_i+0xf2>
 8005c50:	0669      	lsls	r1, r5, #25
 8005c52:	d5fb      	bpl.n	8005c4c <_printf_i+0xe8>
 8005c54:	881d      	ldrh	r5, [r3, #0]
 8005c56:	4854      	ldr	r0, [pc, #336]	; (8005da8 <_printf_i+0x244>)
 8005c58:	2f6f      	cmp	r7, #111	; 0x6f
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2308      	moveq	r3, #8
 8005c5e:	230a      	movne	r3, #10
 8005c60:	2100      	movs	r1, #0
 8005c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c66:	6866      	ldr	r6, [r4, #4]
 8005c68:	60a6      	str	r6, [r4, #8]
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	bfa2      	ittt	ge
 8005c6e:	6821      	ldrge	r1, [r4, #0]
 8005c70:	f021 0104 	bicge.w	r1, r1, #4
 8005c74:	6021      	strge	r1, [r4, #0]
 8005c76:	b90d      	cbnz	r5, 8005c7c <_printf_i+0x118>
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	d04d      	beq.n	8005d18 <_printf_i+0x1b4>
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c82:	fb03 5711 	mls	r7, r3, r1, r5
 8005c86:	5dc7      	ldrb	r7, [r0, r7]
 8005c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c8c:	462f      	mov	r7, r5
 8005c8e:	42bb      	cmp	r3, r7
 8005c90:	460d      	mov	r5, r1
 8005c92:	d9f4      	bls.n	8005c7e <_printf_i+0x11a>
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d10b      	bne.n	8005cb0 <_printf_i+0x14c>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07df      	lsls	r7, r3, #31
 8005c9c:	d508      	bpl.n	8005cb0 <_printf_i+0x14c>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	6861      	ldr	r1, [r4, #4]
 8005ca2:	4299      	cmp	r1, r3
 8005ca4:	bfde      	ittt	le
 8005ca6:	2330      	movle	r3, #48	; 0x30
 8005ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cb0:	1b92      	subs	r2, r2, r6
 8005cb2:	6122      	str	r2, [r4, #16]
 8005cb4:	f8cd a000 	str.w	sl, [sp]
 8005cb8:	464b      	mov	r3, r9
 8005cba:	aa03      	add	r2, sp, #12
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff fee2 	bl	8005a88 <_printf_common>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d14c      	bne.n	8005d62 <_printf_i+0x1fe>
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	b004      	add	sp, #16
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	4835      	ldr	r0, [pc, #212]	; (8005da8 <_printf_i+0x244>)
 8005cd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	680e      	ldr	r6, [r1, #0]
 8005cdc:	061f      	lsls	r7, r3, #24
 8005cde:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ce2:	600e      	str	r6, [r1, #0]
 8005ce4:	d514      	bpl.n	8005d10 <_printf_i+0x1ac>
 8005ce6:	07d9      	lsls	r1, r3, #31
 8005ce8:	bf44      	itt	mi
 8005cea:	f043 0320 	orrmi.w	r3, r3, #32
 8005cee:	6023      	strmi	r3, [r4, #0]
 8005cf0:	b91d      	cbnz	r5, 8005cfa <_printf_i+0x196>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	f023 0320 	bic.w	r3, r3, #32
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	2310      	movs	r3, #16
 8005cfc:	e7b0      	b.n	8005c60 <_printf_i+0xfc>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	f043 0320 	orr.w	r3, r3, #32
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	2378      	movs	r3, #120	; 0x78
 8005d08:	4828      	ldr	r0, [pc, #160]	; (8005dac <_printf_i+0x248>)
 8005d0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d0e:	e7e3      	b.n	8005cd8 <_printf_i+0x174>
 8005d10:	065e      	lsls	r6, r3, #25
 8005d12:	bf48      	it	mi
 8005d14:	b2ad      	uxthmi	r5, r5
 8005d16:	e7e6      	b.n	8005ce6 <_printf_i+0x182>
 8005d18:	4616      	mov	r6, r2
 8005d1a:	e7bb      	b.n	8005c94 <_printf_i+0x130>
 8005d1c:	680b      	ldr	r3, [r1, #0]
 8005d1e:	6826      	ldr	r6, [r4, #0]
 8005d20:	6960      	ldr	r0, [r4, #20]
 8005d22:	1d1d      	adds	r5, r3, #4
 8005d24:	600d      	str	r5, [r1, #0]
 8005d26:	0635      	lsls	r5, r6, #24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	d501      	bpl.n	8005d30 <_printf_i+0x1cc>
 8005d2c:	6018      	str	r0, [r3, #0]
 8005d2e:	e002      	b.n	8005d36 <_printf_i+0x1d2>
 8005d30:	0671      	lsls	r1, r6, #25
 8005d32:	d5fb      	bpl.n	8005d2c <_printf_i+0x1c8>
 8005d34:	8018      	strh	r0, [r3, #0]
 8005d36:	2300      	movs	r3, #0
 8005d38:	6123      	str	r3, [r4, #16]
 8005d3a:	4616      	mov	r6, r2
 8005d3c:	e7ba      	b.n	8005cb4 <_printf_i+0x150>
 8005d3e:	680b      	ldr	r3, [r1, #0]
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	600a      	str	r2, [r1, #0]
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	6862      	ldr	r2, [r4, #4]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7fa fa48 	bl	80001e0 <memchr>
 8005d50:	b108      	cbz	r0, 8005d56 <_printf_i+0x1f2>
 8005d52:	1b80      	subs	r0, r0, r6
 8005d54:	6060      	str	r0, [r4, #4]
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	6123      	str	r3, [r4, #16]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d60:	e7a8      	b.n	8005cb4 <_printf_i+0x150>
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	4632      	mov	r2, r6
 8005d66:	4649      	mov	r1, r9
 8005d68:	4640      	mov	r0, r8
 8005d6a:	47d0      	blx	sl
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d0ab      	beq.n	8005cc8 <_printf_i+0x164>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	079b      	lsls	r3, r3, #30
 8005d74:	d413      	bmi.n	8005d9e <_printf_i+0x23a>
 8005d76:	68e0      	ldr	r0, [r4, #12]
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	bfb8      	it	lt
 8005d7e:	4618      	movlt	r0, r3
 8005d80:	e7a4      	b.n	8005ccc <_printf_i+0x168>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4632      	mov	r2, r6
 8005d86:	4649      	mov	r1, r9
 8005d88:	4640      	mov	r0, r8
 8005d8a:	47d0      	blx	sl
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d09b      	beq.n	8005cc8 <_printf_i+0x164>
 8005d90:	3501      	adds	r5, #1
 8005d92:	68e3      	ldr	r3, [r4, #12]
 8005d94:	9903      	ldr	r1, [sp, #12]
 8005d96:	1a5b      	subs	r3, r3, r1
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dcf2      	bgt.n	8005d82 <_printf_i+0x21e>
 8005d9c:	e7eb      	b.n	8005d76 <_printf_i+0x212>
 8005d9e:	2500      	movs	r5, #0
 8005da0:	f104 0619 	add.w	r6, r4, #25
 8005da4:	e7f5      	b.n	8005d92 <_printf_i+0x22e>
 8005da6:	bf00      	nop
 8005da8:	08006095 	.word	0x08006095
 8005dac:	080060a6 	.word	0x080060a6

08005db0 <memcpy>:
 8005db0:	440a      	add	r2, r1
 8005db2:	4291      	cmp	r1, r2
 8005db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db8:	d100      	bne.n	8005dbc <memcpy+0xc>
 8005dba:	4770      	bx	lr
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	d1f9      	bne.n	8005dbe <memcpy+0xe>
 8005dca:	bd10      	pop	{r4, pc}

08005dcc <memmove>:
 8005dcc:	4288      	cmp	r0, r1
 8005dce:	b510      	push	{r4, lr}
 8005dd0:	eb01 0402 	add.w	r4, r1, r2
 8005dd4:	d902      	bls.n	8005ddc <memmove+0x10>
 8005dd6:	4284      	cmp	r4, r0
 8005dd8:	4623      	mov	r3, r4
 8005dda:	d807      	bhi.n	8005dec <memmove+0x20>
 8005ddc:	1e43      	subs	r3, r0, #1
 8005dde:	42a1      	cmp	r1, r4
 8005de0:	d008      	beq.n	8005df4 <memmove+0x28>
 8005de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dea:	e7f8      	b.n	8005dde <memmove+0x12>
 8005dec:	4402      	add	r2, r0
 8005dee:	4601      	mov	r1, r0
 8005df0:	428a      	cmp	r2, r1
 8005df2:	d100      	bne.n	8005df6 <memmove+0x2a>
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dfe:	e7f7      	b.n	8005df0 <memmove+0x24>

08005e00 <_free_r>:
 8005e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e02:	2900      	cmp	r1, #0
 8005e04:	d048      	beq.n	8005e98 <_free_r+0x98>
 8005e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0a:	9001      	str	r0, [sp, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e12:	bfb8      	it	lt
 8005e14:	18e4      	addlt	r4, r4, r3
 8005e16:	f000 f8d3 	bl	8005fc0 <__malloc_lock>
 8005e1a:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <_free_r+0x9c>)
 8005e1c:	9801      	ldr	r0, [sp, #4]
 8005e1e:	6813      	ldr	r3, [r2, #0]
 8005e20:	4615      	mov	r5, r2
 8005e22:	b933      	cbnz	r3, 8005e32 <_free_r+0x32>
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	6014      	str	r4, [r2, #0]
 8005e28:	b003      	add	sp, #12
 8005e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e2e:	f000 b8cd 	b.w	8005fcc <__malloc_unlock>
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	d90b      	bls.n	8005e4e <_free_r+0x4e>
 8005e36:	6821      	ldr	r1, [r4, #0]
 8005e38:	1862      	adds	r2, r4, r1
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	bf04      	itt	eq
 8005e3e:	681a      	ldreq	r2, [r3, #0]
 8005e40:	685b      	ldreq	r3, [r3, #4]
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	bf04      	itt	eq
 8005e46:	1852      	addeq	r2, r2, r1
 8005e48:	6022      	streq	r2, [r4, #0]
 8005e4a:	602c      	str	r4, [r5, #0]
 8005e4c:	e7ec      	b.n	8005e28 <_free_r+0x28>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b10b      	cbz	r3, 8005e58 <_free_r+0x58>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d9fa      	bls.n	8005e4e <_free_r+0x4e>
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	1855      	adds	r5, r2, r1
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d10b      	bne.n	8005e78 <_free_r+0x78>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	4421      	add	r1, r4
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	d1dd      	bne.n	8005e28 <_free_r+0x28>
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	4421      	add	r1, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e7d7      	b.n	8005e28 <_free_r+0x28>
 8005e78:	d902      	bls.n	8005e80 <_free_r+0x80>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	e7d3      	b.n	8005e28 <_free_r+0x28>
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	428b      	cmp	r3, r1
 8005e86:	bf04      	itt	eq
 8005e88:	6819      	ldreq	r1, [r3, #0]
 8005e8a:	685b      	ldreq	r3, [r3, #4]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	bf04      	itt	eq
 8005e90:	1949      	addeq	r1, r1, r5
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6054      	str	r4, [r2, #4]
 8005e96:	e7c7      	b.n	8005e28 <_free_r+0x28>
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
 8005e9c:	200002a4 	.word	0x200002a4

08005ea0 <_malloc_r>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	1ccd      	adds	r5, r1, #3
 8005ea4:	f025 0503 	bic.w	r5, r5, #3
 8005ea8:	3508      	adds	r5, #8
 8005eaa:	2d0c      	cmp	r5, #12
 8005eac:	bf38      	it	cc
 8005eae:	250c      	movcc	r5, #12
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	db01      	blt.n	8005eba <_malloc_r+0x1a>
 8005eb6:	42a9      	cmp	r1, r5
 8005eb8:	d903      	bls.n	8005ec2 <_malloc_r+0x22>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec2:	f000 f87d 	bl	8005fc0 <__malloc_lock>
 8005ec6:	4921      	ldr	r1, [pc, #132]	; (8005f4c <_malloc_r+0xac>)
 8005ec8:	680a      	ldr	r2, [r1, #0]
 8005eca:	4614      	mov	r4, r2
 8005ecc:	b99c      	cbnz	r4, 8005ef6 <_malloc_r+0x56>
 8005ece:	4f20      	ldr	r7, [pc, #128]	; (8005f50 <_malloc_r+0xb0>)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	b923      	cbnz	r3, 8005ede <_malloc_r+0x3e>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 f862 	bl	8005fa0 <_sbrk_r>
 8005edc:	6038      	str	r0, [r7, #0]
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 f85d 	bl	8005fa0 <_sbrk_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d123      	bne.n	8005f32 <_malloc_r+0x92>
 8005eea:	230c      	movs	r3, #12
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f000 f86c 	bl	8005fcc <__malloc_unlock>
 8005ef4:	e7e3      	b.n	8005ebe <_malloc_r+0x1e>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	1b5b      	subs	r3, r3, r5
 8005efa:	d417      	bmi.n	8005f2c <_malloc_r+0x8c>
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d903      	bls.n	8005f08 <_malloc_r+0x68>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	441c      	add	r4, r3
 8005f04:	6025      	str	r5, [r4, #0]
 8005f06:	e004      	b.n	8005f12 <_malloc_r+0x72>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	42a2      	cmp	r2, r4
 8005f0c:	bf0c      	ite	eq
 8005f0e:	600b      	streq	r3, [r1, #0]
 8005f10:	6053      	strne	r3, [r2, #4]
 8005f12:	4630      	mov	r0, r6
 8005f14:	f000 f85a 	bl	8005fcc <__malloc_unlock>
 8005f18:	f104 000b 	add.w	r0, r4, #11
 8005f1c:	1d23      	adds	r3, r4, #4
 8005f1e:	f020 0007 	bic.w	r0, r0, #7
 8005f22:	1ac2      	subs	r2, r0, r3
 8005f24:	d0cc      	beq.n	8005ec0 <_malloc_r+0x20>
 8005f26:	1a1b      	subs	r3, r3, r0
 8005f28:	50a3      	str	r3, [r4, r2]
 8005f2a:	e7c9      	b.n	8005ec0 <_malloc_r+0x20>
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	6864      	ldr	r4, [r4, #4]
 8005f30:	e7cc      	b.n	8005ecc <_malloc_r+0x2c>
 8005f32:	1cc4      	adds	r4, r0, #3
 8005f34:	f024 0403 	bic.w	r4, r4, #3
 8005f38:	42a0      	cmp	r0, r4
 8005f3a:	d0e3      	beq.n	8005f04 <_malloc_r+0x64>
 8005f3c:	1a21      	subs	r1, r4, r0
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f000 f82e 	bl	8005fa0 <_sbrk_r>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1dd      	bne.n	8005f04 <_malloc_r+0x64>
 8005f48:	e7cf      	b.n	8005eea <_malloc_r+0x4a>
 8005f4a:	bf00      	nop
 8005f4c:	200002a4 	.word	0x200002a4
 8005f50:	200002a8 	.word	0x200002a8

08005f54 <_realloc_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	4607      	mov	r7, r0
 8005f58:	4614      	mov	r4, r2
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	b921      	cbnz	r1, 8005f68 <_realloc_r+0x14>
 8005f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f62:	4611      	mov	r1, r2
 8005f64:	f7ff bf9c 	b.w	8005ea0 <_malloc_r>
 8005f68:	b922      	cbnz	r2, 8005f74 <_realloc_r+0x20>
 8005f6a:	f7ff ff49 	bl	8005e00 <_free_r>
 8005f6e:	4625      	mov	r5, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f74:	f000 f830 	bl	8005fd8 <_malloc_usable_size_r>
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d20f      	bcs.n	8005f9c <_realloc_r+0x48>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4638      	mov	r0, r7
 8005f80:	f7ff ff8e 	bl	8005ea0 <_malloc_r>
 8005f84:	4605      	mov	r5, r0
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0f2      	beq.n	8005f70 <_realloc_r+0x1c>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	f7ff ff0f 	bl	8005db0 <memcpy>
 8005f92:	4631      	mov	r1, r6
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7ff ff33 	bl	8005e00 <_free_r>
 8005f9a:	e7e9      	b.n	8005f70 <_realloc_r+0x1c>
 8005f9c:	4635      	mov	r5, r6
 8005f9e:	e7e7      	b.n	8005f70 <_realloc_r+0x1c>

08005fa0 <_sbrk_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d06      	ldr	r5, [pc, #24]	; (8005fbc <_sbrk_r+0x1c>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fb f804 	bl	8000fb8 <_sbrk>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_sbrk_r+0x1a>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_sbrk_r+0x1a>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	200004d4 	.word	0x200004d4

08005fc0 <__malloc_lock>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	; (8005fc8 <__malloc_lock+0x8>)
 8005fc2:	f000 b811 	b.w	8005fe8 <__retarget_lock_acquire_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	200004dc 	.word	0x200004dc

08005fcc <__malloc_unlock>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	; (8005fd4 <__malloc_unlock+0x8>)
 8005fce:	f000 b80c 	b.w	8005fea <__retarget_lock_release_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	200004dc 	.word	0x200004dc

08005fd8 <_malloc_usable_size_r>:
 8005fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fdc:	1f18      	subs	r0, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bfbc      	itt	lt
 8005fe2:	580b      	ldrlt	r3, [r1, r0]
 8005fe4:	18c0      	addlt	r0, r0, r3
 8005fe6:	4770      	bx	lr

08005fe8 <__retarget_lock_acquire_recursive>:
 8005fe8:	4770      	bx	lr

08005fea <__retarget_lock_release_recursive>:
 8005fea:	4770      	bx	lr

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr
